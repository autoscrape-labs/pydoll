[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Chrome",
        "importPath": "pydoll.browser",
        "description": "pydoll.browser",
        "isExtraImport": true,
        "detail": "pydoll.browser",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseValues",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DownloadBehavior",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkErrorReason",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkErrorReason",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestStage",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreenshotFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DownloadBehavior",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WindowState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ElementRelation",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "IncludeWhitespace",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "LogicalAxes",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PhysicalAxes",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseValues",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkErrorReason",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestMethod",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestStage",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DragEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "GestureSourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyLocation",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyModifier",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PointerType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TouchEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ConnectionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ContentEncoding",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookiePriority",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSameSite",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSourceScheme",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ReferrerPolicy",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreencastFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreenshotFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransferMode",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransitionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WebLifecycleState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WindowState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "Scripts",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyModifier",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreenshotFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "Scripts",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DownloadBehavior",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WindowState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ElementRelation",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "IncludeWhitespace",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "LogicalAxes",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PhysicalAxes",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CompatibilityMode",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PseudoType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ShadowRootType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkErrorReason",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestMethod",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseValues",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestStage",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DragEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "GestureSourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyLocation",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyModifier",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PointerType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TouchEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ConnectionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ContentEncoding",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookiePriority",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSameSite",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSourceScheme",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AlternateProtocolUsage",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CertificateTransparencyCompliance",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ContentSecurityPolicySource",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookiePriority",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSameSite",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSourceScheme",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "InitiatorType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MixedContentType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkServiceWorkerResponseSource",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkServiceWorkerRouterSourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ReferrerPolicy",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RefreshPolicy",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourcePriority",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "SecurityState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TrustTokenOperationType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AutoResponseMode",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ReferrerPolicy",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreencastFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreenshotFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransferMode",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransitionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WebLifecycleState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DialogType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "OriginTrialStatus",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "OriginTrialTokenStatus",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "OriginTrialUsageRestriction",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionsPolicyBlockReason",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionsPolicyFeature",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransitionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DeepSerializedValueType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ObjectPreviewSubtype",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ObjectPreviewType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PropertyPreviewSubtype",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PropertyPreviewType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RemoteObjectSubtype",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RemoteObjectType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "SerializationValue",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "UnserializableEnum",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "StorageType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WindowState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DownloadBehavior",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkErrorReason",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestStage",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DownloadBehavior",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WindowState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ElementRelation",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "IncludeWhitespace",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "LogicalAxes",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PhysicalAxes",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseValues",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkErrorReason",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestMethod",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestStage",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DragEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "GestureSourceType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyLocation",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyModifier",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PointerType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TouchEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ConnectionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ContentEncoding",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookiePriority",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSameSite",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSourceScheme",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ReferrerPolicy",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreencastFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreenshotFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransferMode",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransitionType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WebLifecycleState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WindowState",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyModifier",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseEventType",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreenshotFormat",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "Scripts",
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "isExtraImport": true,
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BrowserOptionsManager",
        "importPath": "pydoll.browser.interfaces",
        "description": "pydoll.browser.interfaces",
        "isExtraImport": true,
        "detail": "pydoll.browser.interfaces",
        "documentation": {}
    },
    {
        "label": "BrowserOptionsManager",
        "importPath": "pydoll.browser.interfaces",
        "description": "pydoll.browser.interfaces",
        "isExtraImport": true,
        "detail": "pydoll.browser.interfaces",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "pydoll.browser.interfaces",
        "description": "pydoll.browser.interfaces",
        "isExtraImport": true,
        "detail": "pydoll.browser.interfaces",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "pydoll.browser.interfaces",
        "description": "pydoll.browser.interfaces",
        "isExtraImport": true,
        "detail": "pydoll.browser.interfaces",
        "documentation": {}
    },
    {
        "label": "BrowserProcessManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ProxyManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "TempDirectoryManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ChromiumOptionsManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ChromiumOptionsManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ProxyManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ChromiumOptionsManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "BrowserProcessManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "TempDirectoryManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ChromiumOptionsManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ChromiumOptionsManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ChromiumOptionsManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "BrowserProcessManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "ProxyManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "TempDirectoryManager",
        "importPath": "pydoll.browser.managers",
        "description": "pydoll.browser.managers",
        "isExtraImport": true,
        "detail": "pydoll.browser.managers",
        "documentation": {}
    },
    {
        "label": "Tab",
        "importPath": "pydoll.browser.tab",
        "description": "pydoll.browser.tab",
        "isExtraImport": true,
        "detail": "pydoll.browser.tab",
        "documentation": {}
    },
    {
        "label": "Tab",
        "importPath": "pydoll.browser.tab",
        "description": "pydoll.browser.tab",
        "isExtraImport": true,
        "detail": "pydoll.browser.tab",
        "documentation": {}
    },
    {
        "label": "Tab",
        "importPath": "pydoll.browser.tab",
        "description": "pydoll.browser.tab",
        "isExtraImport": true,
        "detail": "pydoll.browser.tab",
        "documentation": {}
    },
    {
        "label": "Tab",
        "importPath": "pydoll.browser.tab",
        "description": "pydoll.browser.tab",
        "isExtraImport": true,
        "detail": "pydoll.browser.tab",
        "documentation": {}
    },
    {
        "label": "BrowserCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "FetchCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "RuntimeCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "StorageCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "TargetCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "DomCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "FetchCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "NetworkCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "PageCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "RuntimeCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "StorageCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "DomCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "RuntimeCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "DomCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "InputCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "PageCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "RuntimeCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "BrowserCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "FetchCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "RuntimeCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "StorageCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "TargetCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "DomCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "InputCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "PageCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "RuntimeCommands",
        "importPath": "pydoll.commands",
        "description": "pydoll.commands",
        "isExtraImport": true,
        "detail": "pydoll.commands",
        "documentation": {}
    },
    {
        "label": "ConnectionHandler",
        "importPath": "pydoll.connection",
        "description": "pydoll.connection",
        "isExtraImport": true,
        "detail": "pydoll.connection",
        "documentation": {}
    },
    {
        "label": "ConnectionHandler",
        "importPath": "pydoll.connection",
        "description": "pydoll.connection",
        "isExtraImport": true,
        "detail": "pydoll.connection",
        "documentation": {}
    },
    {
        "label": "ConnectionHandler",
        "importPath": "pydoll.connection",
        "description": "pydoll.connection",
        "isExtraImport": true,
        "detail": "pydoll.connection",
        "documentation": {}
    },
    {
        "label": "ConnectionHandler",
        "importPath": "pydoll.connection",
        "description": "pydoll.connection",
        "isExtraImport": true,
        "detail": "pydoll.connection",
        "documentation": {}
    },
    {
        "label": "BrowserNotRunning",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "FailedToStartBrowser",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NoValidTabFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "UnsupportedOS",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "UnsupportedOS",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidOptionsObject",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ArgumentAlreadyExistsInOptions",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "IFrameNotFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidFileExtension",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidIFrame",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidScriptWithElement",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NetworkEventsNotEnabled",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NoDialogPresent",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAnIFrame",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "PageLoadTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WaitElementTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "CommandExecutionTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WebSocketConnectionClosed",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WaitElementTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotAFileInput",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotInteractable",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotVisible",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidBrowserPath",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidResponse",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NetworkError",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "UnsupportedOS",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidBrowserPath",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "UnsupportedOS",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidBrowserPath",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ArgumentAlreadyExistsInOptions",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NoDialogPresent",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "PageLoadTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "IFrameNotFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidIFrame",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAnIFrame",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidFileExtension",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WaitElementTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NetworkEventsNotEnabled",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidScriptWithElement",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidOptionsObject",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# Base exceptions\n    PydollException",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ConnectionException",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "BrowserException",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ProtocolException",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementException",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ConfigurationException",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "DialogException",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# Connection exceptions\n    ConnectionFailed",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ReconnectionFailed",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WebSocketConnectionClosed",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NetworkError",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# Browser exceptions\n    BrowserNotRunning",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "FailedToStartBrowser",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "UnsupportedOS",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NoValidTabFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# Protocol exceptions\n    InvalidCommand",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidResponse",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ResendCommandFailed",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "CommandExecutionTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidCallback",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "EventNotSupported",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# Element exceptions\n    ElementNotFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotVisible",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotInteractable",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ClickIntercepted",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotAFileInput",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# Timeout exceptions\n    PageLoadTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WaitElementTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# Configuration exceptions\n    InvalidOptionsObject",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidBrowserPath",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ArgumentAlreadyExistsInOptions",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidFileExtension",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# Dialog exceptions\n    NoDialogPresent",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "# IFrame exceptions\n    NotAnIFrame",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidIFrame",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "IFrameNotFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WaitElementTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotVisible",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotInteractable",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotFound",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotAFileInput",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WaitElementTimeout",
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "isExtraImport": true,
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "isExtraImport": true,
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "GetVersionResponse",
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "GetVersionResultDict",
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "GetWindowForTargetResponse",
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "GetVersionResponse",
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "GetWindowForTargetResponse",
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "WindowBoundsDict",
        "importPath": "pydoll.protocol.browser.types",
        "description": "pydoll.protocol.browser.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.types",
        "documentation": {}
    },
    {
        "label": "WindowBoundsDict",
        "importPath": "pydoll.protocol.browser.types",
        "description": "pydoll.protocol.browser.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.types",
        "documentation": {}
    },
    {
        "label": "WindowBoundsDict",
        "importPath": "pydoll.protocol.browser.types",
        "description": "pydoll.protocol.browser.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.types",
        "documentation": {}
    },
    {
        "label": "FetchEvent",
        "importPath": "pydoll.protocol.fetch.events",
        "description": "pydoll.protocol.fetch.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.events",
        "documentation": {}
    },
    {
        "label": "FetchEvent",
        "importPath": "pydoll.protocol.fetch.events",
        "description": "pydoll.protocol.fetch.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.events",
        "documentation": {}
    },
    {
        "label": "FetchEvent",
        "importPath": "pydoll.protocol.fetch.events",
        "description": "pydoll.protocol.fetch.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.events",
        "documentation": {}
    },
    {
        "label": "HeaderEntry",
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "HeaderEntry",
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseDict",
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "HeaderEntry",
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "RequestPattern",
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "HeaderEntry",
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "RequestPattern",
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "HeaderEntry",
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CookieParam",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "RequestPausedEvent",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CookieParam",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "NetworkLog",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CookiePartitionKey",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "LoadNetworkResourceOptions",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CookieParam",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CookiePartitionKey",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "LoadNetworkResourceOptions",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "UserAgentMetadata",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "SearchMatch",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "SecurityIsolationStatus",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "SearchMatch",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CookieParam",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "GetCookiesResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetCookiesResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "ClearTrustTokensResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetAffectedUrlsForThirdPartyCookieMetadataResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetCookiesResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetInterestGroupDetailsResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetRelatedWebsiteSetsResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageEntriesResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageMetadataResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetStorageKeyForFrameResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetTrustTokensResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetUsageAndQuotaResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "RunBounceTrackingMitigationsResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "SendPendingAttributionReportsResponse",
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "CreateBrowserContextResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "CreateTargetResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetBrowserContextsResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetTargetsResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "AttachToBrowserTargetResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "AttachToTargetResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "CreateBrowserContextResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "CreateTargetResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetBrowserContextsResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetTargetInfoResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetTargetsResponse",
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "TargetInfo",
        "importPath": "pydoll.protocol.target.types",
        "description": "pydoll.protocol.target.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.types",
        "documentation": {}
    },
    {
        "label": "RemoteLocation",
        "importPath": "pydoll.protocol.target.types",
        "description": "pydoll.protocol.target.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.types",
        "documentation": {}
    },
    {
        "label": "TargetInfo",
        "importPath": "pydoll.protocol.target.types",
        "description": "pydoll.protocol.target.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.types",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "pydoll.browser.chromium.base",
        "description": "pydoll.browser.chromium.base",
        "isExtraImport": true,
        "detail": "pydoll.browser.chromium.base",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "pydoll.browser.chromium.base",
        "description": "pydoll.browser.chromium.base",
        "isExtraImport": true,
        "detail": "pydoll.browser.chromium.base",
        "documentation": {}
    },
    {
        "label": "Browser",
        "importPath": "pydoll.browser.chromium.base",
        "description": "pydoll.browser.chromium.base",
        "isExtraImport": true,
        "detail": "pydoll.browser.chromium.base",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "isExtraImport": true,
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "validate_browser_paths",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "validate_browser_paths",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "decode_base64_to_bytes",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "has_return_outside_function",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "is_script_already_function",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "get_browser_ws_address",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "decode_base64_to_bytes",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "extract_text_from_html",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "clean_script_for_analysis",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "decode_base64_to_bytes",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "get_browser_ws_address",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "has_return_outside_function",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "is_script_already_function",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "validate_browser_paths",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "extract_text_from_html",
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "isExtraImport": true,
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "TemporaryDirectory",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "FindElementsMixin",
        "importPath": "pydoll.elements.mixins",
        "description": "pydoll.elements.mixins",
        "isExtraImport": true,
        "detail": "pydoll.elements.mixins",
        "documentation": {}
    },
    {
        "label": "FindElementsMixin",
        "importPath": "pydoll.elements.mixins",
        "description": "pydoll.elements.mixins",
        "isExtraImport": true,
        "detail": "pydoll.elements.mixins",
        "documentation": {}
    },
    {
        "label": "WebElement",
        "importPath": "pydoll.elements.web_element",
        "description": "pydoll.elements.web_element",
        "isExtraImport": true,
        "detail": "pydoll.elements.web_element",
        "documentation": {}
    },
    {
        "label": "WebElement",
        "importPath": "pydoll.elements.web_element",
        "description": "pydoll.elements.web_element",
        "isExtraImport": true,
        "detail": "pydoll.elements.web_element",
        "documentation": {}
    },
    {
        "label": "EventFileChooserOpened",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "Quad",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "CSSComputedStyleProperty",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "BoxModel",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "DetachedElementInfo",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "Quad",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetCertificateResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetCookiesResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetRequestPostDataResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyForInterceptionResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetSecurityIsolationStatusResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "LoadNetworkResourceResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "SearchInResponseBodyResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "SetCookieResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "StreamResourceContentResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyForInterceptionAsStreamResponse",
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "PageEvent",
        "importPath": "pydoll.protocol.page.events",
        "description": "pydoll.protocol.page.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.events",
        "documentation": {}
    },
    {
        "label": "PageEvent",
        "importPath": "pydoll.protocol.page.events",
        "description": "pydoll.protocol.page.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.events",
        "documentation": {}
    },
    {
        "label": "CaptureScreenshotResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "PrintToPDFResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "AddScriptToEvaluateOnNewDocumentResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CaptureScreenshotResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CaptureSnapshotResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CreateIsolatedWorldResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAdScriptAncestryIdsResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAppIdResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAppManifestResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetFrameTreeResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetInstallabilityErrorsResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetLayoutMetricsResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetNavigationHistoryResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetOriginTrialsResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetPermissionsPolicyStateResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetResourceContentResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetResourceTreeResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "NavigateResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "PrintToPDFResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "SearchInResourceResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CaptureScreenshotResponse",
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CallFunctionOnResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "EvaluateResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "AwaitPromiseResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "CallFunctionOnResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "CompileScriptResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "EvaluateResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetPropertiesResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GlobalLexicalScopeNamesResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "QueryObjectsResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "RunScriptResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "CallFunctionOnResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "EvaluateResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetPropertiesResponse",
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "BrowserMethod",
        "importPath": "pydoll.protocol.browser.methods",
        "description": "pydoll.protocol.browser.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.methods",
        "documentation": {}
    },
    {
        "label": "BrowserMethod",
        "importPath": "pydoll.protocol.browser.methods",
        "description": "pydoll.protocol.browser.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.methods",
        "documentation": {}
    },
    {
        "label": "CancelDownloadParams",
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "GetWindowForTargetParams",
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "GrantPermissionsParams",
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "ResetPermissionsParams",
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "SetDownloadBehaviorParams",
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "SetWindowBoundsParams",
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "WindowBoundsDict",
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "DomMethod",
        "importPath": "pydoll.protocol.dom.methods",
        "description": "pydoll.protocol.dom.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.methods",
        "documentation": {}
    },
    {
        "label": "DomMethod",
        "importPath": "pydoll.protocol.dom.methods",
        "description": "pydoll.protocol.dom.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.methods",
        "documentation": {}
    },
    {
        "label": "CollectClassNamesFromSubtreeParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "CopyToParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "CSSComputedStyleProperty",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "DescribeNodeParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "DiscardSearchResultsParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "DomEnableParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "DomFocusParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetAnchorElementParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetAttributesParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetBoxModelParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetContainerForNodeParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetContentQuadsParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetDocumentParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetElementByRelationParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetFileInfoParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetFrameOwnerParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetNodeForLocationParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetNodesForSubtreeByStyleParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetNodeStackTracesParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetOuterHTMLParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetQueryingDescendantForContainerParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetRelayoutBoundaryParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetSearchResultsParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "MoveToParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "PerformSearchParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "PushNodeByPathToFrontendParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "PushNodesByBackendIdsToFrontendParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "QuerySelectorAllParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "QuerySelectorParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "RemoveAttributeParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "RemoveNodeParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "RequestChildNodesParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "RequestNodeParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "ResolveNodeParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "ScrollIntoViewIfNeededParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetAttributeAsTextParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetAttributeValueParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetFileInputFilesParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetInspectedNodeParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetNodeNameParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetNodeStackTracesEnabledParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetNodeValueParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetOuterHTMLParams",
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "CollectClassNamesFromSubtreeResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "CopyToResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "DescribeNodeResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetAnchorElementResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetAttributesResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetBoxModelResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetContainerForNodeResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetContentQuadsResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetDetachedDomNodesResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetDocumentResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetElementByRelationResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetFileInfoResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetFrameOwnerResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodeForLocationResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodesForSubtreeByStyleResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodeStackTracesResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetOuterHTMLResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetQueryingDescendantForContainerResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetRelayoutBoundaryResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetSearchResultsResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetTopLayerElementsResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "MoveToResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PerformSearchResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PushNodeByPathToFrontendResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PushNodesByBackendIdsToFrontendResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "QuerySelectorAllResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "QuerySelectorResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "RequestNodeResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "ResolveNodeResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "SetNodeNameResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "DescribeNodeResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetBoxModelResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetOuterHTMLResponse",
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "FetchMethod",
        "importPath": "pydoll.protocol.fetch.methods",
        "description": "pydoll.protocol.fetch.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.methods",
        "documentation": {}
    },
    {
        "label": "FetchMethod",
        "importPath": "pydoll.protocol.fetch.methods",
        "description": "pydoll.protocol.fetch.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.methods",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseDict",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "ContinueRequestParams",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "ContinueResponseParams",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "ContinueWithAuthParams",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "FailRequestParams",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "FetchEnableParams",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "FulfillRequestParams",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyParams",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "HeaderEntry",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "RequestPattern",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyAsStreamParams",
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyResponse",
        "importPath": "pydoll.protocol.fetch.responses",
        "description": "pydoll.protocol.fetch.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.responses",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyAsStreamResponse",
        "importPath": "pydoll.protocol.fetch.responses",
        "description": "pydoll.protocol.fetch.responses",
        "isExtraImport": true,
        "detail": "pydoll.protocol.fetch.responses",
        "documentation": {}
    },
    {
        "label": "InputMethod",
        "importPath": "pydoll.protocol.input.methods",
        "description": "pydoll.protocol.input.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.methods",
        "documentation": {}
    },
    {
        "label": "InputMethod",
        "importPath": "pydoll.protocol.input.methods",
        "description": "pydoll.protocol.input.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.methods",
        "documentation": {}
    },
    {
        "label": "DispatchDragEventParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "DispatchKeyEventParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "DispatchMouseEventParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "DispatchTouchEventParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "DragData",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "EmulateTouchFromMouseEventParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "ImeSetCompositionParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "InsertTextParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SetIgnoreInputEventsParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SetInterceptDragsParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SynthesizePinchGestureParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SynthesizeScrollGestureParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SynthesizeTapGestureParams",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "TouchPoint",
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "NetworkMethod",
        "importPath": "pydoll.protocol.network.methods",
        "description": "pydoll.protocol.network.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.methods",
        "documentation": {}
    },
    {
        "label": "NetworkMethod",
        "importPath": "pydoll.protocol.network.methods",
        "description": "pydoll.protocol.network.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.methods",
        "documentation": {}
    },
    {
        "label": "DeleteCookiesParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "EmulateNetworkConditionsParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "EnableReportingApiParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetCertificateParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetCookiesParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetRequestPostDataParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyForInterceptionParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetSecurityIsolationStatusParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "HeaderEntry",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "LoadNetworkResourceParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "NetworkEnableParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "ReplayXHRParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SearchInResponseBodyParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetAcceptedEncodingsParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetAttachDebugStackParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetBlockedURLsParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetBypassServiceWorkerParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetCacheDisabledParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetCookieControlsParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetCookieParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetCookiesParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetExtraHTTPHeadersParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetUserAgentOverrideParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "StreamResourceContentParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyForInterceptionAsStreamParams",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "UserAgentMetadata",
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "PageMethod",
        "importPath": "pydoll.protocol.page.methods",
        "description": "pydoll.protocol.page.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.methods",
        "documentation": {}
    },
    {
        "label": "PageMethod",
        "importPath": "pydoll.protocol.page.methods",
        "description": "pydoll.protocol.page.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.methods",
        "documentation": {}
    },
    {
        "label": "AddCompilationCacheParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "AddScriptToEvaluateOnNewDocumentParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "AutoResponseMode",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "CaptureScreenshotParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "CaptureSnapshotParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "CompilationCacheParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "CreateIsolatedWorldParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "FontFamilies",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "FontSizes",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GenerateTestReportParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetAdScriptAncestryIdsParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetAppIdParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetAppManifestParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetOriginTrialsParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetPermissionsPolicyStateParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetResourceContentParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "HandleJavaScriptDialogParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "NavigateParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "NavigateToHistoryEntryParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "PageEnableParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "PrintToPDFParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "ProduceCompilationCacheParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "ReloadParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "RemoveScriptToEvaluateOnNewDocumentParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "ScreencastFrameAckParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "ScriptFontFamilies",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SearchInResourceParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetAdBlockingEnabledParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetBypassCSPParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetDocumentContentParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetFontFamiliesParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetFontSizesParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetInterceptFileChooserDialogParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetLifecycleEventsEnabledParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetPrerenderingAllowedParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetRPHRegistrationModeParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetSPCTransactionModeParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetWebLifecycleStateParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "StartScreencastParams",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "Viewport",
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "RuntimeMethod",
        "importPath": "pydoll.protocol.runtime.methods",
        "description": "pydoll.protocol.runtime.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.methods",
        "documentation": {}
    },
    {
        "label": "RuntimeMethod",
        "importPath": "pydoll.protocol.runtime.methods",
        "description": "pydoll.protocol.runtime.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.methods",
        "documentation": {}
    },
    {
        "label": "AddBindingParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "AwaitPromiseParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "CallArgument",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "CallFunctionOnParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "CompileScriptParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "EvaluateParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "GetPropertiesParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "GlobalLexicalScopeNamesParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "QueryObjectsParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "ReleaseObjectGroupParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "ReleaseObjectParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "RemoveBindingParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "RunScriptParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "SerializationOptions",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "SetAsyncCallStackDepthParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "SetCustomObjectFormatterEnabledParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "SetMaxCallStackSizeToCaptureParams",
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "StorageMethod",
        "importPath": "pydoll.protocol.storage.methods",
        "description": "pydoll.protocol.storage.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.methods",
        "documentation": {}
    },
    {
        "label": "StorageMethod",
        "importPath": "pydoll.protocol.storage.methods",
        "description": "pydoll.protocol.storage.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.methods",
        "documentation": {}
    },
    {
        "label": "ClearCookiesParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ClearDataForOriginParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ClearDataForStorageKeyParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ClearSharedStorageEntriesParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ClearTrustTokensParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "DeleteSharedStorageEntryParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "DeleteStorageBucketParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetAffectedUrlsForThirdPartyCookieMetadataParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetCookiesParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetInterestGroupDetailsParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetRelatedWebsiteSetsParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageEntriesParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageMetadataParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetStorageKeyForFrameParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetUsageAndQuotaParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "OverrideQuotaForOriginParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "RelatedWebsiteSet",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ResetSharedStorageBudgetParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetAttributionReportingLocalTestingModeParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetAttributionReportingTrackingParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetCookiesParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetInterestGroupAuctionTrackingParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetInterestGroupTrackingParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetProtectedAudienceKAnonymityParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetSharedStorageEntryParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetSharedStorageTrackingParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetStorageBucketTrackingParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "StorageBucket",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TrackCacheStorageForOriginParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TrackCacheStorageForStorageKeyParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TrackIndexedDBForOriginParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TrackIndexedDBForStorageKeyParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "UntrackCacheStorageForOriginParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "UntrackCacheStorageForStorageKeyParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "UntrackIndexedDBForOriginParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "UntrackIndexedDBForStorageKeyParams",
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TargetMethod",
        "importPath": "pydoll.protocol.target.methods",
        "description": "pydoll.protocol.target.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.methods",
        "documentation": {}
    },
    {
        "label": "TargetMethod",
        "importPath": "pydoll.protocol.target.methods",
        "description": "pydoll.protocol.target.methods",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.methods",
        "documentation": {}
    },
    {
        "label": "ActivateTargetParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "AttachToBrowserTargetParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "AttachToTargetParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "CloseTargetParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "CreateBrowserContextParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "CreateTargetParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "DetachFromTargetParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "DisposeBrowserContextParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "GetTargetInfoParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "GetTargetsParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "RemoteLocation",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "SetAutoAttachParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "SetDiscoverTargetsParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "SetRemoteLocationsParams",
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "JavascriptDialogOpeningEvent",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "JavascriptDialogOpeningEventParams",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "Viewport",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FontFamilies",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FontSizes",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "InstallabilityError",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "ScriptFontFamilies",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "Viewport",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "AdScriptId",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "AppManifestError",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FrameResourceTree",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FrameTree",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "InstallabilityError",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "LayoutViewport",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "NavigationEntry",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "OriginTrial",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "PermissionsPolicyFeatureState",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "VisualViewport",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "WebAppManifest",
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "ClientConnection",
        "importPath": "websockets.asyncio.client",
        "description": "websockets.asyncio.client",
        "isExtraImport": true,
        "detail": "websockets.asyncio.client",
        "documentation": {}
    },
    {
        "label": "connect",
        "importPath": "websockets.asyncio.client",
        "description": "websockets.asyncio.client",
        "isExtraImport": true,
        "detail": "websockets.asyncio.client",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "websockets.protocol",
        "description": "websockets.protocol",
        "isExtraImport": true,
        "detail": "websockets.protocol",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "websockets.protocol",
        "description": "websockets.protocol",
        "isExtraImport": true,
        "detail": "websockets.protocol",
        "documentation": {}
    },
    {
        "label": "CommandsManager",
        "importPath": "pydoll.connection.managers",
        "description": "pydoll.connection.managers",
        "isExtraImport": true,
        "detail": "pydoll.connection.managers",
        "documentation": {}
    },
    {
        "label": "EventsManager",
        "importPath": "pydoll.connection.managers",
        "description": "pydoll.connection.managers",
        "isExtraImport": true,
        "detail": "pydoll.connection.managers",
        "documentation": {}
    },
    {
        "label": "CommandsManager",
        "importPath": "pydoll.connection.managers",
        "description": "pydoll.connection.managers",
        "isExtraImport": true,
        "detail": "pydoll.connection.managers",
        "documentation": {}
    },
    {
        "label": "EventsManager",
        "importPath": "pydoll.connection.managers",
        "description": "pydoll.connection.managers",
        "isExtraImport": true,
        "detail": "pydoll.connection.managers",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "RemoteObject",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "StackTrace",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "StackTrace",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "CallArgument",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "SerializationOptions",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "ExceptionDetails",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "InternalPropertyDescriptor",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "PrivatePropertyDescriptor",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "PropertyDescriptor",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "RemoteObject",
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "DragData",
        "importPath": "pydoll.protocol.input.types",
        "description": "pydoll.protocol.input.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.types",
        "documentation": {}
    },
    {
        "label": "TouchPoint",
        "importPath": "pydoll.protocol.input.types",
        "description": "pydoll.protocol.input.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.types",
        "documentation": {}
    },
    {
        "label": "RelatedWebsiteSet",
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "StorageBucket",
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "RelatedWebsiteSet",
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "SharedStorageEntry",
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "SharedStorageMetadata",
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "TrustToken",
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "UsageForType",
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "unescape",
        "importPath": "html",
        "description": "html",
        "isExtraImport": true,
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "HTMLParser",
        "importPath": "html.parser",
        "description": "html.parser",
        "isExtraImport": true,
        "detail": "html.parser",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ANY",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "ANY",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "ANY",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "pytest_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest_asyncio",
        "description": "pytest_asyncio",
        "detail": "pytest_asyncio",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "pydoll",
        "description": "pydoll",
        "isExtraImport": true,
        "detail": "pydoll",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "pydoll",
        "description": "pydoll",
        "isExtraImport": true,
        "detail": "pydoll",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "pydoll",
        "description": "pydoll",
        "isExtraImport": true,
        "detail": "pydoll",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "pydoll",
        "description": "pydoll",
        "isExtraImport": true,
        "detail": "pydoll",
        "documentation": {}
    },
    {
        "label": "Chrome",
        "importPath": "pydoll.browser.chromium.chrome",
        "description": "pydoll.browser.chromium.chrome",
        "isExtraImport": true,
        "detail": "pydoll.browser.chromium.chrome",
        "documentation": {}
    },
    {
        "label": "Chrome",
        "importPath": "pydoll.browser.chromium.chrome",
        "description": "pydoll.browser.chromium.chrome",
        "isExtraImport": true,
        "detail": "pydoll.browser.chromium.chrome",
        "documentation": {}
    },
    {
        "label": "ConnectionHandler",
        "importPath": "pydoll.connection.connection_handler",
        "description": "pydoll.connection.connection_handler",
        "isExtraImport": true,
        "detail": "pydoll.connection.connection_handler",
        "documentation": {}
    },
    {
        "label": "Edge",
        "importPath": "pydoll.browser.chromium.edge",
        "description": "pydoll.browser.chromium.edge",
        "isExtraImport": true,
        "detail": "pydoll.browser.chromium.edge",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "BrowserCommands",
        "importPath": "pydoll.commands.browser_commands",
        "description": "pydoll.commands.browser_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.browser_commands",
        "documentation": {}
    },
    {
        "label": "DomCommands",
        "importPath": "pydoll.commands.dom_commands",
        "description": "pydoll.commands.dom_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.dom_commands",
        "documentation": {}
    },
    {
        "label": "FetchCommands",
        "importPath": "pydoll.commands.fetch_commands",
        "description": "pydoll.commands.fetch_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.fetch_commands",
        "documentation": {}
    },
    {
        "label": "InputCommands",
        "importPath": "pydoll.commands.input_commands",
        "description": "pydoll.commands.input_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.input_commands",
        "documentation": {}
    },
    {
        "label": "NetworkCommands",
        "importPath": "pydoll.commands.network_commands",
        "description": "pydoll.commands.network_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.network_commands",
        "documentation": {}
    },
    {
        "label": "PageCommands",
        "importPath": "pydoll.commands.page_commands",
        "description": "pydoll.commands.page_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.page_commands",
        "documentation": {}
    },
    {
        "label": "RuntimeCommands",
        "importPath": "pydoll.commands.runtime_commands",
        "description": "pydoll.commands.runtime_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.runtime_commands",
        "documentation": {}
    },
    {
        "label": "StorageCommands",
        "importPath": "pydoll.commands.storage_commands",
        "description": "pydoll.commands.storage_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.storage_commands",
        "documentation": {}
    },
    {
        "label": "TargetCommands",
        "importPath": "pydoll.commands.target_commands",
        "description": "pydoll.commands.target_commands",
        "isExtraImport": true,
        "detail": "pydoll.commands.target_commands",
        "documentation": {}
    },
    {
        "label": "BrowserEvent",
        "importPath": "pydoll.protocol.browser.events",
        "description": "pydoll.protocol.browser.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.browser.events",
        "documentation": {}
    },
    {
        "label": "DomEvent",
        "importPath": "pydoll.protocol.dom.events",
        "description": "pydoll.protocol.dom.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.dom.events",
        "documentation": {}
    },
    {
        "label": "InputEvent",
        "importPath": "pydoll.protocol.input.events",
        "description": "pydoll.protocol.input.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.input.events",
        "documentation": {}
    },
    {
        "label": "NetworkEvent",
        "importPath": "pydoll.protocol.network.events",
        "description": "pydoll.protocol.network.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.network.events",
        "documentation": {}
    },
    {
        "label": "RuntimeEvent",
        "importPath": "pydoll.protocol.runtime.events",
        "description": "pydoll.protocol.runtime.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.runtime.events",
        "documentation": {}
    },
    {
        "label": "StorageEvent",
        "importPath": "pydoll.protocol.storage.events",
        "description": "pydoll.protocol.storage.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.storage.events",
        "documentation": {}
    },
    {
        "label": "TargetEvent",
        "importPath": "pydoll.protocol.target.events",
        "description": "pydoll.protocol.target.events",
        "isExtraImport": true,
        "detail": "pydoll.protocol.target.events",
        "documentation": {}
    },
    {
        "label": "FindElementsMixin",
        "importPath": "pydoll.elements.mixins.find_elements_mixin",
        "description": "pydoll.elements.mixins.find_elements_mixin",
        "isExtraImport": true,
        "detail": "pydoll.elements.mixins.find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "aioresponses",
        "importPath": "aioresponses",
        "description": "aioresponses",
        "isExtraImport": true,
        "detail": "aioresponses",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"pydoll-python-py3.12\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"pydoll-python-py3.12\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"pydoll-python-py3.12\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"pydoll-python-py3.12\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"pydoll-python-py3.12\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "Browser",
        "kind": 6,
        "importPath": "pydoll.browser.chromium.base",
        "description": "pydoll.browser.chromium.base",
        "peekOfCode": "class Browser(ABC):  # noqa: PLR0904\n    \"\"\"\n    Abstract base class for browser automation using Chrome DevTools Protocol.\n    Provides comprehensive browser control including lifecycle management,\n    context handling, network interception, cookie management, and CDP commands.\n    \"\"\"\n    def __init__(\n        self,\n        options_manager: BrowserOptionsManager,\n        connection_port: Optional[int] = None,",
        "detail": "pydoll.browser.chromium.base",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pydoll.browser.chromium.base",
        "description": "pydoll.browser.chromium.base",
        "peekOfCode": "T = TypeVar('T')\nclass Browser(ABC):  # noqa: PLR0904\n    \"\"\"\n    Abstract base class for browser automation using Chrome DevTools Protocol.\n    Provides comprehensive browser control including lifecycle management,\n    context handling, network interception, cookie management, and CDP commands.\n    \"\"\"\n    def __init__(\n        self,\n        options_manager: BrowserOptionsManager,",
        "detail": "pydoll.browser.chromium.base",
        "documentation": {}
    },
    {
        "label": "Chrome",
        "kind": 6,
        "importPath": "pydoll.browser.chromium.chrome",
        "description": "pydoll.browser.chromium.chrome",
        "peekOfCode": "class Chrome(Browser):\n    \"\"\"Chrome browser implementation for CDP automation.\"\"\"\n    def __init__(\n        self,\n        options: Optional[ChromiumOptions] = None,\n        connection_port: Optional[int] = None,\n    ):\n        \"\"\"\n        Initialize Chrome browser instance.\n        Args:",
        "detail": "pydoll.browser.chromium.chrome",
        "documentation": {}
    },
    {
        "label": "Edge",
        "kind": 6,
        "importPath": "pydoll.browser.chromium.edge",
        "description": "pydoll.browser.chromium.edge",
        "peekOfCode": "class Edge(Browser):\n    \"\"\"Edge browser implementation for CDP automation.\"\"\"\n    def __init__(\n        self,\n        options: Optional[Options] = None,\n        connection_port: Optional[int] = None,\n    ):\n        \"\"\"\n        Initialize Edge browser instance.\n        Args:",
        "detail": "pydoll.browser.chromium.edge",
        "documentation": {}
    },
    {
        "label": "ChromiumOptionsManager",
        "kind": 6,
        "importPath": "pydoll.browser.managers.browser_options_manager",
        "description": "pydoll.browser.managers.browser_options_manager",
        "peekOfCode": "class ChromiumOptionsManager(BrowserOptionsManager):\n    \"\"\"\n    Manages browser options configuration for Chromium-based browsers.\n    Handles options creation, validation, and applies default CDP arguments\n    for Chrome and Edge browsers.\n    \"\"\"\n    def __init__(self, options: Optional[Options] = None):\n        self.options = options\n    def initialize_options(\n        self,",
        "detail": "pydoll.browser.managers.browser_options_manager",
        "documentation": {}
    },
    {
        "label": "BrowserProcessManager",
        "kind": 6,
        "importPath": "pydoll.browser.managers.browser_process_manager",
        "description": "pydoll.browser.managers.browser_process_manager",
        "peekOfCode": "class BrowserProcessManager:\n    \"\"\"\n    Manages browser process lifecycle for CDP automation.\n    Handles process creation, monitoring, and termination with proper\n    resource cleanup and graceful shutdown.\n    \"\"\"\n    def __init__(\n        self,\n        process_creator: Optional[Callable[[list[str]], subprocess.Popen]] = None,\n    ):",
        "detail": "pydoll.browser.managers.browser_process_manager",
        "documentation": {}
    },
    {
        "label": "ProxyManager",
        "kind": 6,
        "importPath": "pydoll.browser.managers.proxy_manager",
        "description": "pydoll.browser.managers.proxy_manager",
        "peekOfCode": "class ProxyManager:\n    \"\"\"\n    Manages proxy configuration and credentials for CDP automation.\n    Extracts embedded credentials from proxy URLs, secures authentication\n    information, and sanitizes command-line arguments.\n    \"\"\"\n    def __init__(self, options: Options):\n        \"\"\"\n        Initialize proxy manager with browser options.\n        Args:",
        "detail": "pydoll.browser.managers.proxy_manager",
        "documentation": {}
    },
    {
        "label": "TempDirectoryManager",
        "kind": 6,
        "importPath": "pydoll.browser.managers.temp_dir_manager",
        "description": "pydoll.browser.managers.temp_dir_manager",
        "peekOfCode": "class TempDirectoryManager:\n    \"\"\"\n    Manages temporary directory lifecycle for CDP browser automation.\n    Creates isolated temporary directories for browser profiles and handles\n    secure cleanup with retry mechanisms for locked files.\n    \"\"\"\n    def __init__(self, temp_dir_factory: Callable[[], TemporaryDirectory] = TemporaryDirectory):\n        \"\"\"\n        Initialize temporary directory manager.\n        Args:",
        "detail": "pydoll.browser.managers.temp_dir_manager",
        "documentation": {}
    },
    {
        "label": "Options",
        "kind": 6,
        "importPath": "pydoll.browser.interfaces",
        "description": "pydoll.browser.interfaces",
        "peekOfCode": "class Options(ABC):\n    @property\n    @abstractmethod\n    def arguments(self) -> list[str]:\n        pass\n    @property\n    @abstractmethod\n    def binary_location(self) -> str:\n        pass\n    @abstractmethod",
        "detail": "pydoll.browser.interfaces",
        "documentation": {}
    },
    {
        "label": "BrowserOptionsManager",
        "kind": 6,
        "importPath": "pydoll.browser.interfaces",
        "description": "pydoll.browser.interfaces",
        "peekOfCode": "class BrowserOptionsManager(ABC):\n    @abstractmethod\n    def initialize_options(self) -> Options:\n        pass\n    @abstractmethod\n    def add_default_arguments(self):\n        pass",
        "detail": "pydoll.browser.interfaces",
        "documentation": {}
    },
    {
        "label": "ChromiumOptions",
        "kind": 6,
        "importPath": "pydoll.browser.options",
        "description": "pydoll.browser.options",
        "peekOfCode": "class ChromiumOptions(Options):\n    \"\"\"\n    A class to manage command-line options for a browser instance.\n    This class allows the user to specify command-line arguments and\n    the binary location of the browser executable.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Initializes the Options instance.\n        Sets up an empty list for command-line arguments and a string",
        "detail": "pydoll.browser.options",
        "documentation": {}
    },
    {
        "label": "Tab",
        "kind": 6,
        "importPath": "pydoll.browser.tab",
        "description": "pydoll.browser.tab",
        "peekOfCode": "class Tab(FindElementsMixin):  # noqa: PLR0904\n    \"\"\"\n    Controls a browser tab via Chrome DevTools Protocol.\n    Primary interface for web page automation including navigation, DOM manipulation,\n    JavaScript execution, event handling, network monitoring, and specialized tasks\n    like Cloudflare bypass.\n    This class implements a singleton pattern based on target_id to ensure\n    only one Tab instance exists per browser tab.\n    \"\"\"\n    _instances: dict[str, 'Tab'] = {}",
        "detail": "pydoll.browser.tab",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pydoll.browser.tab",
        "description": "pydoll.browser.tab",
        "peekOfCode": "logger = logging.getLogger(__name__)\nIFrame: TypeAlias = 'Tab'\nclass Tab(FindElementsMixin):  # noqa: PLR0904\n    \"\"\"\n    Controls a browser tab via Chrome DevTools Protocol.\n    Primary interface for web page automation including navigation, DOM manipulation,\n    JavaScript execution, event handling, network monitoring, and specialized tasks\n    like Cloudflare bypass.\n    This class implements a singleton pattern based on target_id to ensure\n    only one Tab instance exists per browser tab.",
        "detail": "pydoll.browser.tab",
        "documentation": {}
    },
    {
        "label": "BrowserCommands",
        "kind": 6,
        "importPath": "pydoll.commands.browser_commands",
        "description": "pydoll.commands.browser_commands",
        "peekOfCode": "class BrowserCommands:\n    \"\"\"\n    BrowserCommands class provides a set of commands to interact with the\n    browser's main functionality based on CDP. These commands allow for\n    managing browser windows, such as closing windows, retrieving window IDs,\n    and adjusting window bounds (size and state).\n    The commands defined in this class provide functionality for:\n    - Managing browser windows and targets.\n    - Setting permissions and download behavior.\n    - Controlling browser windows (size, state).",
        "detail": "pydoll.commands.browser_commands",
        "documentation": {}
    },
    {
        "label": "DomCommands",
        "kind": 6,
        "importPath": "pydoll.commands.dom_commands",
        "description": "pydoll.commands.dom_commands",
        "peekOfCode": "class DomCommands:  # noqa\n    \"\"\"\n    Implementation of Chrome DevTools Protocol for the DOM domain.\n    This class provides commands for interacting with the Document Object Model (DOM) in the\n    browser, enabling access and manipulation of the element structure in a web page.\n    The DOM domain in Chrome DevTools Protocol exposes operations for reading and writing to the\n    DOM, which is fundamental for browser automation, testing, and debugging.\n    Each DOM element is represented by a mirror object with a unique ID. This ID can be used\n    to gather additional information about the node, resolve it into JavaScript object wrappers,\n    manipulate attributes, and perform various other operations on the DOM structure.",
        "detail": "pydoll.commands.dom_commands",
        "documentation": {}
    },
    {
        "label": "FetchCommands",
        "kind": 6,
        "importPath": "pydoll.commands.fetch_commands",
        "description": "pydoll.commands.fetch_commands",
        "peekOfCode": "class FetchCommands:\n    \"\"\"\n    This class encapsulates the fetch commands of the Chrome DevTools Protocol (CDP).\n    CDP's Fetch domain allows interception and modification of network requests\n    at the application layer. This enables developers to examine, modify, and\n    control network traffic, which is particularly useful for testing, debugging,\n    and advanced automation scenarios.\n    The commands defined in this class provide functionality for:\n    - Enabling and disabling fetch request interception\n    - Continuing, fulfilling, or failing intercepted requests",
        "detail": "pydoll.commands.fetch_commands",
        "documentation": {}
    },
    {
        "label": "InputCommands",
        "kind": 6,
        "importPath": "pydoll.commands.input_commands",
        "description": "pydoll.commands.input_commands",
        "peekOfCode": "class InputCommands:\n    \"\"\"\n    A class for simulating user input events using Chrome DevTools Protocol.\n    The Input domain provides methods for simulating user input, including:\n    - Keyboard events (key presses, releases)\n    - Mouse events (clicks, movements, wheel)\n    - Touch events (taps, multi-touch gestures)\n    - Drag and drop events\n    - Synthetic gestures (pinch, scroll, tap)\n    These methods allow for programmatic control of input events without requiring",
        "detail": "pydoll.commands.input_commands",
        "documentation": {}
    },
    {
        "label": "NetworkCommands",
        "kind": 6,
        "importPath": "pydoll.commands.network_commands",
        "description": "pydoll.commands.network_commands",
        "peekOfCode": "class NetworkCommands:  # noqa: PLR0904\n    \"\"\"\n    Implementation of Chrome DevTools Protocol for the Network domain.\n    This class provides commands for monitoring and manipulating network activities,\n    enabling detailed inspection and control over HTTP requests and responses.\n    The Network domain exposes comprehensive network-related information including:\n    - Request/response headers and bodies\n    - Resource timing and caching behavior\n    - Cookie management and security details\n    - Network conditions emulation",
        "detail": "pydoll.commands.network_commands",
        "documentation": {}
    },
    {
        "label": "PageCommands",
        "kind": 6,
        "importPath": "pydoll.commands.page_commands",
        "description": "pydoll.commands.page_commands",
        "peekOfCode": "class PageCommands:  # noqa: PLR0904\n    \"\"\"\n    This class encapsulates the page commands of the Chrome DevTools Protocol (CDP).\n    CDP's Page domain allows for interacting with browser pages, including navigation,\n    content manipulation, and page state monitoring. These commands provide powerful\n    capabilities for web automation, testing, and debugging.\n    The commands defined in this class provide functionality for:\n    - Navigating to URLs and managing page history\n    - Capturing screenshots and generating PDFs\n    - Handling JavaScript dialogs",
        "detail": "pydoll.commands.page_commands",
        "documentation": {}
    },
    {
        "label": "RuntimeCommands",
        "kind": 6,
        "importPath": "pydoll.commands.runtime_commands",
        "description": "pydoll.commands.runtime_commands",
        "peekOfCode": "class RuntimeCommands:\n    \"\"\"\n    A class for interacting with the JavaScript runtime using Chrome\n    DevTools Protocol.\n    This class provides methods to create commands for evaluating JavaScript\n    expressions, calling functions on JavaScript objects, and retrieving\n    object properties through CDP.\n    Attributes:\n        EVALUATE_TEMPLATE (dict): Template for the Runtime.evaluate command.\n        CALL_FUNCTION_ON_TEMPLATE (dict): Template for the",
        "detail": "pydoll.commands.runtime_commands",
        "documentation": {}
    },
    {
        "label": "StorageCommands",
        "kind": 6,
        "importPath": "pydoll.commands.storage_commands",
        "description": "pydoll.commands.storage_commands",
        "peekOfCode": "class StorageCommands:  # noqa: PLR0904\n    \"\"\"\n    A class for interacting with browser storage using Chrome DevTools Protocol (CDP).\n    The Storage domain of CDP allows managing various types of browser storage, including:\n    - Cookies\n    - Cache Storage\n    - IndexedDB\n    - Web Storage (localStorage/sessionStorage)\n    - Shared Storage\n    - Storage Buckets",
        "detail": "pydoll.commands.storage_commands",
        "documentation": {}
    },
    {
        "label": "TargetCommands",
        "kind": 6,
        "importPath": "pydoll.commands.target_commands",
        "description": "pydoll.commands.target_commands",
        "peekOfCode": "class TargetCommands:\n    \"\"\"\n    A class for managing browser targets using Chrome DevTools Protocol.\n    The Target domain of CDP supports additional targets discovery and allows to attach to them.\n    Targets can represent browser tabs, windows, frames, web workers, service workers, etc.\n    The domain provides methods to create, discover, and control these targets.\n    This class provides methods to create commands for interacting with browser targets,\n    including creating, activating, attaching to, and closing targets through CDP commands.\n    \"\"\"\n    @staticmethod",
        "detail": "pydoll.commands.target_commands",
        "documentation": {}
    },
    {
        "label": "CommandsManager",
        "kind": 6,
        "importPath": "pydoll.connection.managers.commands_manager",
        "description": "pydoll.connection.managers.commands_manager",
        "peekOfCode": "class CommandsManager:\n    \"\"\"\n    Manages command lifecycle and ID assignment for CDP commands.\n    Handles command future creation, ID generation, and response resolution\n    for asynchronous command execution.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize command manager with empty state.\"\"\"\n        self._pending_commands: dict[int, asyncio.Future] = {}\n        self._id = 1",
        "detail": "pydoll.connection.managers.commands_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pydoll.connection.managers.commands_manager",
        "description": "pydoll.connection.managers.commands_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CommandsManager:\n    \"\"\"\n    Manages command lifecycle and ID assignment for CDP commands.\n    Handles command future creation, ID generation, and response resolution\n    for asynchronous command execution.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize command manager with empty state.\"\"\"\n        self._pending_commands: dict[int, asyncio.Future] = {}",
        "detail": "pydoll.connection.managers.commands_manager",
        "documentation": {}
    },
    {
        "label": "EventsManager",
        "kind": 6,
        "importPath": "pydoll.connection.managers.events_manager",
        "description": "pydoll.connection.managers.events_manager",
        "peekOfCode": "class EventsManager:\n    \"\"\"\n    Manages event callbacks, processing, and network logs.\n    Handles event callback registration, triggering, and maintains state\n    for network logs and dialog information.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize events manager with empty state.\"\"\"\n        self._event_callbacks: dict[int, dict] = {}\n        self._callback_id = 0",
        "detail": "pydoll.connection.managers.events_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pydoll.connection.managers.events_manager",
        "description": "pydoll.connection.managers.events_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass EventsManager:\n    \"\"\"\n    Manages event callbacks, processing, and network logs.\n    Handles event callback registration, triggering, and maintains state\n    for network logs and dialog information.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize events manager with empty state.\"\"\"\n        self._event_callbacks: dict[int, dict] = {}",
        "detail": "pydoll.connection.managers.events_manager",
        "documentation": {}
    },
    {
        "label": "ConnectionHandler",
        "kind": 6,
        "importPath": "pydoll.connection.connection_handler",
        "description": "pydoll.connection.connection_handler",
        "peekOfCode": "class ConnectionHandler:\n    \"\"\"\n    WebSocket connection manager for Chrome DevTools Protocol endpoints.\n    Handles connection lifecycle, command execution, and event subscription\n    for both browser-level and page-level CDP endpoints.\n    \"\"\"\n    def __init__(\n        self,\n        connection_port: int,\n        page_id: Optional[str] = None,",
        "detail": "pydoll.connection.connection_handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pydoll.connection.connection_handler",
        "description": "pydoll.connection.connection_handler",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nT = TypeVar('T')\nclass ConnectionHandler:\n    \"\"\"\n    WebSocket connection manager for Chrome DevTools Protocol endpoints.\n    Handles connection lifecycle, command execution, and event subscription\n    for both browser-level and page-level CDP endpoints.\n    \"\"\"\n    def __init__(",
        "detail": "pydoll.connection.connection_handler",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pydoll.connection.connection_handler",
        "description": "pydoll.connection.connection_handler",
        "peekOfCode": "T = TypeVar('T')\nclass ConnectionHandler:\n    \"\"\"\n    WebSocket connection manager for Chrome DevTools Protocol endpoints.\n    Handles connection lifecycle, command execution, and event subscription\n    for both browser-level and page-level CDP endpoints.\n    \"\"\"\n    def __init__(\n        self,\n        connection_port: int,",
        "detail": "pydoll.connection.connection_handler",
        "documentation": {}
    },
    {
        "label": "FindElementsMixin",
        "kind": 6,
        "importPath": "pydoll.elements.mixins.find_elements_mixin",
        "description": "pydoll.elements.mixins.find_elements_mixin",
        "peekOfCode": "class FindElementsMixin:\n    \"\"\"\n    Mixin providing comprehensive element finding and waiting capabilities.\n    Implements DOM element location using various selector strategies (CSS, XPath, etc.)\n    with support for single/multiple element finding and configurable waiting.\n    Classes using this mixin gain powerful element discovery without implementing\n    complex location logic themselves.\n    \"\"\"\n    async def find(  # noqa: PLR0913, PLR0917\n        self,",
        "detail": "pydoll.elements.mixins.find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "create_web_element",
        "kind": 2,
        "importPath": "pydoll.elements.mixins.find_elements_mixin",
        "description": "pydoll.elements.mixins.find_elements_mixin",
        "peekOfCode": "def create_web_element(*args, **kwargs):\n    \"\"\"\n    Create WebElement instance avoiding circular imports.\n    Factory method that dynamically imports WebElement at runtime\n    to prevent circular import dependencies.\n    \"\"\"\n    from pydoll.elements.web_element import WebElement  # noqa: PLC0415\n    return WebElement(*args, **kwargs)\nclass FindElementsMixin:\n    \"\"\"",
        "detail": "pydoll.elements.mixins.find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "pydoll.elements.mixins.find_elements_mixin",
        "description": "pydoll.elements.mixins.find_elements_mixin",
        "peekOfCode": "T = TypeVar('T')\ndef create_web_element(*args, **kwargs):\n    \"\"\"\n    Create WebElement instance avoiding circular imports.\n    Factory method that dynamically imports WebElement at runtime\n    to prevent circular import dependencies.\n    \"\"\"\n    from pydoll.elements.web_element import WebElement  # noqa: PLC0415\n    return WebElement(*args, **kwargs)\nclass FindElementsMixin:",
        "detail": "pydoll.elements.mixins.find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "WebElement",
        "kind": 6,
        "importPath": "pydoll.elements.web_element",
        "description": "pydoll.elements.web_element",
        "peekOfCode": "class WebElement(FindElementsMixin):  # noqa: PLR0904\n    \"\"\"\n    DOM element wrapper for browser automation.\n    Provides comprehensive functionality for element interaction, inspection,\n    and manipulation using Chrome DevTools Protocol commands.\n    \"\"\"\n    def __init__(\n        self,\n        object_id: str,\n        connection_handler: ConnectionHandler,",
        "detail": "pydoll.elements.web_element",
        "documentation": {}
    },
    {
        "label": "BrowserEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.events",
        "description": "pydoll.protocol.browser.events",
        "peekOfCode": "class BrowserEvent(str, Enum):\n    \"\"\"\n    Events from the Browser domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of browser-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about browser activities and state changes.\n    \"\"\"\n    DOWNLOAD_PROGRESS = 'Browser.downloadProgress'\n    \"\"\"\n    Fired when download makes progress. The last call has |done| == true.",
        "detail": "pydoll.protocol.browser.events",
        "documentation": {}
    },
    {
        "label": "BrowserMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.methods",
        "description": "pydoll.protocol.browser.methods",
        "peekOfCode": "class BrowserMethod(str, Enum):\n    ADD_PRIVACY_SANDBOX_COORDINATOR_KEY_CONFIG = 'Browser.addPrivacySandboxCoordinatorKeyConfig'\n    ADD_PRIVACY_SANDBOX_ENROLLMENT_OVERRIDE = 'Browser.addPrivacySandboxEnrollmentOverride'\n    CLOSE = 'Browser.close'\n    GET_VERSION = 'Browser.getVersion'\n    RESET_PERMISSIONS = 'Browser.resetPermissions'\n    CANCEL_DOWNLOAD = 'Browser.cancelDownload'\n    CRASH = 'Browser.crash'\n    CRASH_GPU_PROCESS = 'Browser.crashGpuProcess'\n    EXECUTE_BROWSER_COMMAND = 'Browser.executeBrowserCommand'",
        "detail": "pydoll.protocol.browser.methods",
        "documentation": {}
    },
    {
        "label": "GetWindowForTargetParams",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "peekOfCode": "class GetWindowForTargetParams(CommandParams):\n    \"\"\"Parameters for getting window by target ID.\"\"\"\n    targetId: str\nclass SetDownloadBehaviorParams(CommandParams):\n    \"\"\"Parameters for setting download behavior.\"\"\"\n    behavior: DownloadBehavior\n    downloadPath: NotRequired[str]\n    browserContextId: NotRequired[str]\n    eventsEnabled: NotRequired[bool]\nclass SetWindowBoundsParams(CommandParams):",
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "SetDownloadBehaviorParams",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "peekOfCode": "class SetDownloadBehaviorParams(CommandParams):\n    \"\"\"Parameters for setting download behavior.\"\"\"\n    behavior: DownloadBehavior\n    downloadPath: NotRequired[str]\n    browserContextId: NotRequired[str]\n    eventsEnabled: NotRequired[bool]\nclass SetWindowBoundsParams(CommandParams):\n    \"\"\"Parameters for setting window bounds.\"\"\"\n    windowId: int\n    bounds: WindowBoundsDict",
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "SetWindowBoundsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "peekOfCode": "class SetWindowBoundsParams(CommandParams):\n    \"\"\"Parameters for setting window bounds.\"\"\"\n    windowId: int\n    bounds: WindowBoundsDict\nclass ResetPermissionsParams(CommandParams):\n    \"\"\"Parameters for resetting permissions.\"\"\"\n    browserContextId: NotRequired[str]\nclass CancelDownloadParams(CommandParams):\n    \"\"\"Parameters for cancelling downloads.\"\"\"\n    guid: str",
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "ResetPermissionsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "peekOfCode": "class ResetPermissionsParams(CommandParams):\n    \"\"\"Parameters for resetting permissions.\"\"\"\n    browserContextId: NotRequired[str]\nclass CancelDownloadParams(CommandParams):\n    \"\"\"Parameters for cancelling downloads.\"\"\"\n    guid: str\n    browserContextId: NotRequired[str]\nclass GrantPermissionsParams(CommandParams):\n    \"\"\"Parameters for granting permissions.\"\"\"\n    permissions: list[PermissionType]",
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "CancelDownloadParams",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "peekOfCode": "class CancelDownloadParams(CommandParams):\n    \"\"\"Parameters for cancelling downloads.\"\"\"\n    guid: str\n    browserContextId: NotRequired[str]\nclass GrantPermissionsParams(CommandParams):\n    \"\"\"Parameters for granting permissions.\"\"\"\n    permissions: list[PermissionType]\n    origin: NotRequired[str]\n    browserContextId: NotRequired[str]",
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "GrantPermissionsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.params",
        "description": "pydoll.protocol.browser.params",
        "peekOfCode": "class GrantPermissionsParams(CommandParams):\n    \"\"\"Parameters for granting permissions.\"\"\"\n    permissions: list[PermissionType]\n    origin: NotRequired[str]\n    browserContextId: NotRequired[str]",
        "detail": "pydoll.protocol.browser.params",
        "documentation": {}
    },
    {
        "label": "GetWindowForTargetResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "peekOfCode": "class GetWindowForTargetResultDict(TypedDict):\n    \"\"\"Result structure for GetWindowForTarget command.\"\"\"\n    windowId: int\n    bounds: WindowBoundsDict\nclass GetVersionResultDict(TypedDict):\n    \"\"\"Result structure for GetVersion command.\"\"\"\n    protocolVersion: str\n    product: str\n    revision: str\n    userAgent: str",
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "GetVersionResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "peekOfCode": "class GetVersionResultDict(TypedDict):\n    \"\"\"Result structure for GetVersion command.\"\"\"\n    protocolVersion: str\n    product: str\n    revision: str\n    userAgent: str\n    jsVersion: str\nclass GetWindowForTargetResponse(TypedDict):\n    \"\"\"Response structure for GetWindowForTarget command.\"\"\"\n    result: GetWindowForTargetResultDict",
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "GetWindowForTargetResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "peekOfCode": "class GetWindowForTargetResponse(TypedDict):\n    \"\"\"Response structure for GetWindowForTarget command.\"\"\"\n    result: GetWindowForTargetResultDict\nclass GetVersionResponse(TypedDict):\n    \"\"\"Response structure for GetVersion command.\"\"\"\n    result: GetVersionResultDict",
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "GetVersionResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.responses",
        "description": "pydoll.protocol.browser.responses",
        "peekOfCode": "class GetVersionResponse(TypedDict):\n    \"\"\"Response structure for GetVersion command.\"\"\"\n    result: GetVersionResultDict",
        "detail": "pydoll.protocol.browser.responses",
        "documentation": {}
    },
    {
        "label": "WindowBoundsDict",
        "kind": 6,
        "importPath": "pydoll.protocol.browser.types",
        "description": "pydoll.protocol.browser.types",
        "peekOfCode": "class WindowBoundsDict(TypedDict):\n    \"\"\"Structure for window bounds parameters.\"\"\"\n    windowState: WindowState\n    width: NotRequired[int]\n    height: NotRequired[int]\n    x: NotRequired[int]\n    y: NotRequired[int]",
        "detail": "pydoll.protocol.browser.types",
        "documentation": {}
    },
    {
        "label": "DomEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.events",
        "description": "pydoll.protocol.dom.events",
        "peekOfCode": "class DomEvent(str, Enum):\n    \"\"\"\n    Events from the DOM domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of DOM-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about changes to the DOM structure, attributes, and other DOM-related activities.\n    \"\"\"\n    ATTRIBUTE_MODIFIED = 'DOM.attributeModified'\n    \"\"\"\n    Fired when Element's attribute is modified.",
        "detail": "pydoll.protocol.dom.events",
        "documentation": {}
    },
    {
        "label": "DomMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.methods",
        "description": "pydoll.protocol.dom.methods",
        "peekOfCode": "class DomMethod(str, Enum):\n    DESCRIBE_NODE = 'DOM.describeNode'\n    DISABLE = 'DOM.disable'\n    ENABLE = 'DOM.enable'\n    FOCUS = 'DOM.focus'\n    GET_ATTRIBUTES = 'DOM.getAttributes'\n    GET_BOX_MODEL = 'DOM.getBoxModel'\n    GET_DOCUMENT = 'DOM.getDocument'\n    GET_NODE_FOR_LOCATION = 'DOM.getNodeForLocation'\n    GET_OUTER_HTML = 'DOM.getOuterHTML'",
        "detail": "pydoll.protocol.dom.methods",
        "documentation": {}
    },
    {
        "label": "DescribeNodeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class DescribeNodeParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\n    depth: NotRequired[int]\n    pierce: NotRequired[bool]\nclass DomEnableParams(CommandParams):\n    includeWhitespace: NotRequired[IncludeWhitespace]\nclass DomFocusParams(CommandParams):\n    nodeId: NotRequired[int]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "DomEnableParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class DomEnableParams(CommandParams):\n    includeWhitespace: NotRequired[IncludeWhitespace]\nclass DomFocusParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass GetAttributesParams(CommandParams):\n    nodeId: int\nclass GetBoxModelParams(CommandParams):\n    nodeId: NotRequired[int]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "DomFocusParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class DomFocusParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass GetAttributesParams(CommandParams):\n    nodeId: int\nclass GetBoxModelParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetAttributesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetAttributesParams(CommandParams):\n    nodeId: int\nclass GetBoxModelParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass GetDocumentParams(CommandParams):\n    depth: NotRequired[int]\n    pierce: NotRequired[bool]\nclass GetNodeForLocationParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetBoxModelParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetBoxModelParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass GetDocumentParams(CommandParams):\n    depth: NotRequired[int]\n    pierce: NotRequired[bool]\nclass GetNodeForLocationParams(CommandParams):\n    x: int\n    y: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetDocumentParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetDocumentParams(CommandParams):\n    depth: NotRequired[int]\n    pierce: NotRequired[bool]\nclass GetNodeForLocationParams(CommandParams):\n    x: int\n    y: int\n    includeUserAgentShadowDOM: NotRequired[bool]\n    ignorePointerEventsNone: NotRequired[bool]\nclass GetOuterHTMLParams(CommandParams):\n    nodeId: NotRequired[int]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetNodeForLocationParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetNodeForLocationParams(CommandParams):\n    x: int\n    y: int\n    includeUserAgentShadowDOM: NotRequired[bool]\n    ignorePointerEventsNone: NotRequired[bool]\nclass GetOuterHTMLParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass MoveToParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetOuterHTMLParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetOuterHTMLParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass MoveToParams(CommandParams):\n    nodeId: int\n    targetNodeId: int\n    insertBeforeNodeId: NotRequired[int]\nclass QuerySelectorParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "MoveToParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class MoveToParams(CommandParams):\n    nodeId: int\n    targetNodeId: int\n    insertBeforeNodeId: NotRequired[int]\nclass QuerySelectorParams(CommandParams):\n    nodeId: int\n    selector: str\nclass QuerySelectorAllParams(CommandParams):\n    nodeId: int\n    selector: str",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "QuerySelectorParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class QuerySelectorParams(CommandParams):\n    nodeId: int\n    selector: str\nclass QuerySelectorAllParams(CommandParams):\n    nodeId: int\n    selector: str\nclass RemoveAttributeParams(CommandParams):\n    nodeId: int\n    name: str\nclass RemoveNodeParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "QuerySelectorAllParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class QuerySelectorAllParams(CommandParams):\n    nodeId: int\n    selector: str\nclass RemoveAttributeParams(CommandParams):\n    nodeId: int\n    name: str\nclass RemoveNodeParams(CommandParams):\n    nodeId: int\nclass RequestChildNodesParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "RemoveAttributeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class RemoveAttributeParams(CommandParams):\n    nodeId: int\n    name: str\nclass RemoveNodeParams(CommandParams):\n    nodeId: int\nclass RequestChildNodesParams(CommandParams):\n    nodeId: int\n    depth: NotRequired[int]\n    pierce: NotRequired[bool]\nclass RequestNodeParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "RemoveNodeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class RemoveNodeParams(CommandParams):\n    nodeId: int\nclass RequestChildNodesParams(CommandParams):\n    nodeId: int\n    depth: NotRequired[int]\n    pierce: NotRequired[bool]\nclass RequestNodeParams(CommandParams):\n    objectId: str\nclass ResolveNodeParams(CommandParams):\n    nodeId: NotRequired[int]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "RequestChildNodesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class RequestChildNodesParams(CommandParams):\n    nodeId: int\n    depth: NotRequired[int]\n    pierce: NotRequired[bool]\nclass RequestNodeParams(CommandParams):\n    objectId: str\nclass ResolveNodeParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectGroup: NotRequired[str]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "RequestNodeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class RequestNodeParams(CommandParams):\n    objectId: str\nclass ResolveNodeParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectGroup: NotRequired[str]\n    executionContextId: NotRequired[int]\nclass ScrollIntoViewIfNeededParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "ResolveNodeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class ResolveNodeParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectGroup: NotRequired[str]\n    executionContextId: NotRequired[int]\nclass ScrollIntoViewIfNeededParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\n    rect: NotRequired[Rect]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "ScrollIntoViewIfNeededParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class ScrollIntoViewIfNeededParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\n    rect: NotRequired[Rect]\nclass SetAttributeAsTextParams(CommandParams):\n    nodeId: int\n    text: str\n    name: NotRequired[str]\nclass SetAttributeValueParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetAttributeAsTextParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class SetAttributeAsTextParams(CommandParams):\n    nodeId: int\n    text: str\n    name: NotRequired[str]\nclass SetAttributeValueParams(CommandParams):\n    nodeId: int\n    name: str\n    value: str\nclass SetFileInputFilesParams(CommandParams):\n    files: list[str]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetAttributeValueParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class SetAttributeValueParams(CommandParams):\n    nodeId: int\n    name: str\n    value: str\nclass SetFileInputFilesParams(CommandParams):\n    files: list[str]\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass SetNodeNameParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetFileInputFilesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class SetFileInputFilesParams(CommandParams):\n    files: list[str]\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass SetNodeNameParams(CommandParams):\n    nodeId: int\n    name: str\nclass SetNodeValueParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetNodeNameParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class SetNodeNameParams(CommandParams):\n    nodeId: int\n    name: str\nclass SetNodeValueParams(CommandParams):\n    nodeId: int\n    value: str\nclass SetOuterHTMLParams(CommandParams):\n    nodeId: int\n    outerHTML: str\nclass CollectClassNamesFromSubtreeParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetNodeValueParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class SetNodeValueParams(CommandParams):\n    nodeId: int\n    value: str\nclass SetOuterHTMLParams(CommandParams):\n    nodeId: int\n    outerHTML: str\nclass CollectClassNamesFromSubtreeParams(CommandParams):\n    nodeId: int\nclass CopyToParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetOuterHTMLParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class SetOuterHTMLParams(CommandParams):\n    nodeId: int\n    outerHTML: str\nclass CollectClassNamesFromSubtreeParams(CommandParams):\n    nodeId: int\nclass CopyToParams(CommandParams):\n    nodeId: int\n    targetNodeId: int\n    insertBeforeNodeId: NotRequired[int]\nclass DiscardSearchResultsParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "CollectClassNamesFromSubtreeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class CollectClassNamesFromSubtreeParams(CommandParams):\n    nodeId: int\nclass CopyToParams(CommandParams):\n    nodeId: int\n    targetNodeId: int\n    insertBeforeNodeId: NotRequired[int]\nclass DiscardSearchResultsParams(CommandParams):\n    searchId: str\nclass GetAnchorElementParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "CopyToParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class CopyToParams(CommandParams):\n    nodeId: int\n    targetNodeId: int\n    insertBeforeNodeId: NotRequired[int]\nclass DiscardSearchResultsParams(CommandParams):\n    searchId: str\nclass GetAnchorElementParams(CommandParams):\n    nodeId: int\n    anchorSpecifier: NotRequired[str]\nclass GetContainerForNodeParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "DiscardSearchResultsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class DiscardSearchResultsParams(CommandParams):\n    searchId: str\nclass GetAnchorElementParams(CommandParams):\n    nodeId: int\n    anchorSpecifier: NotRequired[str]\nclass GetContainerForNodeParams(CommandParams):\n    nodeId: int\n    containerName: NotRequired[str]\n    physicalAxes: NotRequired[PhysicalAxes]\n    logicalAxes: NotRequired[LogicalAxes]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetAnchorElementParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetAnchorElementParams(CommandParams):\n    nodeId: int\n    anchorSpecifier: NotRequired[str]\nclass GetContainerForNodeParams(CommandParams):\n    nodeId: int\n    containerName: NotRequired[str]\n    physicalAxes: NotRequired[PhysicalAxes]\n    logicalAxes: NotRequired[LogicalAxes]\n    queriesScrollState: NotRequired[bool]\nclass GetContentQuadsParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetContainerForNodeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetContainerForNodeParams(CommandParams):\n    nodeId: int\n    containerName: NotRequired[str]\n    physicalAxes: NotRequired[PhysicalAxes]\n    logicalAxes: NotRequired[LogicalAxes]\n    queriesScrollState: NotRequired[bool]\nclass GetContentQuadsParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetContentQuadsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetContentQuadsParams(CommandParams):\n    nodeId: NotRequired[int]\n    backendNodeId: NotRequired[int]\n    objectId: NotRequired[str]\nclass GetElementByRelationParams(CommandParams):\n    nodeId: int\n    relation: ElementRelation\nclass GetFileInfoParams(CommandParams):\n    objectId: str\nclass GetFrameOwnerParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetElementByRelationParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetElementByRelationParams(CommandParams):\n    nodeId: int\n    relation: ElementRelation\nclass GetFileInfoParams(CommandParams):\n    objectId: str\nclass GetFrameOwnerParams(CommandParams):\n    frameId: str\nclass GetNodesForSubtreeByStyleParams(CommandParams):\n    nodeId: int\n    computedStyles: list[CSSComputedStyleProperty]",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetFileInfoParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetFileInfoParams(CommandParams):\n    objectId: str\nclass GetFrameOwnerParams(CommandParams):\n    frameId: str\nclass GetNodesForSubtreeByStyleParams(CommandParams):\n    nodeId: int\n    computedStyles: list[CSSComputedStyleProperty]\n    pierce: NotRequired[bool]\nclass GetNodeStackTracesParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetFrameOwnerParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetFrameOwnerParams(CommandParams):\n    frameId: str\nclass GetNodesForSubtreeByStyleParams(CommandParams):\n    nodeId: int\n    computedStyles: list[CSSComputedStyleProperty]\n    pierce: NotRequired[bool]\nclass GetNodeStackTracesParams(CommandParams):\n    nodeId: int\nclass GetQueryingDescendantForContainerParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetNodesForSubtreeByStyleParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetNodesForSubtreeByStyleParams(CommandParams):\n    nodeId: int\n    computedStyles: list[CSSComputedStyleProperty]\n    pierce: NotRequired[bool]\nclass GetNodeStackTracesParams(CommandParams):\n    nodeId: int\nclass GetQueryingDescendantForContainerParams(CommandParams):\n    nodeId: int\nclass GetRelayoutBoundaryParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetNodeStackTracesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetNodeStackTracesParams(CommandParams):\n    nodeId: int\nclass GetQueryingDescendantForContainerParams(CommandParams):\n    nodeId: int\nclass GetRelayoutBoundaryParams(CommandParams):\n    nodeId: int\nclass GetSearchResultsParams(CommandParams):\n    searchId: str\n    fromIndex: int\n    toIndex: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetQueryingDescendantForContainerParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetQueryingDescendantForContainerParams(CommandParams):\n    nodeId: int\nclass GetRelayoutBoundaryParams(CommandParams):\n    nodeId: int\nclass GetSearchResultsParams(CommandParams):\n    searchId: str\n    fromIndex: int\n    toIndex: int\nclass PerformSearchParams(CommandParams):\n    query: str",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetRelayoutBoundaryParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetRelayoutBoundaryParams(CommandParams):\n    nodeId: int\nclass GetSearchResultsParams(CommandParams):\n    searchId: str\n    fromIndex: int\n    toIndex: int\nclass PerformSearchParams(CommandParams):\n    query: str\n    includeUserAgentShadowDOM: NotRequired[bool]\nclass PushNodeByPathToFrontendParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "GetSearchResultsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class GetSearchResultsParams(CommandParams):\n    searchId: str\n    fromIndex: int\n    toIndex: int\nclass PerformSearchParams(CommandParams):\n    query: str\n    includeUserAgentShadowDOM: NotRequired[bool]\nclass PushNodeByPathToFrontendParams(CommandParams):\n    path: str\nclass PushNodesByBackendIdsToFrontendParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "PerformSearchParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class PerformSearchParams(CommandParams):\n    query: str\n    includeUserAgentShadowDOM: NotRequired[bool]\nclass PushNodeByPathToFrontendParams(CommandParams):\n    path: str\nclass PushNodesByBackendIdsToFrontendParams(CommandParams):\n    backendNodeIds: list[int]\nclass SetNodeStackTracesEnabledParams(CommandParams):\n    enable: bool\nclass SetInspectedNodeParams(CommandParams):",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "PushNodeByPathToFrontendParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class PushNodeByPathToFrontendParams(CommandParams):\n    path: str\nclass PushNodesByBackendIdsToFrontendParams(CommandParams):\n    backendNodeIds: list[int]\nclass SetNodeStackTracesEnabledParams(CommandParams):\n    enable: bool\nclass SetInspectedNodeParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "PushNodesByBackendIdsToFrontendParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class PushNodesByBackendIdsToFrontendParams(CommandParams):\n    backendNodeIds: list[int]\nclass SetNodeStackTracesEnabledParams(CommandParams):\n    enable: bool\nclass SetInspectedNodeParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetNodeStackTracesEnabledParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class SetNodeStackTracesEnabledParams(CommandParams):\n    enable: bool\nclass SetInspectedNodeParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "SetInspectedNodeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.params",
        "description": "pydoll.protocol.dom.params",
        "peekOfCode": "class SetInspectedNodeParams(CommandParams):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.params",
        "documentation": {}
    },
    {
        "label": "DescribeNodeResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class DescribeNodeResultDict(TypedDict):\n    node: Node\nclass GetAttributesResultDict(TypedDict):\n    attributes: list[str]\nclass GetBoxModelResultDict(TypedDict):\n    model: BoxModel\nclass GetDocumentResultDict(TypedDict):\n    root: Node\nclass GetNodeForLocationResultDict(TypedDict):\n    backendNodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetAttributesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetAttributesResultDict(TypedDict):\n    attributes: list[str]\nclass GetBoxModelResultDict(TypedDict):\n    model: BoxModel\nclass GetDocumentResultDict(TypedDict):\n    root: Node\nclass GetNodeForLocationResultDict(TypedDict):\n    backendNodeId: int\n    frameId: str\n    nodeId: NotRequired[int]",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetBoxModelResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetBoxModelResultDict(TypedDict):\n    model: BoxModel\nclass GetDocumentResultDict(TypedDict):\n    root: Node\nclass GetNodeForLocationResultDict(TypedDict):\n    backendNodeId: int\n    frameId: str\n    nodeId: NotRequired[int]\nclass GetOuterHTMLResultDict(TypedDict):\n    outerHTML: str",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetDocumentResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetDocumentResultDict(TypedDict):\n    root: Node\nclass GetNodeForLocationResultDict(TypedDict):\n    backendNodeId: int\n    frameId: str\n    nodeId: NotRequired[int]\nclass GetOuterHTMLResultDict(TypedDict):\n    outerHTML: str\nclass MoveToResultDict(TypedDict):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodeForLocationResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetNodeForLocationResultDict(TypedDict):\n    backendNodeId: int\n    frameId: str\n    nodeId: NotRequired[int]\nclass GetOuterHTMLResultDict(TypedDict):\n    outerHTML: str\nclass MoveToResultDict(TypedDict):\n    nodeId: int\nclass QuerySelectorResultDict(TypedDict):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetOuterHTMLResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetOuterHTMLResultDict(TypedDict):\n    outerHTML: str\nclass MoveToResultDict(TypedDict):\n    nodeId: int\nclass QuerySelectorResultDict(TypedDict):\n    nodeId: int\nclass QuerySelectorAllResultDict(TypedDict):\n    nodeIds: list[int]\nclass RequestNodeResultDict(TypedDict):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "MoveToResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class MoveToResultDict(TypedDict):\n    nodeId: int\nclass QuerySelectorResultDict(TypedDict):\n    nodeId: int\nclass QuerySelectorAllResultDict(TypedDict):\n    nodeIds: list[int]\nclass RequestNodeResultDict(TypedDict):\n    nodeId: int\nclass ResolveNodeResultDict(TypedDict):\n    object: RemoteObject",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "QuerySelectorResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class QuerySelectorResultDict(TypedDict):\n    nodeId: int\nclass QuerySelectorAllResultDict(TypedDict):\n    nodeIds: list[int]\nclass RequestNodeResultDict(TypedDict):\n    nodeId: int\nclass ResolveNodeResultDict(TypedDict):\n    object: RemoteObject\nclass SetNodeNameResultDict(TypedDict):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "QuerySelectorAllResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class QuerySelectorAllResultDict(TypedDict):\n    nodeIds: list[int]\nclass RequestNodeResultDict(TypedDict):\n    nodeId: int\nclass ResolveNodeResultDict(TypedDict):\n    object: RemoteObject\nclass SetNodeNameResultDict(TypedDict):\n    nodeId: int\nclass CollectClassNamesFromSubtreeResultDict(TypedDict):\n    classNames: list[str]",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "RequestNodeResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class RequestNodeResultDict(TypedDict):\n    nodeId: int\nclass ResolveNodeResultDict(TypedDict):\n    object: RemoteObject\nclass SetNodeNameResultDict(TypedDict):\n    nodeId: int\nclass CollectClassNamesFromSubtreeResultDict(TypedDict):\n    classNames: list[str]\nclass CopyToResultDict(TypedDict):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "ResolveNodeResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class ResolveNodeResultDict(TypedDict):\n    object: RemoteObject\nclass SetNodeNameResultDict(TypedDict):\n    nodeId: int\nclass CollectClassNamesFromSubtreeResultDict(TypedDict):\n    classNames: list[str]\nclass CopyToResultDict(TypedDict):\n    nodeId: int\nclass GetAnchorElementResultDict(TypedDict):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "SetNodeNameResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class SetNodeNameResultDict(TypedDict):\n    nodeId: int\nclass CollectClassNamesFromSubtreeResultDict(TypedDict):\n    classNames: list[str]\nclass CopyToResultDict(TypedDict):\n    nodeId: int\nclass GetAnchorElementResultDict(TypedDict):\n    nodeId: int\nclass GetContainerForNodeResultDict(TypedDict):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "CollectClassNamesFromSubtreeResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class CollectClassNamesFromSubtreeResultDict(TypedDict):\n    classNames: list[str]\nclass CopyToResultDict(TypedDict):\n    nodeId: int\nclass GetAnchorElementResultDict(TypedDict):\n    nodeId: int\nclass GetContainerForNodeResultDict(TypedDict):\n    nodeId: int\nclass GetContentQuadsResultDict(TypedDict):\n    quads: list[Quad]",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "CopyToResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class CopyToResultDict(TypedDict):\n    nodeId: int\nclass GetAnchorElementResultDict(TypedDict):\n    nodeId: int\nclass GetContainerForNodeResultDict(TypedDict):\n    nodeId: int\nclass GetContentQuadsResultDict(TypedDict):\n    quads: list[Quad]\nclass GetDetachedDomNodesResultDict(TypedDict):\n    detachedNodes: list[DetachedElementInfo]",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetAnchorElementResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetAnchorElementResultDict(TypedDict):\n    nodeId: int\nclass GetContainerForNodeResultDict(TypedDict):\n    nodeId: int\nclass GetContentQuadsResultDict(TypedDict):\n    quads: list[Quad]\nclass GetDetachedDomNodesResultDict(TypedDict):\n    detachedNodes: list[DetachedElementInfo]\nclass GetElementByRelationResultDict(TypedDict):\n    nodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetContainerForNodeResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetContainerForNodeResultDict(TypedDict):\n    nodeId: int\nclass GetContentQuadsResultDict(TypedDict):\n    quads: list[Quad]\nclass GetDetachedDomNodesResultDict(TypedDict):\n    detachedNodes: list[DetachedElementInfo]\nclass GetElementByRelationResultDict(TypedDict):\n    nodeId: int\nclass GetFileInfoResultDict(TypedDict):\n    path: str",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetContentQuadsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetContentQuadsResultDict(TypedDict):\n    quads: list[Quad]\nclass GetDetachedDomNodesResultDict(TypedDict):\n    detachedNodes: list[DetachedElementInfo]\nclass GetElementByRelationResultDict(TypedDict):\n    nodeId: int\nclass GetFileInfoResultDict(TypedDict):\n    path: str\nclass GetFrameOwnerResultDict(TypedDict):\n    backendNodeId: int",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetDetachedDomNodesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetDetachedDomNodesResultDict(TypedDict):\n    detachedNodes: list[DetachedElementInfo]\nclass GetElementByRelationResultDict(TypedDict):\n    nodeId: int\nclass GetFileInfoResultDict(TypedDict):\n    path: str\nclass GetFrameOwnerResultDict(TypedDict):\n    backendNodeId: int\n    nodeId: NotRequired[int]\nclass GetNodesForSubtreeByStyleResultDict(TypedDict):",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetElementByRelationResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetElementByRelationResultDict(TypedDict):\n    nodeId: int\nclass GetFileInfoResultDict(TypedDict):\n    path: str\nclass GetFrameOwnerResultDict(TypedDict):\n    backendNodeId: int\n    nodeId: NotRequired[int]\nclass GetNodesForSubtreeByStyleResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetNodeStackTracesResultDict(TypedDict):",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetFileInfoResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetFileInfoResultDict(TypedDict):\n    path: str\nclass GetFrameOwnerResultDict(TypedDict):\n    backendNodeId: int\n    nodeId: NotRequired[int]\nclass GetNodesForSubtreeByStyleResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetNodeStackTracesResultDict(TypedDict):\n    creation: StackTrace\nclass GetQueryingDescendantForContainerResultDict(TypedDict):",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetFrameOwnerResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetFrameOwnerResultDict(TypedDict):\n    backendNodeId: int\n    nodeId: NotRequired[int]\nclass GetNodesForSubtreeByStyleResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetNodeStackTracesResultDict(TypedDict):\n    creation: StackTrace\nclass GetQueryingDescendantForContainerResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetRelayoutBoundaryResultDict(TypedDict):",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodesForSubtreeByStyleResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetNodesForSubtreeByStyleResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetNodeStackTracesResultDict(TypedDict):\n    creation: StackTrace\nclass GetQueryingDescendantForContainerResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetRelayoutBoundaryResultDict(TypedDict):\n    nodeId: int\nclass GetSearchResultsResultDict(TypedDict):\n    nodeIds: list[int]",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodeStackTracesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetNodeStackTracesResultDict(TypedDict):\n    creation: StackTrace\nclass GetQueryingDescendantForContainerResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetRelayoutBoundaryResultDict(TypedDict):\n    nodeId: int\nclass GetSearchResultsResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetTopLayerElementsResultDict(TypedDict):\n    nodeIds: list[int]",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetQueryingDescendantForContainerResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetQueryingDescendantForContainerResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetRelayoutBoundaryResultDict(TypedDict):\n    nodeId: int\nclass GetSearchResultsResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetTopLayerElementsResultDict(TypedDict):\n    nodeIds: list[int]\nclass PerformSearchResultDict(TypedDict):\n    searchId: str",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetRelayoutBoundaryResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetRelayoutBoundaryResultDict(TypedDict):\n    nodeId: int\nclass GetSearchResultsResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetTopLayerElementsResultDict(TypedDict):\n    nodeIds: list[int]\nclass PerformSearchResultDict(TypedDict):\n    searchId: str\n    resultCount: int\nclass PushNodeByPathToFrontendResultDict(TypedDict):",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetSearchResultsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetSearchResultsResultDict(TypedDict):\n    nodeIds: list[int]\nclass GetTopLayerElementsResultDict(TypedDict):\n    nodeIds: list[int]\nclass PerformSearchResultDict(TypedDict):\n    searchId: str\n    resultCount: int\nclass PushNodeByPathToFrontendResultDict(TypedDict):\n    nodeId: int\nclass PushNodesByBackendIdsToFrontendResultDict(TypedDict):",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetTopLayerElementsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetTopLayerElementsResultDict(TypedDict):\n    nodeIds: list[int]\nclass PerformSearchResultDict(TypedDict):\n    searchId: str\n    resultCount: int\nclass PushNodeByPathToFrontendResultDict(TypedDict):\n    nodeId: int\nclass PushNodesByBackendIdsToFrontendResultDict(TypedDict):\n    nodeIds: list[int]\nclass DescribeNodeResponse(TypedDict):",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PerformSearchResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class PerformSearchResultDict(TypedDict):\n    searchId: str\n    resultCount: int\nclass PushNodeByPathToFrontendResultDict(TypedDict):\n    nodeId: int\nclass PushNodesByBackendIdsToFrontendResultDict(TypedDict):\n    nodeIds: list[int]\nclass DescribeNodeResponse(TypedDict):\n    result: DescribeNodeResultDict\nclass GetAttributesResponse(TypedDict):",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PushNodeByPathToFrontendResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class PushNodeByPathToFrontendResultDict(TypedDict):\n    nodeId: int\nclass PushNodesByBackendIdsToFrontendResultDict(TypedDict):\n    nodeIds: list[int]\nclass DescribeNodeResponse(TypedDict):\n    result: DescribeNodeResultDict\nclass GetAttributesResponse(TypedDict):\n    result: GetAttributesResultDict\nclass GetBoxModelResponse(TypedDict):\n    result: GetBoxModelResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PushNodesByBackendIdsToFrontendResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class PushNodesByBackendIdsToFrontendResultDict(TypedDict):\n    nodeIds: list[int]\nclass DescribeNodeResponse(TypedDict):\n    result: DescribeNodeResultDict\nclass GetAttributesResponse(TypedDict):\n    result: GetAttributesResultDict\nclass GetBoxModelResponse(TypedDict):\n    result: GetBoxModelResultDict\nclass GetDocumentResponse(TypedDict):\n    result: GetDocumentResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "DescribeNodeResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class DescribeNodeResponse(TypedDict):\n    result: DescribeNodeResultDict\nclass GetAttributesResponse(TypedDict):\n    result: GetAttributesResultDict\nclass GetBoxModelResponse(TypedDict):\n    result: GetBoxModelResultDict\nclass GetDocumentResponse(TypedDict):\n    result: GetDocumentResultDict\nclass GetNodeForLocationResponse(TypedDict):\n    result: GetNodeForLocationResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetAttributesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetAttributesResponse(TypedDict):\n    result: GetAttributesResultDict\nclass GetBoxModelResponse(TypedDict):\n    result: GetBoxModelResultDict\nclass GetDocumentResponse(TypedDict):\n    result: GetDocumentResultDict\nclass GetNodeForLocationResponse(TypedDict):\n    result: GetNodeForLocationResultDict\nclass GetOuterHTMLResponse(TypedDict):\n    result: GetOuterHTMLResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetBoxModelResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetBoxModelResponse(TypedDict):\n    result: GetBoxModelResultDict\nclass GetDocumentResponse(TypedDict):\n    result: GetDocumentResultDict\nclass GetNodeForLocationResponse(TypedDict):\n    result: GetNodeForLocationResultDict\nclass GetOuterHTMLResponse(TypedDict):\n    result: GetOuterHTMLResultDict\nclass MoveToResponse(TypedDict):\n    result: MoveToResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetDocumentResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetDocumentResponse(TypedDict):\n    result: GetDocumentResultDict\nclass GetNodeForLocationResponse(TypedDict):\n    result: GetNodeForLocationResultDict\nclass GetOuterHTMLResponse(TypedDict):\n    result: GetOuterHTMLResultDict\nclass MoveToResponse(TypedDict):\n    result: MoveToResultDict\nclass QuerySelectorResponse(TypedDict):\n    result: QuerySelectorResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodeForLocationResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetNodeForLocationResponse(TypedDict):\n    result: GetNodeForLocationResultDict\nclass GetOuterHTMLResponse(TypedDict):\n    result: GetOuterHTMLResultDict\nclass MoveToResponse(TypedDict):\n    result: MoveToResultDict\nclass QuerySelectorResponse(TypedDict):\n    result: QuerySelectorResultDict\nclass QuerySelectorAllResponse(TypedDict):\n    result: QuerySelectorAllResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetOuterHTMLResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetOuterHTMLResponse(TypedDict):\n    result: GetOuterHTMLResultDict\nclass MoveToResponse(TypedDict):\n    result: MoveToResultDict\nclass QuerySelectorResponse(TypedDict):\n    result: QuerySelectorResultDict\nclass QuerySelectorAllResponse(TypedDict):\n    result: QuerySelectorAllResultDict\nclass RequestNodeResponse(TypedDict):\n    result: RequestNodeResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "MoveToResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class MoveToResponse(TypedDict):\n    result: MoveToResultDict\nclass QuerySelectorResponse(TypedDict):\n    result: QuerySelectorResultDict\nclass QuerySelectorAllResponse(TypedDict):\n    result: QuerySelectorAllResultDict\nclass RequestNodeResponse(TypedDict):\n    result: RequestNodeResultDict\nclass ResolveNodeResponse(TypedDict):\n    result: ResolveNodeResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "QuerySelectorResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class QuerySelectorResponse(TypedDict):\n    result: QuerySelectorResultDict\nclass QuerySelectorAllResponse(TypedDict):\n    result: QuerySelectorAllResultDict\nclass RequestNodeResponse(TypedDict):\n    result: RequestNodeResultDict\nclass ResolveNodeResponse(TypedDict):\n    result: ResolveNodeResultDict\nclass SetNodeNameResponse(TypedDict):\n    result: SetNodeNameResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "QuerySelectorAllResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class QuerySelectorAllResponse(TypedDict):\n    result: QuerySelectorAllResultDict\nclass RequestNodeResponse(TypedDict):\n    result: RequestNodeResultDict\nclass ResolveNodeResponse(TypedDict):\n    result: ResolveNodeResultDict\nclass SetNodeNameResponse(TypedDict):\n    result: SetNodeNameResultDict\nclass CollectClassNamesFromSubtreeResponse(TypedDict):\n    result: CollectClassNamesFromSubtreeResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "RequestNodeResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class RequestNodeResponse(TypedDict):\n    result: RequestNodeResultDict\nclass ResolveNodeResponse(TypedDict):\n    result: ResolveNodeResultDict\nclass SetNodeNameResponse(TypedDict):\n    result: SetNodeNameResultDict\nclass CollectClassNamesFromSubtreeResponse(TypedDict):\n    result: CollectClassNamesFromSubtreeResultDict\nclass CopyToResponse(TypedDict):\n    result: CopyToResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "ResolveNodeResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class ResolveNodeResponse(TypedDict):\n    result: ResolveNodeResultDict\nclass SetNodeNameResponse(TypedDict):\n    result: SetNodeNameResultDict\nclass CollectClassNamesFromSubtreeResponse(TypedDict):\n    result: CollectClassNamesFromSubtreeResultDict\nclass CopyToResponse(TypedDict):\n    result: CopyToResultDict\nclass GetAnchorElementResponse(TypedDict):\n    result: GetAnchorElementResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "SetNodeNameResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class SetNodeNameResponse(TypedDict):\n    result: SetNodeNameResultDict\nclass CollectClassNamesFromSubtreeResponse(TypedDict):\n    result: CollectClassNamesFromSubtreeResultDict\nclass CopyToResponse(TypedDict):\n    result: CopyToResultDict\nclass GetAnchorElementResponse(TypedDict):\n    result: GetAnchorElementResultDict\nclass GetContainerForNodeResponse(TypedDict):\n    result: GetContainerForNodeResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "CollectClassNamesFromSubtreeResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class CollectClassNamesFromSubtreeResponse(TypedDict):\n    result: CollectClassNamesFromSubtreeResultDict\nclass CopyToResponse(TypedDict):\n    result: CopyToResultDict\nclass GetAnchorElementResponse(TypedDict):\n    result: GetAnchorElementResultDict\nclass GetContainerForNodeResponse(TypedDict):\n    result: GetContainerForNodeResultDict\nclass GetContentQuadsResponse(TypedDict):\n    result: GetContentQuadsResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "CopyToResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class CopyToResponse(TypedDict):\n    result: CopyToResultDict\nclass GetAnchorElementResponse(TypedDict):\n    result: GetAnchorElementResultDict\nclass GetContainerForNodeResponse(TypedDict):\n    result: GetContainerForNodeResultDict\nclass GetContentQuadsResponse(TypedDict):\n    result: GetContentQuadsResultDict\nclass GetDetachedDomNodesResponse(TypedDict):\n    result: GetDetachedDomNodesResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetAnchorElementResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetAnchorElementResponse(TypedDict):\n    result: GetAnchorElementResultDict\nclass GetContainerForNodeResponse(TypedDict):\n    result: GetContainerForNodeResultDict\nclass GetContentQuadsResponse(TypedDict):\n    result: GetContentQuadsResultDict\nclass GetDetachedDomNodesResponse(TypedDict):\n    result: GetDetachedDomNodesResultDict\nclass GetElementByRelationResponse(TypedDict):\n    result: GetElementByRelationResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetContainerForNodeResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetContainerForNodeResponse(TypedDict):\n    result: GetContainerForNodeResultDict\nclass GetContentQuadsResponse(TypedDict):\n    result: GetContentQuadsResultDict\nclass GetDetachedDomNodesResponse(TypedDict):\n    result: GetDetachedDomNodesResultDict\nclass GetElementByRelationResponse(TypedDict):\n    result: GetElementByRelationResultDict\nclass GetFileInfoResponse(TypedDict):\n    result: GetFileInfoResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetContentQuadsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetContentQuadsResponse(TypedDict):\n    result: GetContentQuadsResultDict\nclass GetDetachedDomNodesResponse(TypedDict):\n    result: GetDetachedDomNodesResultDict\nclass GetElementByRelationResponse(TypedDict):\n    result: GetElementByRelationResultDict\nclass GetFileInfoResponse(TypedDict):\n    result: GetFileInfoResultDict\nclass GetFrameOwnerResponse(TypedDict):\n    result: GetFrameOwnerResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetDetachedDomNodesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetDetachedDomNodesResponse(TypedDict):\n    result: GetDetachedDomNodesResultDict\nclass GetElementByRelationResponse(TypedDict):\n    result: GetElementByRelationResultDict\nclass GetFileInfoResponse(TypedDict):\n    result: GetFileInfoResultDict\nclass GetFrameOwnerResponse(TypedDict):\n    result: GetFrameOwnerResultDict\nclass GetNodesForSubtreeByStyleResponse(TypedDict):\n    result: GetNodesForSubtreeByStyleResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetElementByRelationResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetElementByRelationResponse(TypedDict):\n    result: GetElementByRelationResultDict\nclass GetFileInfoResponse(TypedDict):\n    result: GetFileInfoResultDict\nclass GetFrameOwnerResponse(TypedDict):\n    result: GetFrameOwnerResultDict\nclass GetNodesForSubtreeByStyleResponse(TypedDict):\n    result: GetNodesForSubtreeByStyleResultDict\nclass GetNodeStackTracesResponse(TypedDict):\n    result: GetNodeStackTracesResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetFileInfoResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetFileInfoResponse(TypedDict):\n    result: GetFileInfoResultDict\nclass GetFrameOwnerResponse(TypedDict):\n    result: GetFrameOwnerResultDict\nclass GetNodesForSubtreeByStyleResponse(TypedDict):\n    result: GetNodesForSubtreeByStyleResultDict\nclass GetNodeStackTracesResponse(TypedDict):\n    result: GetNodeStackTracesResultDict\nclass GetQueryingDescendantForContainerResponse(TypedDict):\n    result: GetQueryingDescendantForContainerResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetFrameOwnerResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetFrameOwnerResponse(TypedDict):\n    result: GetFrameOwnerResultDict\nclass GetNodesForSubtreeByStyleResponse(TypedDict):\n    result: GetNodesForSubtreeByStyleResultDict\nclass GetNodeStackTracesResponse(TypedDict):\n    result: GetNodeStackTracesResultDict\nclass GetQueryingDescendantForContainerResponse(TypedDict):\n    result: GetQueryingDescendantForContainerResultDict\nclass GetRelayoutBoundaryResponse(TypedDict):\n    result: GetRelayoutBoundaryResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodesForSubtreeByStyleResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetNodesForSubtreeByStyleResponse(TypedDict):\n    result: GetNodesForSubtreeByStyleResultDict\nclass GetNodeStackTracesResponse(TypedDict):\n    result: GetNodeStackTracesResultDict\nclass GetQueryingDescendantForContainerResponse(TypedDict):\n    result: GetQueryingDescendantForContainerResultDict\nclass GetRelayoutBoundaryResponse(TypedDict):\n    result: GetRelayoutBoundaryResultDict\nclass GetSearchResultsResponse(TypedDict):\n    result: GetSearchResultsResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetNodeStackTracesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetNodeStackTracesResponse(TypedDict):\n    result: GetNodeStackTracesResultDict\nclass GetQueryingDescendantForContainerResponse(TypedDict):\n    result: GetQueryingDescendantForContainerResultDict\nclass GetRelayoutBoundaryResponse(TypedDict):\n    result: GetRelayoutBoundaryResultDict\nclass GetSearchResultsResponse(TypedDict):\n    result: GetSearchResultsResultDict\nclass GetTopLayerElementsResponse(TypedDict):\n    result: GetTopLayerElementsResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetQueryingDescendantForContainerResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetQueryingDescendantForContainerResponse(TypedDict):\n    result: GetQueryingDescendantForContainerResultDict\nclass GetRelayoutBoundaryResponse(TypedDict):\n    result: GetRelayoutBoundaryResultDict\nclass GetSearchResultsResponse(TypedDict):\n    result: GetSearchResultsResultDict\nclass GetTopLayerElementsResponse(TypedDict):\n    result: GetTopLayerElementsResultDict\nclass PerformSearchResponse(TypedDict):\n    result: PerformSearchResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetRelayoutBoundaryResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetRelayoutBoundaryResponse(TypedDict):\n    result: GetRelayoutBoundaryResultDict\nclass GetSearchResultsResponse(TypedDict):\n    result: GetSearchResultsResultDict\nclass GetTopLayerElementsResponse(TypedDict):\n    result: GetTopLayerElementsResultDict\nclass PerformSearchResponse(TypedDict):\n    result: PerformSearchResultDict\nclass PushNodeByPathToFrontendResponse(TypedDict):\n    result: PushNodeByPathToFrontendResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetSearchResultsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetSearchResultsResponse(TypedDict):\n    result: GetSearchResultsResultDict\nclass GetTopLayerElementsResponse(TypedDict):\n    result: GetTopLayerElementsResultDict\nclass PerformSearchResponse(TypedDict):\n    result: PerformSearchResultDict\nclass PushNodeByPathToFrontendResponse(TypedDict):\n    result: PushNodeByPathToFrontendResultDict\nclass PushNodesByBackendIdsToFrontendResponse(TypedDict):\n    result: PushNodesByBackendIdsToFrontendResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "GetTopLayerElementsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class GetTopLayerElementsResponse(TypedDict):\n    result: GetTopLayerElementsResultDict\nclass PerformSearchResponse(TypedDict):\n    result: PerformSearchResultDict\nclass PushNodeByPathToFrontendResponse(TypedDict):\n    result: PushNodeByPathToFrontendResultDict\nclass PushNodesByBackendIdsToFrontendResponse(TypedDict):\n    result: PushNodesByBackendIdsToFrontendResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PerformSearchResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class PerformSearchResponse(TypedDict):\n    result: PerformSearchResultDict\nclass PushNodeByPathToFrontendResponse(TypedDict):\n    result: PushNodeByPathToFrontendResultDict\nclass PushNodesByBackendIdsToFrontendResponse(TypedDict):\n    result: PushNodesByBackendIdsToFrontendResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PushNodeByPathToFrontendResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class PushNodeByPathToFrontendResponse(TypedDict):\n    result: PushNodeByPathToFrontendResultDict\nclass PushNodesByBackendIdsToFrontendResponse(TypedDict):\n    result: PushNodesByBackendIdsToFrontendResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "PushNodesByBackendIdsToFrontendResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.responses",
        "description": "pydoll.protocol.dom.responses",
        "peekOfCode": "class PushNodesByBackendIdsToFrontendResponse(TypedDict):\n    result: PushNodesByBackendIdsToFrontendResultDict",
        "detail": "pydoll.protocol.dom.responses",
        "documentation": {}
    },
    {
        "label": "Rect",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class Rect(TypedDict):\n    \"\"\"Rectangle for capturing screenshot or clip rectangle.\"\"\"\n    x: float\n    y: float\n    width: float\n    height: float\nclass CSSComputedStyleProperty(TypedDict):\n    name: str\n    value: str\nclass BackendNode(TypedDict):",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "CSSComputedStyleProperty",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class CSSComputedStyleProperty(TypedDict):\n    name: str\n    value: str\nclass BackendNode(TypedDict):\n    nodeType: int\n    nodeName: str\n    backendNodeId: int\nclass Node(TypedDict):\n    nodeId: int\n    parentId: NotRequired[int]",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "BackendNode",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class BackendNode(TypedDict):\n    nodeType: int\n    nodeName: str\n    backendNodeId: int\nclass Node(TypedDict):\n    nodeId: int\n    parentId: NotRequired[int]\n    backendNodeId: int\n    nodeType: int\n    nodeName: str",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class Node(TypedDict):\n    nodeId: int\n    parentId: NotRequired[int]\n    backendNodeId: int\n    nodeType: int\n    nodeName: str\n    localName: str\n    nodeValue: str\n    childNodeCount: NotRequired[int]\n    children: NotRequired[list['Node']]",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "DetachedElementInfo",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class DetachedElementInfo(TypedDict):\n    treeNode: Node\n    retainedNodeIds: list[int]\nclass ShapeOutsideInfo(TypedDict):\n    bounds: Quad\n    shape: list[Any]\n    marginShape: list[Any]\nclass BoxModel(TypedDict):\n    content: Quad\n    padding: Quad",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "ShapeOutsideInfo",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class ShapeOutsideInfo(TypedDict):\n    bounds: Quad\n    shape: list[Any]\n    marginShape: list[Any]\nclass BoxModel(TypedDict):\n    content: Quad\n    padding: Quad\n    border: Quad\n    margin: Quad\n    width: int",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "BoxModel",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class BoxModel(TypedDict):\n    content: Quad\n    padding: Quad\n    border: Quad\n    margin: Quad\n    width: int\n    height: int\n    shapeOutside: NotRequired[ShapeOutsideInfo]\nclass EventFileChooserOpenedParams(TypedDict):\n    frameId: str",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "EventFileChooserOpenedParams",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class EventFileChooserOpenedParams(TypedDict):\n    frameId: str\n    mode: str\n    backendNodeId: int\nclass EventFileChooserOpened(TypedDict):\n    method: str\n    params: EventFileChooserOpenedParams",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "EventFileChooserOpened",
        "kind": 6,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "class EventFileChooserOpened(TypedDict):\n    method: str\n    params: EventFileChooserOpenedParams",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "Quad",
        "kind": 5,
        "importPath": "pydoll.protocol.dom.types",
        "description": "pydoll.protocol.dom.types",
        "peekOfCode": "Quad = Annotated[list[float], 'Format: [x1, y1, x2, y2, x3, y3, x4, y4]']\nclass Rect(TypedDict):\n    \"\"\"Rectangle for capturing screenshot or clip rectangle.\"\"\"\n    x: float\n    y: float\n    width: float\n    height: float\nclass CSSComputedStyleProperty(TypedDict):\n    name: str\n    value: str",
        "detail": "pydoll.protocol.dom.types",
        "documentation": {}
    },
    {
        "label": "FetchEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.events",
        "description": "pydoll.protocol.fetch.events",
        "peekOfCode": "class FetchEvent(str, Enum):\n    \"\"\"\n    Events from the Fetch domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of Fetch-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about network requests that can be intercepted, modified, or responded to\n    by the client.\n    \"\"\"\n    AUTH_REQUIRED = 'Fetch.authRequired'\n    \"\"\"",
        "detail": "pydoll.protocol.fetch.events",
        "documentation": {}
    },
    {
        "label": "FetchMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.methods",
        "description": "pydoll.protocol.fetch.methods",
        "peekOfCode": "class FetchMethod(str, Enum):\n    CONTINUE_REQUEST = 'Fetch.continueRequest'\n    CONTINUE_WITH_AUTH = 'Fetch.continueWithAuth'\n    DISABLE = 'Fetch.disable'\n    ENABLE = 'Fetch.enable'\n    FAIL_REQUEST = 'Fetch.failRequest'\n    FULFILL_REQUEST = 'Fetch.fulfillRequest'\n    GET_RESPONSE_BODY = 'Fetch.getResponseBody'\n    TAKE_RESPONSE_BODY_AS_STREAM = 'Fetch.takeResponseBodyAsStream'\n    CONTINUE_RESPONSE = 'Fetch.continueResponse'",
        "detail": "pydoll.protocol.fetch.methods",
        "documentation": {}
    },
    {
        "label": "ContinueRequestParams",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "peekOfCode": "class ContinueRequestParams(CommandParams):\n    \"\"\"Parameters for continuing a request.\"\"\"\n    requestId: str\n    url: NotRequired[str]\n    method: NotRequired[RequestMethod]\n    postData: NotRequired[str]\n    headers: NotRequired[list[HeaderEntry]]\n    interceptResponse: NotRequired[bool]\nclass ContinueWithAuthParams(CommandParams):\n    requestId: str",
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "ContinueWithAuthParams",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "peekOfCode": "class ContinueWithAuthParams(CommandParams):\n    requestId: str\n    authChallengeResponse: AuthChallengeResponseDict\nclass FetchEnableParams(CommandParams):\n    patterns: NotRequired[list[RequestPattern]]\n    handleAuthRequests: NotRequired[bool]\nclass FailRequestParams(CommandParams):\n    requestId: str\n    errorReason: NetworkErrorReason\nclass FulfillRequestParams(CommandParams):",
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "FetchEnableParams",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "peekOfCode": "class FetchEnableParams(CommandParams):\n    patterns: NotRequired[list[RequestPattern]]\n    handleAuthRequests: NotRequired[bool]\nclass FailRequestParams(CommandParams):\n    requestId: str\n    errorReason: NetworkErrorReason\nclass FulfillRequestParams(CommandParams):\n    requestId: str\n    responseCode: int\n    responseHeaders: NotRequired[list[HeaderEntry]]",
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "FailRequestParams",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "peekOfCode": "class FailRequestParams(CommandParams):\n    requestId: str\n    errorReason: NetworkErrorReason\nclass FulfillRequestParams(CommandParams):\n    requestId: str\n    responseCode: int\n    responseHeaders: NotRequired[list[HeaderEntry]]\n    body: NotRequired[dict]\n    responsePhrase: NotRequired[str]\nclass GetResponseBodyParams(CommandParams):",
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "FulfillRequestParams",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "peekOfCode": "class FulfillRequestParams(CommandParams):\n    requestId: str\n    responseCode: int\n    responseHeaders: NotRequired[list[HeaderEntry]]\n    body: NotRequired[dict]\n    responsePhrase: NotRequired[str]\nclass GetResponseBodyParams(CommandParams):\n    requestId: str\nclass TakeResponseBodyAsStreamParams(CommandParams):\n    requestId: str",
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyParams",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "peekOfCode": "class GetResponseBodyParams(CommandParams):\n    requestId: str\nclass TakeResponseBodyAsStreamParams(CommandParams):\n    requestId: str\nclass ContinueResponseParams(CommandParams):\n    requestId: str\n    responseCode: NotRequired[int]\n    responsePhrase: NotRequired[str]\n    responseHeaders: NotRequired[list[HeaderEntry]]",
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyAsStreamParams",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "peekOfCode": "class TakeResponseBodyAsStreamParams(CommandParams):\n    requestId: str\nclass ContinueResponseParams(CommandParams):\n    requestId: str\n    responseCode: NotRequired[int]\n    responsePhrase: NotRequired[str]\n    responseHeaders: NotRequired[list[HeaderEntry]]",
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "ContinueResponseParams",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.params",
        "description": "pydoll.protocol.fetch.params",
        "peekOfCode": "class ContinueResponseParams(CommandParams):\n    requestId: str\n    responseCode: NotRequired[int]\n    responsePhrase: NotRequired[str]\n    responseHeaders: NotRequired[list[HeaderEntry]]",
        "detail": "pydoll.protocol.fetch.params",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.responses",
        "description": "pydoll.protocol.fetch.responses",
        "peekOfCode": "class GetResponseBodyResultDict(TypedDict):\n    body: str\n    base64encoded: bool\nclass TakeResponseBodyAsStreamResultDict(TypedDict):\n    stream: str\nclass GetResponseBodyResponse(TypedDict):\n    result: GetResponseBodyResultDict\nclass TakeResponseBodyAsStreamResponse(TypedDict):\n    result: TakeResponseBodyAsStreamResultDict",
        "detail": "pydoll.protocol.fetch.responses",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyAsStreamResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.responses",
        "description": "pydoll.protocol.fetch.responses",
        "peekOfCode": "class TakeResponseBodyAsStreamResultDict(TypedDict):\n    stream: str\nclass GetResponseBodyResponse(TypedDict):\n    result: GetResponseBodyResultDict\nclass TakeResponseBodyAsStreamResponse(TypedDict):\n    result: TakeResponseBodyAsStreamResultDict",
        "detail": "pydoll.protocol.fetch.responses",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.responses",
        "description": "pydoll.protocol.fetch.responses",
        "peekOfCode": "class GetResponseBodyResponse(TypedDict):\n    result: GetResponseBodyResultDict\nclass TakeResponseBodyAsStreamResponse(TypedDict):\n    result: TakeResponseBodyAsStreamResultDict",
        "detail": "pydoll.protocol.fetch.responses",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyAsStreamResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.responses",
        "description": "pydoll.protocol.fetch.responses",
        "peekOfCode": "class TakeResponseBodyAsStreamResponse(TypedDict):\n    result: TakeResponseBodyAsStreamResultDict",
        "detail": "pydoll.protocol.fetch.responses",
        "documentation": {}
    },
    {
        "label": "HeaderEntry",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "peekOfCode": "class HeaderEntry(TypedDict):\n    \"\"\"HTTP header entry structure.\"\"\"\n    name: str\n    value: str\nclass AuthChallengeResponseDict(TypedDict):\n    response: AuthChallengeResponseValues\n    username: NotRequired[str]\n    password: NotRequired[str]\nclass RequestPattern(TypedDict):\n    urlPattern: str",
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseDict",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "peekOfCode": "class AuthChallengeResponseDict(TypedDict):\n    response: AuthChallengeResponseValues\n    username: NotRequired[str]\n    password: NotRequired[str]\nclass RequestPattern(TypedDict):\n    urlPattern: str\n    resourceType: NotRequired[ResourceType]\n    requestStage: NotRequired[RequestStage]",
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "RequestPattern",
        "kind": 6,
        "importPath": "pydoll.protocol.fetch.types",
        "description": "pydoll.protocol.fetch.types",
        "peekOfCode": "class RequestPattern(TypedDict):\n    urlPattern: str\n    resourceType: NotRequired[ResourceType]\n    requestStage: NotRequired[RequestStage]",
        "detail": "pydoll.protocol.fetch.types",
        "documentation": {}
    },
    {
        "label": "InputEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.input.events",
        "description": "pydoll.protocol.input.events",
        "peekOfCode": "class InputEvent(str, Enum):\n    \"\"\"\n    Events from the Input domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of Input-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about user input interactions that can be intercepted or simulated.\n    \"\"\"\n    DRAG_INTERCEPTED = 'Input.dragIntercepted'\n    \"\"\"\n    Emitted only when Input.setInterceptDrags is enabled. Use this data with",
        "detail": "pydoll.protocol.input.events",
        "documentation": {}
    },
    {
        "label": "InputMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.input.methods",
        "description": "pydoll.protocol.input.methods",
        "peekOfCode": "class InputMethod(str, Enum):\n    CANCEL_DRAGGING = 'Input.cancelDragging'\n    DISPATCH_KEY_EVENT = 'Input.dispatchKeyEvent'\n    DISPATCH_MOUSE_EVENT = 'Input.dispatchMouseEvent'\n    DISPATCH_TOUCH_EVENT = 'Input.dispatchTouchEvent'\n    SET_IGNORE_INPUT_EVENTS = 'Input.setIgnoreInputEvents'\n    DISPATCH_DRAG_EVENT = 'Input.dispatchDragEvent'\n    EMULATE_TOUCH_FROM_MOUSE_EVENT = 'Input.emulateTouchFromMouseEvent'\n    IME_SET_COMPOSITION = 'Input.imeSetComposition'\n    INSERT_TEXT = 'Input.insertText'",
        "detail": "pydoll.protocol.input.methods",
        "documentation": {}
    },
    {
        "label": "DispatchKeyEventParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class DispatchKeyEventParams(CommandParams):\n    type: KeyEventType\n    modifiers: NotRequired[KeyModifier]\n    timestamp: NotRequired[float]\n    text: NotRequired[str]\n    unmodifiedText: NotRequired[str]\n    keyIdentifier: NotRequired[str]\n    code: NotRequired[str]\n    key: NotRequired[str]\n    windowsVirtualKeyCode: NotRequired[int]",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "DispatchMouseEventParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class DispatchMouseEventParams(CommandParams):\n    type: MouseEventType\n    x: int\n    y: int\n    modifiers: NotRequired[KeyModifier]\n    timestamp: NotRequired[float]\n    button: NotRequired[MouseButton]\n    clickCount: NotRequired[int]\n    force: NotRequired[float]\n    tangentialPressure: NotRequired[float]",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "DispatchTouchEventParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class DispatchTouchEventParams(CommandParams):\n    type: TouchEventType\n    touchPoints: NotRequired[list[TouchPoint]]\n    modifiers: NotRequired[KeyModifier]\n    timestamp: NotRequired[float]\nclass SetIgnoreInputEventsParams(CommandParams):\n    enabled: bool\nclass DispatchDragEventParams(CommandParams):\n    type: DragEventType\n    x: int",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SetIgnoreInputEventsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class SetIgnoreInputEventsParams(CommandParams):\n    enabled: bool\nclass DispatchDragEventParams(CommandParams):\n    type: DragEventType\n    x: int\n    y: int\n    data: NotRequired[DragData]\n    modifiers: NotRequired[KeyModifier]\nclass EmulateTouchFromMouseEventParams(CommandParams):\n    type: MouseEventType",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "DispatchDragEventParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class DispatchDragEventParams(CommandParams):\n    type: DragEventType\n    x: int\n    y: int\n    data: NotRequired[DragData]\n    modifiers: NotRequired[KeyModifier]\nclass EmulateTouchFromMouseEventParams(CommandParams):\n    type: MouseEventType\n    x: int\n    y: int",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "EmulateTouchFromMouseEventParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class EmulateTouchFromMouseEventParams(CommandParams):\n    type: MouseEventType\n    x: int\n    y: int\n    button: MouseButton\n    timestamp: NotRequired[float]\n    deltaX: NotRequired[float]\n    deltaY: NotRequired[float]\n    modifiers: NotRequired[KeyModifier]\n    clickCount: NotRequired[int]",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "ImeSetCompositionParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class ImeSetCompositionParams(CommandParams):\n    text: str\n    selectionStart: int\n    selectionEnd: int\n    replacementStart: NotRequired[int]\n    replacementEnd: NotRequired[int]\nclass InsertTextParams(CommandParams):\n    text: str\nclass SetInterceptDragsParams(CommandParams):\n    enabled: bool",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "InsertTextParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class InsertTextParams(CommandParams):\n    text: str\nclass SetInterceptDragsParams(CommandParams):\n    enabled: bool\nclass SynthesizePinchGestureParams(CommandParams):\n    x: int\n    y: int\n    scaleFactor: float\n    relativeSpeed: NotRequired[float]\n    gestureSourceType: NotRequired[GestureSourceType]",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SetInterceptDragsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class SetInterceptDragsParams(CommandParams):\n    enabled: bool\nclass SynthesizePinchGestureParams(CommandParams):\n    x: int\n    y: int\n    scaleFactor: float\n    relativeSpeed: NotRequired[float]\n    gestureSourceType: NotRequired[GestureSourceType]\nclass SynthesizeScrollGestureParams(CommandParams):\n    x: int",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SynthesizePinchGestureParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class SynthesizePinchGestureParams(CommandParams):\n    x: int\n    y: int\n    scaleFactor: float\n    relativeSpeed: NotRequired[float]\n    gestureSourceType: NotRequired[GestureSourceType]\nclass SynthesizeScrollGestureParams(CommandParams):\n    x: int\n    y: int\n    xDistance: NotRequired[float]",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SynthesizeScrollGestureParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class SynthesizeScrollGestureParams(CommandParams):\n    x: int\n    y: int\n    xDistance: NotRequired[float]\n    yDistance: NotRequired[float]\n    xOverscroll: NotRequired[float]\n    yOverscroll: NotRequired[float]\n    preventFling: NotRequired[bool]\n    speed: NotRequired[int]\n    gestureSourceType: NotRequired[GestureSourceType]",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "SynthesizeTapGestureParams",
        "kind": 6,
        "importPath": "pydoll.protocol.input.params",
        "description": "pydoll.protocol.input.params",
        "peekOfCode": "class SynthesizeTapGestureParams(CommandParams):\n    x: int\n    y: int\n    duration: NotRequired[int]\n    tapCount: NotRequired[int]\n    gestureSourceType: NotRequired[GestureSourceType]",
        "detail": "pydoll.protocol.input.params",
        "documentation": {}
    },
    {
        "label": "TouchPoint",
        "kind": 6,
        "importPath": "pydoll.protocol.input.types",
        "description": "pydoll.protocol.input.types",
        "peekOfCode": "class TouchPoint(TypedDict):\n    x: int\n    y: int\n    radiusX: NotRequired[float]\n    radiusY: NotRequired[float]\n    rotationAngle: NotRequired[float]\n    force: NotRequired[float]\n    tangentialPressure: NotRequired[float]\n    tiltX: NotRequired[float]\n    tiltY: NotRequired[float]",
        "detail": "pydoll.protocol.input.types",
        "documentation": {}
    },
    {
        "label": "DragDataItem",
        "kind": 6,
        "importPath": "pydoll.protocol.input.types",
        "description": "pydoll.protocol.input.types",
        "peekOfCode": "class DragDataItem(TypedDict):\n    mimeType: str\n    data: str\n    title: NotRequired[str]\n    baseURL: NotRequired[str]\nclass DragData(TypedDict):\n    items: list[DragDataItem]\n    files: NotRequired[list[str]]\n    dragOperationMask: int",
        "detail": "pydoll.protocol.input.types",
        "documentation": {}
    },
    {
        "label": "DragData",
        "kind": 6,
        "importPath": "pydoll.protocol.input.types",
        "description": "pydoll.protocol.input.types",
        "peekOfCode": "class DragData(TypedDict):\n    items: list[DragDataItem]\n    files: NotRequired[list[str]]\n    dragOperationMask: int",
        "detail": "pydoll.protocol.input.types",
        "documentation": {}
    },
    {
        "label": "NetworkEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.network.events",
        "description": "pydoll.protocol.network.events",
        "peekOfCode": "class NetworkEvent(str, Enum):\n    \"\"\"\n    Events from the Network domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of Network-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about network activities, such as requests, responses, and WebSocket communications.\n    \"\"\"\n    DATA_RECEIVED = 'Network.dataReceived'\n    \"\"\"\n    Fired when data chunk was received over the network.",
        "detail": "pydoll.protocol.network.events",
        "documentation": {}
    },
    {
        "label": "NetworkMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.network.methods",
        "description": "pydoll.protocol.network.methods",
        "peekOfCode": "class NetworkMethod(str, Enum):\n    CLEAR_BROWSER_CACHE = 'Network.clearBrowserCache'\n    CLEAR_BROWSER_COOKIES = 'Network.clearBrowserCookies'\n    DELETE_COOKIES = 'Network.deleteCookies'\n    DISABLE = 'Network.disable'\n    EMULATE_NETWORK_CONDITIONS = 'Network.emulateNetworkConditions'\n    ENABLE = 'Network.enable'\n    GET_COOKIES = 'Network.getCookies'\n    GET_REQUEST_POST_DATA = 'Network.getRequestPostData'\n    GET_RESPONSE_BODY = 'Network.getResponseBody'",
        "detail": "pydoll.protocol.network.methods",
        "documentation": {}
    },
    {
        "label": "DeleteCookiesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class DeleteCookiesParams(CommandParams):\n    \"\"\"Parameters for deleting browser cookies.\"\"\"\n    name: str\n    url: NotRequired[str]\n    domain: NotRequired[str]\n    path: NotRequired[str]\n    partitionKey: NotRequired[CookiePartitionKey]\nclass EmulateNetworkConditionsParams(CommandParams):\n    \"\"\"Parameters for emulating network conditions.\"\"\"\n    offline: bool",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "EmulateNetworkConditionsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class EmulateNetworkConditionsParams(CommandParams):\n    \"\"\"Parameters for emulating network conditions.\"\"\"\n    offline: bool\n    latency: float\n    downloadThroughput: float\n    uploadThroughput: float\n    connectionType: NotRequired[ConnectionType]\n    packetLoss: NotRequired[float]\n    packetQueueLength: NotRequired[int]\n    packetReordering: NotRequired[bool]",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "NetworkEnableParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class NetworkEnableParams(CommandParams):\n    \"\"\"Parameters for enabling network tracking.\"\"\"\n    maxTotalBufferSize: NotRequired[int]\n    maxResourceBufferSize: NotRequired[int]\n    maxPostDataSize: NotRequired[int]\nclass GetCookiesParams(CommandParams):\n    \"\"\"Parameters for retrieving browser cookies.\"\"\"\n    urls: NotRequired[list[str]]\nclass GetRequestPostDataParams(CommandParams):\n    \"\"\"Parameters for retrieving request POST data.\"\"\"",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetCookiesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class GetCookiesParams(CommandParams):\n    \"\"\"Parameters for retrieving browser cookies.\"\"\"\n    urls: NotRequired[list[str]]\nclass GetRequestPostDataParams(CommandParams):\n    \"\"\"Parameters for retrieving request POST data.\"\"\"\n    requestId: str\nclass GetResponseBodyParams(CommandParams):\n    \"\"\"Parameters for retrieving response body.\"\"\"\n    requestId: str\nclass GetCertificateParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetRequestPostDataParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class GetRequestPostDataParams(CommandParams):\n    \"\"\"Parameters for retrieving request POST data.\"\"\"\n    requestId: str\nclass GetResponseBodyParams(CommandParams):\n    \"\"\"Parameters for retrieving response body.\"\"\"\n    requestId: str\nclass GetCertificateParams(CommandParams):\n    \"\"\"Parameters for retrieving DER-encoded certificate.\"\"\"\n    origin: str\nclass GetResponseBodyForInterceptionParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class GetResponseBodyParams(CommandParams):\n    \"\"\"Parameters for retrieving response body.\"\"\"\n    requestId: str\nclass GetCertificateParams(CommandParams):\n    \"\"\"Parameters for retrieving DER-encoded certificate.\"\"\"\n    origin: str\nclass GetResponseBodyForInterceptionParams(CommandParams):\n    \"\"\"Parameters for retrieving response body for intercepted request.\"\"\"\n    interceptionId: str\nclass SearchInResponseBodyParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetCertificateParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class GetCertificateParams(CommandParams):\n    \"\"\"Parameters for retrieving DER-encoded certificate.\"\"\"\n    origin: str\nclass GetResponseBodyForInterceptionParams(CommandParams):\n    \"\"\"Parameters for retrieving response body for intercepted request.\"\"\"\n    interceptionId: str\nclass SearchInResponseBodyParams(CommandParams):\n    \"\"\"Parameters for searching in response content.\"\"\"\n    requestId: str\n    query: str",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyForInterceptionParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class GetResponseBodyForInterceptionParams(CommandParams):\n    \"\"\"Parameters for retrieving response body for intercepted request.\"\"\"\n    interceptionId: str\nclass SearchInResponseBodyParams(CommandParams):\n    \"\"\"Parameters for searching in response content.\"\"\"\n    requestId: str\n    query: str\n    caseSensitive: NotRequired[bool]\n    isRegex: NotRequired[bool]\nclass SetBypassServiceWorkerParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SearchInResponseBodyParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SearchInResponseBodyParams(CommandParams):\n    \"\"\"Parameters for searching in response content.\"\"\"\n    requestId: str\n    query: str\n    caseSensitive: NotRequired[bool]\n    isRegex: NotRequired[bool]\nclass SetBypassServiceWorkerParams(CommandParams):\n    \"\"\"Parameters for toggling service worker bypass.\"\"\"\n    bypass: bool\nclass SetCacheDisabledParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetBypassServiceWorkerParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetBypassServiceWorkerParams(CommandParams):\n    \"\"\"Parameters for toggling service worker bypass.\"\"\"\n    bypass: bool\nclass SetCacheDisabledParams(CommandParams):\n    \"\"\"Parameters for toggling cache for requests.\"\"\"\n    cacheDisabled: bool\nclass SetCookieParams(CommandParams):\n    \"\"\"Parameters for setting a cookie.\"\"\"\n    name: str\n    value: str",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetCacheDisabledParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetCacheDisabledParams(CommandParams):\n    \"\"\"Parameters for toggling cache for requests.\"\"\"\n    cacheDisabled: bool\nclass SetCookieParams(CommandParams):\n    \"\"\"Parameters for setting a cookie.\"\"\"\n    name: str\n    value: str\n    url: NotRequired[str]\n    domain: NotRequired[str]\n    path: NotRequired[str]",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetCookieParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetCookieParams(CommandParams):\n    \"\"\"Parameters for setting a cookie.\"\"\"\n    name: str\n    value: str\n    url: NotRequired[str]\n    domain: NotRequired[str]\n    path: NotRequired[str]\n    secure: NotRequired[bool]\n    httpOnly: NotRequired[bool]\n    sameSite: NotRequired[CookieSameSite]",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetCookiesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetCookiesParams(CommandParams):\n    \"\"\"Parameters for setting multiple cookies.\"\"\"\n    cookies: list[SetCookieParams]\nclass SetExtraHTTPHeadersParams(CommandParams):\n    \"\"\"Parameters for setting extra HTTP headers.\"\"\"\n    headers: list[HeaderEntry]\nclass SetUserAgentOverrideParams(CommandParams):\n    \"\"\"Parameters for overriding user agent string.\"\"\"\n    userAgent: str\n    acceptLanguage: NotRequired[str]",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetExtraHTTPHeadersParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetExtraHTTPHeadersParams(CommandParams):\n    \"\"\"Parameters for setting extra HTTP headers.\"\"\"\n    headers: list[HeaderEntry]\nclass SetUserAgentOverrideParams(CommandParams):\n    \"\"\"Parameters for overriding user agent string.\"\"\"\n    userAgent: str\n    acceptLanguage: NotRequired[str]\n    platform: NotRequired[str]\n    userAgentMetadata: NotRequired[UserAgentMetadata]\nclass SetBlockedURLsParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetUserAgentOverrideParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetUserAgentOverrideParams(CommandParams):\n    \"\"\"Parameters for overriding user agent string.\"\"\"\n    userAgent: str\n    acceptLanguage: NotRequired[str]\n    platform: NotRequired[str]\n    userAgentMetadata: NotRequired[UserAgentMetadata]\nclass SetBlockedURLsParams(CommandParams):\n    \"\"\"Parameters for blocking URLs from loading.\"\"\"\n    urls: list[str]\nclass SetAcceptedEncodingsParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetBlockedURLsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetBlockedURLsParams(CommandParams):\n    \"\"\"Parameters for blocking URLs from loading.\"\"\"\n    urls: list[str]\nclass SetAcceptedEncodingsParams(CommandParams):\n    \"\"\"Parameters for setting accepted content encodings.\"\"\"\n    encodings: list[ContentEncoding]\nclass SetAttachDebugStackParams(CommandParams):\n    \"\"\"Parameters for attaching a page script stack in requests.\"\"\"\n    enabled: bool\nclass SetCookieControlsParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetAcceptedEncodingsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetAcceptedEncodingsParams(CommandParams):\n    \"\"\"Parameters for setting accepted content encodings.\"\"\"\n    encodings: list[ContentEncoding]\nclass SetAttachDebugStackParams(CommandParams):\n    \"\"\"Parameters for attaching a page script stack in requests.\"\"\"\n    enabled: bool\nclass SetCookieControlsParams(CommandParams):\n    \"\"\"Parameters for setting controls for third-party cookie access.\"\"\"\n    enableThirdPartyCookieRestriction: bool\n    disableThirdPartyCookieMetadata: NotRequired[bool]",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetAttachDebugStackParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetAttachDebugStackParams(CommandParams):\n    \"\"\"Parameters for attaching a page script stack in requests.\"\"\"\n    enabled: bool\nclass SetCookieControlsParams(CommandParams):\n    \"\"\"Parameters for setting controls for third-party cookie access.\"\"\"\n    enableThirdPartyCookieRestriction: bool\n    disableThirdPartyCookieMetadata: NotRequired[bool]\n    disableThirdPartyCookieHeuristics: NotRequired[bool]\nclass StreamResourceContentParams(CommandParams):\n    \"\"\"Parameters for enabling streaming of the response.\"\"\"",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetCookieControlsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetCookieControlsParams(CommandParams):\n    \"\"\"Parameters for setting controls for third-party cookie access.\"\"\"\n    enableThirdPartyCookieRestriction: bool\n    disableThirdPartyCookieMetadata: NotRequired[bool]\n    disableThirdPartyCookieHeuristics: NotRequired[bool]\nclass StreamResourceContentParams(CommandParams):\n    \"\"\"Parameters for enabling streaming of the response.\"\"\"\n    requestId: str\nclass TakeResponseBodyForInterceptionAsStreamParams(CommandParams):\n    \"\"\"Parameters for taking response body for interception as a stream.\"\"\"",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "StreamResourceContentParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class StreamResourceContentParams(CommandParams):\n    \"\"\"Parameters for enabling streaming of the response.\"\"\"\n    requestId: str\nclass TakeResponseBodyForInterceptionAsStreamParams(CommandParams):\n    \"\"\"Parameters for taking response body for interception as a stream.\"\"\"\n    interceptionId: str\nclass SetRequestInterceptionParams(CommandParams):\n    \"\"\"Parameters for setting request interception patterns.\"\"\"\n    patterns: list[RequestPattern]\nclass AuthChallengeResponseParams(CommandParams):",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyForInterceptionAsStreamParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class TakeResponseBodyForInterceptionAsStreamParams(CommandParams):\n    \"\"\"Parameters for taking response body for interception as a stream.\"\"\"\n    interceptionId: str\nclass SetRequestInterceptionParams(CommandParams):\n    \"\"\"Parameters for setting request interception patterns.\"\"\"\n    patterns: list[RequestPattern]\nclass AuthChallengeResponseParams(CommandParams):\n    \"\"\"Parameters for responding to an auth challenge.\"\"\"\n    response: str\n    username: NotRequired[str]",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "SetRequestInterceptionParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class SetRequestInterceptionParams(CommandParams):\n    \"\"\"Parameters for setting request interception patterns.\"\"\"\n    patterns: list[RequestPattern]\nclass AuthChallengeResponseParams(CommandParams):\n    \"\"\"Parameters for responding to an auth challenge.\"\"\"\n    response: str\n    username: NotRequired[str]\n    password: NotRequired[str]\nclass EnableReportingApiParams(CommandParams):\n    \"\"\"Parameters for enabling Reporting API.\"\"\"",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class AuthChallengeResponseParams(CommandParams):\n    \"\"\"Parameters for responding to an auth challenge.\"\"\"\n    response: str\n    username: NotRequired[str]\n    password: NotRequired[str]\nclass EnableReportingApiParams(CommandParams):\n    \"\"\"Parameters for enabling Reporting API.\"\"\"\n    enabled: bool\nclass GetSecurityIsolationStatusParams(CommandParams):\n    frameId: NotRequired[str]",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "EnableReportingApiParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class EnableReportingApiParams(CommandParams):\n    \"\"\"Parameters for enabling Reporting API.\"\"\"\n    enabled: bool\nclass GetSecurityIsolationStatusParams(CommandParams):\n    frameId: NotRequired[str]\nclass LoadNetworkResourceParams(CommandParams):\n    \"\"\"Parameters for loading a network resource.\"\"\"\n    url: str\n    options: LoadNetworkResourceOptions\n    frameId: NotRequired[str]",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetSecurityIsolationStatusParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class GetSecurityIsolationStatusParams(CommandParams):\n    frameId: NotRequired[str]\nclass LoadNetworkResourceParams(CommandParams):\n    \"\"\"Parameters for loading a network resource.\"\"\"\n    url: str\n    options: LoadNetworkResourceOptions\n    frameId: NotRequired[str]\nclass ReplayXHRParams(CommandParams):\n    \"\"\"Parameters for replaying an XMLHttpRequest.\"\"\"\n    requestId: str",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "LoadNetworkResourceParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class LoadNetworkResourceParams(CommandParams):\n    \"\"\"Parameters for loading a network resource.\"\"\"\n    url: str\n    options: LoadNetworkResourceOptions\n    frameId: NotRequired[str]\nclass ReplayXHRParams(CommandParams):\n    \"\"\"Parameters for replaying an XMLHttpRequest.\"\"\"\n    requestId: str",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "ReplayXHRParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.params",
        "description": "pydoll.protocol.network.params",
        "peekOfCode": "class ReplayXHRParams(CommandParams):\n    \"\"\"Parameters for replaying an XMLHttpRequest.\"\"\"\n    requestId: str",
        "detail": "pydoll.protocol.network.params",
        "documentation": {}
    },
    {
        "label": "GetCookiesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetCookiesResultDict(TypedDict):\n    \"\"\"Response result for getCookies command.\"\"\"\n    cookies: list[Cookie]\nclass GetRequestPostDataResultDict(TypedDict):\n    \"\"\"Response result for getRequestPostData command.\"\"\"\n    postData: str\nclass GetResponseBodyResultDict(TypedDict):\n    \"\"\"Response result for getResponseBody command.\"\"\"\n    body: str\n    base64Encoded: bool",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetRequestPostDataResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetRequestPostDataResultDict(TypedDict):\n    \"\"\"Response result for getRequestPostData command.\"\"\"\n    postData: str\nclass GetResponseBodyResultDict(TypedDict):\n    \"\"\"Response result for getResponseBody command.\"\"\"\n    body: str\n    base64Encoded: bool\nclass GetResponseBodyForInterceptionResultDict(TypedDict):\n    \"\"\"Response result for getResponseBodyForInterception command.\"\"\"\n    body: str",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetResponseBodyResultDict(TypedDict):\n    \"\"\"Response result for getResponseBody command.\"\"\"\n    body: str\n    base64Encoded: bool\nclass GetResponseBodyForInterceptionResultDict(TypedDict):\n    \"\"\"Response result for getResponseBodyForInterception command.\"\"\"\n    body: str\n    base64Encoded: bool\nclass GetCertificateResultDict(TypedDict):\n    \"\"\"Response result for getCertificate command.\"\"\"",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyForInterceptionResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetResponseBodyForInterceptionResultDict(TypedDict):\n    \"\"\"Response result for getResponseBodyForInterception command.\"\"\"\n    body: str\n    base64Encoded: bool\nclass GetCertificateResultDict(TypedDict):\n    \"\"\"Response result for getCertificate command.\"\"\"\n    tableNames: list[str]\nclass SearchInResponseBodyResultDict(TypedDict):\n    \"\"\"Response result for searchInResponseBody command.\"\"\"\n    result: list[SearchMatch]",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetCertificateResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetCertificateResultDict(TypedDict):\n    \"\"\"Response result for getCertificate command.\"\"\"\n    tableNames: list[str]\nclass SearchInResponseBodyResultDict(TypedDict):\n    \"\"\"Response result for searchInResponseBody command.\"\"\"\n    result: list[SearchMatch]\nclass SetCookieResultDict(TypedDict):\n    \"\"\"Response result for setCookie command.\"\"\"\n    success: bool\nclass StreamResourceContentResultDict(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "SearchInResponseBodyResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class SearchInResponseBodyResultDict(TypedDict):\n    \"\"\"Response result for searchInResponseBody command.\"\"\"\n    result: list[SearchMatch]\nclass SetCookieResultDict(TypedDict):\n    \"\"\"Response result for setCookie command.\"\"\"\n    success: bool\nclass StreamResourceContentResultDict(TypedDict):\n    \"\"\"Response result for streamResourceContent command.\"\"\"\n    bufferedData: str\nclass TakeResponseBodyForInterceptionAsStreamResultDict(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "SetCookieResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class SetCookieResultDict(TypedDict):\n    \"\"\"Response result for setCookie command.\"\"\"\n    success: bool\nclass StreamResourceContentResultDict(TypedDict):\n    \"\"\"Response result for streamResourceContent command.\"\"\"\n    bufferedData: str\nclass TakeResponseBodyForInterceptionAsStreamResultDict(TypedDict):\n    \"\"\"Response result for takeResponseBodyForInterceptionAsStream command.\"\"\"\n    stream: str\nclass CanClearBrowserCacheResultDict(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "StreamResourceContentResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class StreamResourceContentResultDict(TypedDict):\n    \"\"\"Response result for streamResourceContent command.\"\"\"\n    bufferedData: str\nclass TakeResponseBodyForInterceptionAsStreamResultDict(TypedDict):\n    \"\"\"Response result for takeResponseBodyForInterceptionAsStream command.\"\"\"\n    stream: str\nclass CanClearBrowserCacheResultDict(TypedDict):\n    \"\"\"Response result for canClearBrowserCache command.\"\"\"\n    result: bool\nclass CanClearBrowserCookiesResultDict(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyForInterceptionAsStreamResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class TakeResponseBodyForInterceptionAsStreamResultDict(TypedDict):\n    \"\"\"Response result for takeResponseBodyForInterceptionAsStream command.\"\"\"\n    stream: str\nclass CanClearBrowserCacheResultDict(TypedDict):\n    \"\"\"Response result for canClearBrowserCache command.\"\"\"\n    result: bool\nclass CanClearBrowserCookiesResultDict(TypedDict):\n    \"\"\"Response result for canClearBrowserCookies command.\"\"\"\n    result: bool\nclass CanEmulateNetworkConditionsResultDict(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "CanClearBrowserCacheResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class CanClearBrowserCacheResultDict(TypedDict):\n    \"\"\"Response result for canClearBrowserCache command.\"\"\"\n    result: bool\nclass CanClearBrowserCookiesResultDict(TypedDict):\n    \"\"\"Response result for canClearBrowserCookies command.\"\"\"\n    result: bool\nclass CanEmulateNetworkConditionsResultDict(TypedDict):\n    \"\"\"Response result for canEmulateNetworkConditions command.\"\"\"\n    result: bool\nclass GetSecurityIsolationStatusResultDict(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "CanClearBrowserCookiesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class CanClearBrowserCookiesResultDict(TypedDict):\n    \"\"\"Response result for canClearBrowserCookies command.\"\"\"\n    result: bool\nclass CanEmulateNetworkConditionsResultDict(TypedDict):\n    \"\"\"Response result for canEmulateNetworkConditions command.\"\"\"\n    result: bool\nclass GetSecurityIsolationStatusResultDict(TypedDict):\n    \"\"\"Response result for getSecurityIsolationStatus command.\"\"\"\n    status: SecurityIsolationStatus\nclass LoadNetworkResourceResultDict(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "CanEmulateNetworkConditionsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class CanEmulateNetworkConditionsResultDict(TypedDict):\n    \"\"\"Response result for canEmulateNetworkConditions command.\"\"\"\n    result: bool\nclass GetSecurityIsolationStatusResultDict(TypedDict):\n    \"\"\"Response result for getSecurityIsolationStatus command.\"\"\"\n    status: SecurityIsolationStatus\nclass LoadNetworkResourceResultDict(TypedDict):\n    \"\"\"Response result for loadNetworkResource command.\"\"\"\n    success: bool\n    netError: NotRequired[float]",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetSecurityIsolationStatusResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetSecurityIsolationStatusResultDict(TypedDict):\n    \"\"\"Response result for getSecurityIsolationStatus command.\"\"\"\n    status: SecurityIsolationStatus\nclass LoadNetworkResourceResultDict(TypedDict):\n    \"\"\"Response result for loadNetworkResource command.\"\"\"\n    success: bool\n    netError: NotRequired[float]\n    netErrorName: NotRequired[str]\n    httpStatusCode: NotRequired[float]\n    stream: NotRequired[str]",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "LoadNetworkResourceResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class LoadNetworkResourceResultDict(TypedDict):\n    \"\"\"Response result for loadNetworkResource command.\"\"\"\n    success: bool\n    netError: NotRequired[float]\n    netErrorName: NotRequired[str]\n    httpStatusCode: NotRequired[float]\n    stream: NotRequired[str]\n    headers: NotRequired[list[HeaderEntry]]\n# Response classes that inherit from Response\nclass GetCookiesResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetCookiesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetCookiesResponse(TypedDict):\n    \"\"\"Response for getCookies command.\"\"\"\n    result: GetCookiesResultDict\nclass GetRequestPostDataResponse(TypedDict):\n    \"\"\"Response for getRequestPostData command.\"\"\"\n    result: GetRequestPostDataResultDict\nclass GetResponseBodyResponse(TypedDict):\n    \"\"\"Response for getResponseBody command.\"\"\"\n    result: GetResponseBodyResultDict\nclass GetResponseBodyForInterceptionResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetRequestPostDataResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetRequestPostDataResponse(TypedDict):\n    \"\"\"Response for getRequestPostData command.\"\"\"\n    result: GetRequestPostDataResultDict\nclass GetResponseBodyResponse(TypedDict):\n    \"\"\"Response for getResponseBody command.\"\"\"\n    result: GetResponseBodyResultDict\nclass GetResponseBodyForInterceptionResponse(TypedDict):\n    \"\"\"Response for getResponseBodyForInterception command.\"\"\"\n    result: GetResponseBodyForInterceptionResultDict\nclass GetCertificateResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetResponseBodyResponse(TypedDict):\n    \"\"\"Response for getResponseBody command.\"\"\"\n    result: GetResponseBodyResultDict\nclass GetResponseBodyForInterceptionResponse(TypedDict):\n    \"\"\"Response for getResponseBodyForInterception command.\"\"\"\n    result: GetResponseBodyForInterceptionResultDict\nclass GetCertificateResponse(TypedDict):\n    \"\"\"Response for getCertificate command.\"\"\"\n    result: GetCertificateResultDict\nclass SearchInResponseBodyResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetResponseBodyForInterceptionResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetResponseBodyForInterceptionResponse(TypedDict):\n    \"\"\"Response for getResponseBodyForInterception command.\"\"\"\n    result: GetResponseBodyForInterceptionResultDict\nclass GetCertificateResponse(TypedDict):\n    \"\"\"Response for getCertificate command.\"\"\"\n    result: GetCertificateResultDict\nclass SearchInResponseBodyResponse(TypedDict):\n    \"\"\"Response for searchInResponseBody command.\"\"\"\n    result: SearchInResponseBodyResultDict\nclass SetCookieResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetCertificateResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetCertificateResponse(TypedDict):\n    \"\"\"Response for getCertificate command.\"\"\"\n    result: GetCertificateResultDict\nclass SearchInResponseBodyResponse(TypedDict):\n    \"\"\"Response for searchInResponseBody command.\"\"\"\n    result: SearchInResponseBodyResultDict\nclass SetCookieResponse(TypedDict):\n    \"\"\"Response for setCookie command.\"\"\"\n    result: SetCookieResultDict\nclass StreamResourceContentResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "SearchInResponseBodyResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class SearchInResponseBodyResponse(TypedDict):\n    \"\"\"Response for searchInResponseBody command.\"\"\"\n    result: SearchInResponseBodyResultDict\nclass SetCookieResponse(TypedDict):\n    \"\"\"Response for setCookie command.\"\"\"\n    result: SetCookieResultDict\nclass StreamResourceContentResponse(TypedDict):\n    \"\"\"Response for streamResourceContent command.\"\"\"\n    result: StreamResourceContentResultDict\nclass TakeResponseBodyForInterceptionAsStreamResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "SetCookieResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class SetCookieResponse(TypedDict):\n    \"\"\"Response for setCookie command.\"\"\"\n    result: SetCookieResultDict\nclass StreamResourceContentResponse(TypedDict):\n    \"\"\"Response for streamResourceContent command.\"\"\"\n    result: StreamResourceContentResultDict\nclass TakeResponseBodyForInterceptionAsStreamResponse(TypedDict):\n    \"\"\"Response for takeResponseBodyForInterceptionAsStream command.\"\"\"\n    result: TakeResponseBodyForInterceptionAsStreamResultDict\nclass CanClearBrowserCacheResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "StreamResourceContentResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class StreamResourceContentResponse(TypedDict):\n    \"\"\"Response for streamResourceContent command.\"\"\"\n    result: StreamResourceContentResultDict\nclass TakeResponseBodyForInterceptionAsStreamResponse(TypedDict):\n    \"\"\"Response for takeResponseBodyForInterceptionAsStream command.\"\"\"\n    result: TakeResponseBodyForInterceptionAsStreamResultDict\nclass CanClearBrowserCacheResponse(TypedDict):\n    \"\"\"Response for canClearBrowserCache command.\"\"\"\n    result: CanClearBrowserCacheResultDict\nclass CanClearBrowserCookiesResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "TakeResponseBodyForInterceptionAsStreamResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class TakeResponseBodyForInterceptionAsStreamResponse(TypedDict):\n    \"\"\"Response for takeResponseBodyForInterceptionAsStream command.\"\"\"\n    result: TakeResponseBodyForInterceptionAsStreamResultDict\nclass CanClearBrowserCacheResponse(TypedDict):\n    \"\"\"Response for canClearBrowserCache command.\"\"\"\n    result: CanClearBrowserCacheResultDict\nclass CanClearBrowserCookiesResponse(TypedDict):\n    \"\"\"Response for canClearBrowserCookies command.\"\"\"\n    result: CanClearBrowserCookiesResultDict\nclass CanEmulateNetworkConditionsResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "CanClearBrowserCacheResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class CanClearBrowserCacheResponse(TypedDict):\n    \"\"\"Response for canClearBrowserCache command.\"\"\"\n    result: CanClearBrowserCacheResultDict\nclass CanClearBrowserCookiesResponse(TypedDict):\n    \"\"\"Response for canClearBrowserCookies command.\"\"\"\n    result: CanClearBrowserCookiesResultDict\nclass CanEmulateNetworkConditionsResponse(TypedDict):\n    \"\"\"Response for canEmulateNetworkConditions command.\"\"\"\n    result: CanEmulateNetworkConditionsResultDict\nclass GetSecurityIsolationStatusResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "CanClearBrowserCookiesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class CanClearBrowserCookiesResponse(TypedDict):\n    \"\"\"Response for canClearBrowserCookies command.\"\"\"\n    result: CanClearBrowserCookiesResultDict\nclass CanEmulateNetworkConditionsResponse(TypedDict):\n    \"\"\"Response for canEmulateNetworkConditions command.\"\"\"\n    result: CanEmulateNetworkConditionsResultDict\nclass GetSecurityIsolationStatusResponse(TypedDict):\n    \"\"\"Response for getSecurityIsolationStatus command.\"\"\"\n    result: GetSecurityIsolationStatusResultDict\nclass LoadNetworkResourceResponse(TypedDict):",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "CanEmulateNetworkConditionsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class CanEmulateNetworkConditionsResponse(TypedDict):\n    \"\"\"Response for canEmulateNetworkConditions command.\"\"\"\n    result: CanEmulateNetworkConditionsResultDict\nclass GetSecurityIsolationStatusResponse(TypedDict):\n    \"\"\"Response for getSecurityIsolationStatus command.\"\"\"\n    result: GetSecurityIsolationStatusResultDict\nclass LoadNetworkResourceResponse(TypedDict):\n    \"\"\"Response for loadNetworkResource command.\"\"\"\n    result: LoadNetworkResourceResultDict",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "GetSecurityIsolationStatusResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class GetSecurityIsolationStatusResponse(TypedDict):\n    \"\"\"Response for getSecurityIsolationStatus command.\"\"\"\n    result: GetSecurityIsolationStatusResultDict\nclass LoadNetworkResourceResponse(TypedDict):\n    \"\"\"Response for loadNetworkResource command.\"\"\"\n    result: LoadNetworkResourceResultDict",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "LoadNetworkResourceResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.network.responses",
        "description": "pydoll.protocol.network.responses",
        "peekOfCode": "class LoadNetworkResourceResponse(TypedDict):\n    \"\"\"Response for loadNetworkResource command.\"\"\"\n    result: LoadNetworkResourceResultDict",
        "detail": "pydoll.protocol.network.responses",
        "documentation": {}
    },
    {
        "label": "SearchMatch",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class SearchMatch(TypedDict):\n    \"\"\"Search match object.\"\"\"\n    lineNumber: int\n    lineContent: str\nclass CookiePartitionKey(TypedDict):\n    topLevelSite: str\n    hasCrossSiteAncestor: bool\nclass Cookie(TypedDict):\n    \"\"\"Cookie object.\"\"\"\n    name: str",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CookiePartitionKey",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class CookiePartitionKey(TypedDict):\n    topLevelSite: str\n    hasCrossSiteAncestor: bool\nclass Cookie(TypedDict):\n    \"\"\"Cookie object.\"\"\"\n    name: str\n    value: str\n    domain: str\n    path: str\n    expires: float",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class Cookie(TypedDict):\n    \"\"\"Cookie object.\"\"\"\n    name: str\n    value: str\n    domain: str\n    path: str\n    expires: float\n    size: int\n    httpOnly: bool\n    secure: bool",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CrossOriginOpenerPolicyStatus",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class CrossOriginOpenerPolicyStatus(TypedDict):\n    value: 'CrossOriginOpenerPolicyStatus'\n    reportOnlyValue: 'CrossOriginOpenerPolicyStatus'\n    reportingEndpoint: NotRequired[str]\n    reportOnlyReportingEndpoint: NotRequired[str]\nclass CrossOriginEmbedderPolicyStatus(TypedDict):\n    value: 'CrossOriginEmbedderPolicyStatus'\n    reportOnlyValue: 'CrossOriginEmbedderPolicyStatus'\n    reportingEndpoint: NotRequired[str]\n    reportOnlyReportingEndpoint: NotRequired[str]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CrossOriginEmbedderPolicyStatus",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class CrossOriginEmbedderPolicyStatus(TypedDict):\n    value: 'CrossOriginEmbedderPolicyStatus'\n    reportOnlyValue: 'CrossOriginEmbedderPolicyStatus'\n    reportingEndpoint: NotRequired[str]\n    reportOnlyReportingEndpoint: NotRequired[str]\nclass ContentSecurityPolicyStatus(TypedDict):\n    \"\"\"Content security policy status object.\"\"\"\n    effectiveDirective: str\n    isEnforced: bool\n    source: ContentSecurityPolicySource",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "ContentSecurityPolicyStatus",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class ContentSecurityPolicyStatus(TypedDict):\n    \"\"\"Content security policy status object.\"\"\"\n    effectiveDirective: str\n    isEnforced: bool\n    source: ContentSecurityPolicySource\nclass SecurityIsolationStatus(TypedDict):\n    \"\"\"Security isolation status object.\"\"\"\n    coop: NotRequired[CrossOriginOpenerPolicyStatus]\n    coep: NotRequired[CrossOriginEmbedderPolicyStatus]\n    csp: NotRequired[list[ContentSecurityPolicyStatus]]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "SecurityIsolationStatus",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class SecurityIsolationStatus(TypedDict):\n    \"\"\"Security isolation status object.\"\"\"\n    coop: NotRequired[CrossOriginOpenerPolicyStatus]\n    coep: NotRequired[CrossOriginEmbedderPolicyStatus]\n    csp: NotRequired[list[ContentSecurityPolicyStatus]]\nclass LoadNetworkResourceOptions(TypedDict):\n    \"\"\"Load network resource options object.\"\"\"\n    disableCache: NotRequired[bool]\n    includeCredentials: NotRequired[bool]\nclass CookieParam(TypedDict):",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "LoadNetworkResourceOptions",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class LoadNetworkResourceOptions(TypedDict):\n    \"\"\"Load network resource options object.\"\"\"\n    disableCache: NotRequired[bool]\n    includeCredentials: NotRequired[bool]\nclass CookieParam(TypedDict):\n    name: str\n    value: str\n    url: NotRequired[str]\n    domain: NotRequired[str]\n    path: NotRequired[str]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "CookieParam",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class CookieParam(TypedDict):\n    name: str\n    value: str\n    url: NotRequired[str]\n    domain: NotRequired[str]\n    path: NotRequired[str]\n    secure: NotRequired[bool]\n    httpOnly: NotRequired[bool]\n    sameSite: NotRequired[CookieSameSite]\n    expires: NotRequired[float]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "UserAgentBrand",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class UserAgentBrand(TypedDict):\n    brand: str\n    version: str\nclass UserAgentMetadata(TypedDict):\n    brands: NotRequired[list[UserAgentBrand]]\n    fullVersionList: NotRequired[list[UserAgentBrand]]\n    platform: str\n    platformVersion: str\n    architecture: str\n    model: str",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "UserAgentMetadata",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class UserAgentMetadata(TypedDict):\n    brands: NotRequired[list[UserAgentBrand]]\n    fullVersionList: NotRequired[list[UserAgentBrand]]\n    platform: str\n    platformVersion: str\n    architecture: str\n    model: str\n    mobile: bool\n    bitness: NotRequired[str]\n    wow64: NotRequired[bool]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "PostDataEntry",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class PostDataEntry(TypedDict):\n    bytes: NotRequired[str]\nclass TrustTokenParams(TypedDict):\n    operation: TrustTokenOperationType\n    refreshPolicy: RefreshPolicy\n    issuers: NotRequired[list[str]]\nclass Request(TypedDict):\n    url: str\n    urlFragment: NotRequired[str]\n    method: str",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "TrustTokenParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class TrustTokenParams(TypedDict):\n    operation: TrustTokenOperationType\n    refreshPolicy: RefreshPolicy\n    issuers: NotRequired[list[str]]\nclass Request(TypedDict):\n    url: str\n    urlFragment: NotRequired[str]\n    method: str\n    headers: NotRequired[dict]\n    hasPostData: NotRequired[bool]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class Request(TypedDict):\n    url: str\n    urlFragment: NotRequired[str]\n    method: str\n    headers: NotRequired[dict]\n    hasPostData: NotRequired[bool]\n    postDataEntries: NotRequired[list[PostDataEntry]]\n    mixedContentType: NotRequired[MixedContentType]\n    initialPriority: NotRequired[ResourcePriority]\n    referrerPolicy: NotRequired[ReferrerPolicy]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "RequestPausedEventParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class RequestPausedEventParams(TypedDict):\n    requestId: str\n    request: Request\nclass RequestPausedEvent(TypedDict):\n    method: str\n    params: RequestPausedEventParams\nclass Initiator(TypedDict):\n    type: InitiatorType\n    stack: NotRequired[StackTrace]\n    url: NotRequired[str]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "RequestPausedEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class RequestPausedEvent(TypedDict):\n    method: str\n    params: RequestPausedEventParams\nclass Initiator(TypedDict):\n    type: InitiatorType\n    stack: NotRequired[StackTrace]\n    url: NotRequired[str]\n    lineNumber: NotRequired[int]\n    columnNumber: NotRequired[int]\n    requestId: NotRequired[str]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "Initiator",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class Initiator(TypedDict):\n    type: InitiatorType\n    stack: NotRequired[StackTrace]\n    url: NotRequired[str]\n    lineNumber: NotRequired[int]\n    columnNumber: NotRequired[int]\n    requestId: NotRequired[str]\nclass ServiceWorkerRouterInfo(TypedDict):\n    \"\"\"Service worker router info object.\"\"\"\n    ruleIdMatched: NotRequired[int]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "ServiceWorkerRouterInfo",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class ServiceWorkerRouterInfo(TypedDict):\n    \"\"\"Service worker router info object.\"\"\"\n    ruleIdMatched: NotRequired[int]\n    matchedSourceType: NotRequired[NetworkServiceWorkerRouterSourceType]\n    actualSourceType: NotRequired[NetworkServiceWorkerRouterSourceType]\nclass ResourceTiming(TypedDict):\n    \"\"\"Resource timing object.\"\"\"\n    requestTime: float\n    proxyStart: float\n    proxyEnd: float",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "ResourceTiming",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class ResourceTiming(TypedDict):\n    \"\"\"Resource timing object.\"\"\"\n    requestTime: float\n    proxyStart: float\n    proxyEnd: float\n    dnsStart: float\n    dnsEnd: float\n    connectStart: float\n    connectEnd: float\n    sslStart: float",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "SignedCertificateTimestamp",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class SignedCertificateTimestamp(TypedDict):\n    \"\"\"Signed certificate timestamp object.\"\"\"\n    status: str\n    origin: str\n    logDescription: str\n    logId: str\n    timestamp: float\n    hashAlgorithm: str\n    signatureAlgorithm: str\n    signatureData: str",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "SecurityDetails",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class SecurityDetails(TypedDict):\n    \"\"\"Security details object.\"\"\"\n    protocol: str\n    keyExchange: str\n    keyExchangeGroup: NotRequired[str]\n    cipher: str\n    mac: NotRequired[str]\n    certificateId: int\n    subjectName: str\n    sanList: list[str]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class Response(TypedDict):\n    url: str\n    status: int\n    statusText: str\n    headers: list[dict]\n    headersText: NotRequired[str]\n    mimeType: str\n    charset: str\n    requestHeaders: NotRequired[list[dict]]\n    requestHeadersText: NotRequired[str]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "NetworkLogParams",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class NetworkLogParams(TypedDict):\n    requestId: str\n    loaderId: str\n    documentURL: str\n    request: Request\n    timestamp: float\n    wallTime: float\n    initiator: Initiator\n    redirectHasExtraInfo: bool\n    redirectResponse: NotRequired[Response]",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "NetworkLog",
        "kind": 6,
        "importPath": "pydoll.protocol.network.types",
        "description": "pydoll.protocol.network.types",
        "peekOfCode": "class NetworkLog(TypedDict):\n    \"\"\"Network log object.\"\"\"\n    method: str\n    params: RequestPausedEventParams",
        "detail": "pydoll.protocol.network.types",
        "documentation": {}
    },
    {
        "label": "PageEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.page.events",
        "description": "pydoll.protocol.page.events",
        "peekOfCode": "class PageEvent(str, Enum):\n    \"\"\"\n    Events from the Page domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of Page-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about page lifecycle, frame navigation, JavaScript dialogs, and other\n    page-related activities.\n    \"\"\"\n    DOM_CONTENT_EVENT_FIRED = 'Page.domContentEventFired'\n    \"\"\"",
        "detail": "pydoll.protocol.page.events",
        "documentation": {}
    },
    {
        "label": "PageMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.page.methods",
        "description": "pydoll.protocol.page.methods",
        "peekOfCode": "class PageMethod(str, Enum):\n    ADD_SCRIPT_TO_EVALUATE_ON_NEW_DOCUMENT = 'Page.addScriptToEvaluateOnNewDocument'\n    BRING_TO_FRONT = 'Page.bringToFront'\n    CAPTURE_SCREENSHOT = 'Page.captureScreenshot'\n    CLOSE = 'Page.close'\n    CREATE_ISOLATED_WORLD = 'Page.createIsolatedWorld'\n    DISABLE = 'Page.disable'\n    ENABLE = 'Page.enable'\n    GET_APP_MANIFEST = 'Page.getAppManifest'\n    GET_FRAME_TREE = 'Page.getFrameTree'",
        "detail": "pydoll.protocol.page.methods",
        "documentation": {}
    },
    {
        "label": "AddScriptToEvaluateOnNewDocumentParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class AddScriptToEvaluateOnNewDocumentParams(CommandParams):\n    \"\"\"Parameters for adding script to evaluate on new document.\"\"\"\n    source: str\n    worldName: NotRequired[str]\n    includeCommandLineAPI: NotRequired[bool]\n    runImmediately: NotRequired[bool]\nclass CaptureScreenshotParams(CommandParams):\n    \"\"\"Parameters for capturing page screenshot.\"\"\"\n    format: NotRequired[ScreenshotFormat]\n    quality: NotRequired[int]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "CaptureScreenshotParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class CaptureScreenshotParams(CommandParams):\n    \"\"\"Parameters for capturing page screenshot.\"\"\"\n    format: NotRequired[ScreenshotFormat]\n    quality: NotRequired[int]\n    clip: NotRequired[Viewport]\n    fromSurface: NotRequired[bool]\n    captureBeyondViewport: NotRequired[bool]\n    optimizeForSpeed: NotRequired[bool]\nclass CreateIsolatedWorldParams(CommandParams):\n    \"\"\"Parameters for creating an isolated world.\"\"\"",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "CreateIsolatedWorldParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class CreateIsolatedWorldParams(CommandParams):\n    \"\"\"Parameters for creating an isolated world.\"\"\"\n    frameId: str\n    worldName: NotRequired[str]\n    grantUniveralAccess: NotRequired[bool]\nclass PageEnableParams(CommandParams):\n    \"\"\"Parameters for enabling page domain.\"\"\"\n    enableFileChooserOpenedEvent: NotRequired[bool]\nclass GetAppManifestParams(CommandParams):\n    \"\"\"Parameters for getting app manifest.\"\"\"",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "PageEnableParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class PageEnableParams(CommandParams):\n    \"\"\"Parameters for enabling page domain.\"\"\"\n    enableFileChooserOpenedEvent: NotRequired[bool]\nclass GetAppManifestParams(CommandParams):\n    \"\"\"Parameters for getting app manifest.\"\"\"\n    manifestId: NotRequired[str]\nclass HandleJavaScriptDialogParams(CommandParams):\n    \"\"\"Parameters for handling JavaScript dialog.\"\"\"\n    accept: bool\n    promptText: NotRequired[str]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetAppManifestParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class GetAppManifestParams(CommandParams):\n    \"\"\"Parameters for getting app manifest.\"\"\"\n    manifestId: NotRequired[str]\nclass HandleJavaScriptDialogParams(CommandParams):\n    \"\"\"Parameters for handling JavaScript dialog.\"\"\"\n    accept: bool\n    promptText: NotRequired[str]\nclass NavigateParams(CommandParams):\n    \"\"\"Parameters for navigating to URL.\"\"\"\n    url: str",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "HandleJavaScriptDialogParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class HandleJavaScriptDialogParams(CommandParams):\n    \"\"\"Parameters for handling JavaScript dialog.\"\"\"\n    accept: bool\n    promptText: NotRequired[str]\nclass NavigateParams(CommandParams):\n    \"\"\"Parameters for navigating to URL.\"\"\"\n    url: str\n    referrer: NotRequired[str]\n    transitionType: NotRequired[TransitionType]\n    frameId: NotRequired[str]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "NavigateParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class NavigateParams(CommandParams):\n    \"\"\"Parameters for navigating to URL.\"\"\"\n    url: str\n    referrer: NotRequired[str]\n    transitionType: NotRequired[TransitionType]\n    frameId: NotRequired[str]\n    referrerPolicy: NotRequired[ReferrerPolicy]\nclass NavigateToHistoryEntryParams(CommandParams):\n    \"\"\"Parameters for navigating to history entry.\"\"\"\n    entryId: int",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "NavigateToHistoryEntryParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class NavigateToHistoryEntryParams(CommandParams):\n    \"\"\"Parameters for navigating to history entry.\"\"\"\n    entryId: int\nclass PrintToPDFParams(CommandParams):\n    \"\"\"Parameters for printing to PDF.\"\"\"\n    landscape: NotRequired[bool]\n    displayHeaderFooter: NotRequired[bool]\n    printBackground: NotRequired[bool]\n    scale: NotRequired[float]\n    paperWidth: NotRequired[float]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "PrintToPDFParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class PrintToPDFParams(CommandParams):\n    \"\"\"Parameters for printing to PDF.\"\"\"\n    landscape: NotRequired[bool]\n    displayHeaderFooter: NotRequired[bool]\n    printBackground: NotRequired[bool]\n    scale: NotRequired[float]\n    paperWidth: NotRequired[float]\n    paperHeight: NotRequired[float]\n    marginTop: NotRequired[float]\n    marginBottom: NotRequired[float]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "RemoveScriptToEvaluateOnNewDocumentParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class RemoveScriptToEvaluateOnNewDocumentParams(CommandParams):\n    \"\"\"Parameters for removing script to evaluate on new document.\"\"\"\n    identifier: str\nclass ReloadParams(CommandParams):\n    \"\"\"Parameters for reloading page.\"\"\"\n    ignoreCache: NotRequired[bool]\n    scriptToEvaluateOnLoad: NotRequired[str]\n    loaderId: NotRequired[str]\nclass SetBypassCSPParams(CommandParams):\n    \"\"\"Parameters for setting bypass CSP.\"\"\"",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "ReloadParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class ReloadParams(CommandParams):\n    \"\"\"Parameters for reloading page.\"\"\"\n    ignoreCache: NotRequired[bool]\n    scriptToEvaluateOnLoad: NotRequired[str]\n    loaderId: NotRequired[str]\nclass SetBypassCSPParams(CommandParams):\n    \"\"\"Parameters for setting bypass CSP.\"\"\"\n    enabled: bool\nclass SetDocumentContentParams(CommandParams):\n    \"\"\"Parameters for setting document content.\"\"\"",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetBypassCSPParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetBypassCSPParams(CommandParams):\n    \"\"\"Parameters for setting bypass CSP.\"\"\"\n    enabled: bool\nclass SetDocumentContentParams(CommandParams):\n    \"\"\"Parameters for setting document content.\"\"\"\n    frameId: str\n    html: str\nclass SetInterceptFileChooserDialogParams(CommandParams):\n    \"\"\"Parameters for setting intercept file chooser dialog.\"\"\"\n    enabled: bool",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetDocumentContentParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetDocumentContentParams(CommandParams):\n    \"\"\"Parameters for setting document content.\"\"\"\n    frameId: str\n    html: str\nclass SetInterceptFileChooserDialogParams(CommandParams):\n    \"\"\"Parameters for setting intercept file chooser dialog.\"\"\"\n    enabled: bool\n    cancel: NotRequired[bool]\nclass SetLifecycleEventsEnabledParams(CommandParams):\n    \"\"\"Parameters for setting lifecycle events enabled.\"\"\"",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetInterceptFileChooserDialogParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetInterceptFileChooserDialogParams(CommandParams):\n    \"\"\"Parameters for setting intercept file chooser dialog.\"\"\"\n    enabled: bool\n    cancel: NotRequired[bool]\nclass SetLifecycleEventsEnabledParams(CommandParams):\n    \"\"\"Parameters for setting lifecycle events enabled.\"\"\"\n    enabled: bool\nclass AddCompilationCacheParams(CommandParams):\n    url: str\n    data: str",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetLifecycleEventsEnabledParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetLifecycleEventsEnabledParams(CommandParams):\n    \"\"\"Parameters for setting lifecycle events enabled.\"\"\"\n    enabled: bool\nclass AddCompilationCacheParams(CommandParams):\n    url: str\n    data: str\nclass CaptureSnapshotParams(CommandParams):\n    format: Literal['mhtml']\nclass GenerateTestReportParams(CommandParams):\n    message: str",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "AddCompilationCacheParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class AddCompilationCacheParams(CommandParams):\n    url: str\n    data: str\nclass CaptureSnapshotParams(CommandParams):\n    format: Literal['mhtml']\nclass GenerateTestReportParams(CommandParams):\n    message: str\n    group: NotRequired[str]\nclass GetAdScriptAncestryIdsParams(CommandParams):\n    frameId: str",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "CaptureSnapshotParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class CaptureSnapshotParams(CommandParams):\n    format: Literal['mhtml']\nclass GenerateTestReportParams(CommandParams):\n    message: str\n    group: NotRequired[str]\nclass GetAdScriptAncestryIdsParams(CommandParams):\n    frameId: str\nclass GetAppIdParams(CommandParams):\n    appId: NotRequired[str]\n    recommendedId: NotRequired[str]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GenerateTestReportParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class GenerateTestReportParams(CommandParams):\n    message: str\n    group: NotRequired[str]\nclass GetAdScriptAncestryIdsParams(CommandParams):\n    frameId: str\nclass GetAppIdParams(CommandParams):\n    appId: NotRequired[str]\n    recommendedId: NotRequired[str]\nclass GetInstallabilityErrorsParams(CommandParams):\n    installabilityErrors: NotRequired[list[InstallabilityError]]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetAdScriptAncestryIdsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class GetAdScriptAncestryIdsParams(CommandParams):\n    frameId: str\nclass GetAppIdParams(CommandParams):\n    appId: NotRequired[str]\n    recommendedId: NotRequired[str]\nclass GetInstallabilityErrorsParams(CommandParams):\n    installabilityErrors: NotRequired[list[InstallabilityError]]\nclass GetOriginTrialsParams(CommandParams):\n    frameId: str\nclass GetPermissionsPolicyStateParams(CommandParams):",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetAppIdParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class GetAppIdParams(CommandParams):\n    appId: NotRequired[str]\n    recommendedId: NotRequired[str]\nclass GetInstallabilityErrorsParams(CommandParams):\n    installabilityErrors: NotRequired[list[InstallabilityError]]\nclass GetOriginTrialsParams(CommandParams):\n    frameId: str\nclass GetPermissionsPolicyStateParams(CommandParams):\n    frameId: str\nclass GetResourceContentParams(CommandParams):",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetInstallabilityErrorsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class GetInstallabilityErrorsParams(CommandParams):\n    installabilityErrors: NotRequired[list[InstallabilityError]]\nclass GetOriginTrialsParams(CommandParams):\n    frameId: str\nclass GetPermissionsPolicyStateParams(CommandParams):\n    frameId: str\nclass GetResourceContentParams(CommandParams):\n    frameId: str\n    url: str\nclass ScreencastFrameAckParams(CommandParams):",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetOriginTrialsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class GetOriginTrialsParams(CommandParams):\n    frameId: str\nclass GetPermissionsPolicyStateParams(CommandParams):\n    frameId: str\nclass GetResourceContentParams(CommandParams):\n    frameId: str\n    url: str\nclass ScreencastFrameAckParams(CommandParams):\n    sessionId: str\nclass SearchInResourceParams(CommandParams):",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetPermissionsPolicyStateParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class GetPermissionsPolicyStateParams(CommandParams):\n    frameId: str\nclass GetResourceContentParams(CommandParams):\n    frameId: str\n    url: str\nclass ScreencastFrameAckParams(CommandParams):\n    sessionId: str\nclass SearchInResourceParams(CommandParams):\n    frameId: str\n    url: str",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "GetResourceContentParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class GetResourceContentParams(CommandParams):\n    frameId: str\n    url: str\nclass ScreencastFrameAckParams(CommandParams):\n    sessionId: str\nclass SearchInResourceParams(CommandParams):\n    frameId: str\n    url: str\n    query: str\n    caseSensitive: NotRequired[bool]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "ScreencastFrameAckParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class ScreencastFrameAckParams(CommandParams):\n    sessionId: str\nclass SearchInResourceParams(CommandParams):\n    frameId: str\n    url: str\n    query: str\n    caseSensitive: NotRequired[bool]\n    isRegex: NotRequired[bool]\nclass SetAdBlockingEnabledParams(CommandParams):\n    enabled: bool",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SearchInResourceParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SearchInResourceParams(CommandParams):\n    frameId: str\n    url: str\n    query: str\n    caseSensitive: NotRequired[bool]\n    isRegex: NotRequired[bool]\nclass SetAdBlockingEnabledParams(CommandParams):\n    enabled: bool\nclass SetFontFamiliesParams(CommandParams):\n    fontFamilies: FontFamilies",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetAdBlockingEnabledParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetAdBlockingEnabledParams(CommandParams):\n    enabled: bool\nclass SetFontFamiliesParams(CommandParams):\n    fontFamilies: FontFamilies\n    forScripts: list[ScriptFontFamilies]\nclass SetFontSizesParams(CommandParams):\n    fontSizes: FontSizes\nclass SetPrerenderingAllowedParams(CommandParams):\n    allowed: bool\nclass SetRPHRegistrationModeParams(CommandParams):",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetFontFamiliesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetFontFamiliesParams(CommandParams):\n    fontFamilies: FontFamilies\n    forScripts: list[ScriptFontFamilies]\nclass SetFontSizesParams(CommandParams):\n    fontSizes: FontSizes\nclass SetPrerenderingAllowedParams(CommandParams):\n    allowed: bool\nclass SetRPHRegistrationModeParams(CommandParams):\n    mode: AutoResponseMode\nclass SetSPCTransactionModeParams(CommandParams):",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetFontSizesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetFontSizesParams(CommandParams):\n    fontSizes: FontSizes\nclass SetPrerenderingAllowedParams(CommandParams):\n    allowed: bool\nclass SetRPHRegistrationModeParams(CommandParams):\n    mode: AutoResponseMode\nclass SetSPCTransactionModeParams(CommandParams):\n    mode: AutoResponseMode\nclass SetWebLifecycleStateParams(CommandParams):\n    state: WebLifecycleState",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetPrerenderingAllowedParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetPrerenderingAllowedParams(CommandParams):\n    allowed: bool\nclass SetRPHRegistrationModeParams(CommandParams):\n    mode: AutoResponseMode\nclass SetSPCTransactionModeParams(CommandParams):\n    mode: AutoResponseMode\nclass SetWebLifecycleStateParams(CommandParams):\n    state: WebLifecycleState\nclass StartScreencastParams(CommandParams):\n    format: ScreencastFormat",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetRPHRegistrationModeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetRPHRegistrationModeParams(CommandParams):\n    mode: AutoResponseMode\nclass SetSPCTransactionModeParams(CommandParams):\n    mode: AutoResponseMode\nclass SetWebLifecycleStateParams(CommandParams):\n    state: WebLifecycleState\nclass StartScreencastParams(CommandParams):\n    format: ScreencastFormat\n    quality: NotRequired[int]\n    maxWidth: NotRequired[int]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetSPCTransactionModeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetSPCTransactionModeParams(CommandParams):\n    mode: AutoResponseMode\nclass SetWebLifecycleStateParams(CommandParams):\n    state: WebLifecycleState\nclass StartScreencastParams(CommandParams):\n    format: ScreencastFormat\n    quality: NotRequired[int]\n    maxWidth: NotRequired[int]\n    maxHeight: NotRequired[int]\n    everyNthFrame: NotRequired[int]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "SetWebLifecycleStateParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class SetWebLifecycleStateParams(CommandParams):\n    state: WebLifecycleState\nclass StartScreencastParams(CommandParams):\n    format: ScreencastFormat\n    quality: NotRequired[int]\n    maxWidth: NotRequired[int]\n    maxHeight: NotRequired[int]\n    everyNthFrame: NotRequired[int]\nclass CompilationCacheParams(CommandParams):\n    url: str",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "StartScreencastParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class StartScreencastParams(CommandParams):\n    format: ScreencastFormat\n    quality: NotRequired[int]\n    maxWidth: NotRequired[int]\n    maxHeight: NotRequired[int]\n    everyNthFrame: NotRequired[int]\nclass CompilationCacheParams(CommandParams):\n    url: str\n    eager: NotRequired[bool]\nclass ProduceCompilationCacheParams(CommandParams):",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "CompilationCacheParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class CompilationCacheParams(CommandParams):\n    url: str\n    eager: NotRequired[bool]\nclass ProduceCompilationCacheParams(CommandParams):\n    scripts: list[CompilationCacheParams]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "ProduceCompilationCacheParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.params",
        "description": "pydoll.protocol.page.params",
        "peekOfCode": "class ProduceCompilationCacheParams(CommandParams):\n    scripts: list[CompilationCacheParams]",
        "detail": "pydoll.protocol.page.params",
        "documentation": {}
    },
    {
        "label": "AddScriptToEvaluateOnNewDocumentResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class AddScriptToEvaluateOnNewDocumentResultDict(TypedDict):\n    \"\"\"Response result for addScriptToEvaluateOnNewDocument command.\"\"\"\n    identifier: str\nclass CaptureScreenshotResultDict(TypedDict):\n    \"\"\"Response result for captureScreenshot command.\"\"\"\n    data: str  # Base64-encoded image data\nclass CreateIsolatedWorldResultDict(TypedDict):\n    \"\"\"Response result for createIsolatedWorld command.\"\"\"\n    executionContextId: int\nclass GetAppManifestResultDict(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CaptureScreenshotResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class CaptureScreenshotResultDict(TypedDict):\n    \"\"\"Response result for captureScreenshot command.\"\"\"\n    data: str  # Base64-encoded image data\nclass CreateIsolatedWorldResultDict(TypedDict):\n    \"\"\"Response result for createIsolatedWorld command.\"\"\"\n    executionContextId: int\nclass GetAppManifestResultDict(TypedDict):\n    \"\"\"Response result for getAppManifest command.\"\"\"\n    url: str\n    errors: list[AppManifestError]",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CreateIsolatedWorldResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class CreateIsolatedWorldResultDict(TypedDict):\n    \"\"\"Response result for createIsolatedWorld command.\"\"\"\n    executionContextId: int\nclass GetAppManifestResultDict(TypedDict):\n    \"\"\"Response result for getAppManifest command.\"\"\"\n    url: str\n    errors: list[AppManifestError]\n    data: str  # Manifest content as string\n    manifest: NotRequired[WebAppManifest]\nclass GetFrameTreeResultDict(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAppManifestResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetAppManifestResultDict(TypedDict):\n    \"\"\"Response result for getAppManifest command.\"\"\"\n    url: str\n    errors: list[AppManifestError]\n    data: str  # Manifest content as string\n    manifest: NotRequired[WebAppManifest]\nclass GetFrameTreeResultDict(TypedDict):\n    \"\"\"Response result for getFrameTree command.\"\"\"\n    frameTree: FrameTree\nclass GetLayoutMetricsResultDict(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetFrameTreeResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetFrameTreeResultDict(TypedDict):\n    \"\"\"Response result for getFrameTree command.\"\"\"\n    frameTree: FrameTree\nclass GetLayoutMetricsResultDict(TypedDict):\n    \"\"\"Response result for getLayoutMetrics command.\"\"\"\n    cssLayoutViewport: LayoutViewport\n    cssVisualViewport: VisualViewport\n    cssContentSize: Rect\nclass GetNavigationHistoryResultDict(TypedDict):\n    \"\"\"Response result for getNavigationHistory command.\"\"\"",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetLayoutMetricsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetLayoutMetricsResultDict(TypedDict):\n    \"\"\"Response result for getLayoutMetrics command.\"\"\"\n    cssLayoutViewport: LayoutViewport\n    cssVisualViewport: VisualViewport\n    cssContentSize: Rect\nclass GetNavigationHistoryResultDict(TypedDict):\n    \"\"\"Response result for getNavigationHistory command.\"\"\"\n    currentIndex: int\n    entries: list[NavigationEntry]\nclass NavigateResultDict(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetNavigationHistoryResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetNavigationHistoryResultDict(TypedDict):\n    \"\"\"Response result for getNavigationHistory command.\"\"\"\n    currentIndex: int\n    entries: list[NavigationEntry]\nclass NavigateResultDict(TypedDict):\n    \"\"\"Response result for navigate command.\"\"\"\n    frameId: str\n    loaderId: NotRequired[str]\n    errorText: NotRequired[str]\nclass PrintToPDFResultDict(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "NavigateResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class NavigateResultDict(TypedDict):\n    \"\"\"Response result for navigate command.\"\"\"\n    frameId: str\n    loaderId: NotRequired[str]\n    errorText: NotRequired[str]\nclass PrintToPDFResultDict(TypedDict):\n    \"\"\"Response result for printToPDF command.\"\"\"\n    data: str  # Base64-encoded pdf data\n    stream: NotRequired[str]  # A handle to the stream that holds the PDF data\nclass CaptureSnapshotResultDict(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "PrintToPDFResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class PrintToPDFResultDict(TypedDict):\n    \"\"\"Response result for printToPDF command.\"\"\"\n    data: str  # Base64-encoded pdf data\n    stream: NotRequired[str]  # A handle to the stream that holds the PDF data\nclass CaptureSnapshotResultDict(TypedDict):\n    \"\"\"Response result for captureSnapshot command.\"\"\"\n    data: str  # Base64-encoded image data\nclass GetAdScriptAncestryIdsResultDict(TypedDict):\n    \"\"\"Response result for getAdScriptAncestryIds command.\"\"\"\n    adScriptAncestryIds: list[AdScriptId]",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CaptureSnapshotResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class CaptureSnapshotResultDict(TypedDict):\n    \"\"\"Response result for captureSnapshot command.\"\"\"\n    data: str  # Base64-encoded image data\nclass GetAdScriptAncestryIdsResultDict(TypedDict):\n    \"\"\"Response result for getAdScriptAncestryIds command.\"\"\"\n    adScriptAncestryIds: list[AdScriptId]\nclass GetAppIdResultDict(TypedDict):\n    \"\"\"Response result for getAppId command.\"\"\"\n    appId: NotRequired[str]\n    recommendedId: NotRequired[str]",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAdScriptAncestryIdsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetAdScriptAncestryIdsResultDict(TypedDict):\n    \"\"\"Response result for getAdScriptAncestryIds command.\"\"\"\n    adScriptAncestryIds: list[AdScriptId]\nclass GetAppIdResultDict(TypedDict):\n    \"\"\"Response result for getAppId command.\"\"\"\n    appId: NotRequired[str]\n    recommendedId: NotRequired[str]\nclass GetInstallabilityErrorsResultDict(TypedDict):\n    \"\"\"Response result for getInstallabilityErrors command.\"\"\"\n    installabilityErrors: list[InstallabilityError]",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAppIdResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetAppIdResultDict(TypedDict):\n    \"\"\"Response result for getAppId command.\"\"\"\n    appId: NotRequired[str]\n    recommendedId: NotRequired[str]\nclass GetInstallabilityErrorsResultDict(TypedDict):\n    \"\"\"Response result for getInstallabilityErrors command.\"\"\"\n    installabilityErrors: list[InstallabilityError]\nclass GetOriginTrialsResultDict(TypedDict):\n    \"\"\"Response result for getOriginTrials command.\"\"\"\n    originTrials: list[OriginTrial]",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetInstallabilityErrorsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetInstallabilityErrorsResultDict(TypedDict):\n    \"\"\"Response result for getInstallabilityErrors command.\"\"\"\n    installabilityErrors: list[InstallabilityError]\nclass GetOriginTrialsResultDict(TypedDict):\n    \"\"\"Response result for getOriginTrials command.\"\"\"\n    originTrials: list[OriginTrial]\nclass GetPermissionsPolicyStateResultDict(TypedDict):\n    \"\"\"Response result for getPermissionsPolicyState command.\"\"\"\n    states: list[PermissionsPolicyFeatureState]\nclass GetResourceContentResultDict(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetOriginTrialsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetOriginTrialsResultDict(TypedDict):\n    \"\"\"Response result for getOriginTrials command.\"\"\"\n    originTrials: list[OriginTrial]\nclass GetPermissionsPolicyStateResultDict(TypedDict):\n    \"\"\"Response result for getPermissionsPolicyState command.\"\"\"\n    states: list[PermissionsPolicyFeatureState]\nclass GetResourceContentResultDict(TypedDict):\n    \"\"\"Response result for getResourceContent command.\"\"\"\n    content: str\n    base64Encoded: bool",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetPermissionsPolicyStateResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetPermissionsPolicyStateResultDict(TypedDict):\n    \"\"\"Response result for getPermissionsPolicyState command.\"\"\"\n    states: list[PermissionsPolicyFeatureState]\nclass GetResourceContentResultDict(TypedDict):\n    \"\"\"Response result for getResourceContent command.\"\"\"\n    content: str\n    base64Encoded: bool\nclass GetResourceTreeResultDict(TypedDict):\n    \"\"\"Response result for getResourceTree command.\"\"\"\n    frameTree: FrameResourceTree",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetResourceContentResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetResourceContentResultDict(TypedDict):\n    \"\"\"Response result for getResourceContent command.\"\"\"\n    content: str\n    base64Encoded: bool\nclass GetResourceTreeResultDict(TypedDict):\n    \"\"\"Response result for getResourceTree command.\"\"\"\n    frameTree: FrameResourceTree\nclass SearchInResourceResultDict(TypedDict):\n    \"\"\"Response result for searchInResource command.\"\"\"\n    result: list[SearchMatch]",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetResourceTreeResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetResourceTreeResultDict(TypedDict):\n    \"\"\"Response result for getResourceTree command.\"\"\"\n    frameTree: FrameResourceTree\nclass SearchInResourceResultDict(TypedDict):\n    \"\"\"Response result for searchInResource command.\"\"\"\n    result: list[SearchMatch]\n# Response classes that inherit from Response\nclass AddScriptToEvaluateOnNewDocumentResponse(TypedDict):\n    \"\"\"Response for addScriptToEvaluateOnNewDocument command.\"\"\"\n    result: AddScriptToEvaluateOnNewDocumentResultDict",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "SearchInResourceResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class SearchInResourceResultDict(TypedDict):\n    \"\"\"Response result for searchInResource command.\"\"\"\n    result: list[SearchMatch]\n# Response classes that inherit from Response\nclass AddScriptToEvaluateOnNewDocumentResponse(TypedDict):\n    \"\"\"Response for addScriptToEvaluateOnNewDocument command.\"\"\"\n    result: AddScriptToEvaluateOnNewDocumentResultDict\nclass CaptureScreenshotResponse(TypedDict):\n    \"\"\"Response for captureScreenshot command.\"\"\"\n    result: CaptureScreenshotResultDict",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "AddScriptToEvaluateOnNewDocumentResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class AddScriptToEvaluateOnNewDocumentResponse(TypedDict):\n    \"\"\"Response for addScriptToEvaluateOnNewDocument command.\"\"\"\n    result: AddScriptToEvaluateOnNewDocumentResultDict\nclass CaptureScreenshotResponse(TypedDict):\n    \"\"\"Response for captureScreenshot command.\"\"\"\n    result: CaptureScreenshotResultDict\nclass CreateIsolatedWorldResponse(TypedDict):\n    \"\"\"Response for createIsolatedWorld command.\"\"\"\n    result: CreateIsolatedWorldResultDict\nclass GetAppManifestResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CaptureScreenshotResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class CaptureScreenshotResponse(TypedDict):\n    \"\"\"Response for captureScreenshot command.\"\"\"\n    result: CaptureScreenshotResultDict\nclass CreateIsolatedWorldResponse(TypedDict):\n    \"\"\"Response for createIsolatedWorld command.\"\"\"\n    result: CreateIsolatedWorldResultDict\nclass GetAppManifestResponse(TypedDict):\n    \"\"\"Response for getAppManifest command.\"\"\"\n    result: GetAppManifestResultDict\nclass GetFrameTreeResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CreateIsolatedWorldResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class CreateIsolatedWorldResponse(TypedDict):\n    \"\"\"Response for createIsolatedWorld command.\"\"\"\n    result: CreateIsolatedWorldResultDict\nclass GetAppManifestResponse(TypedDict):\n    \"\"\"Response for getAppManifest command.\"\"\"\n    result: GetAppManifestResultDict\nclass GetFrameTreeResponse(TypedDict):\n    \"\"\"Response for getFrameTree command.\"\"\"\n    result: GetFrameTreeResultDict\nclass GetLayoutMetricsResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAppManifestResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetAppManifestResponse(TypedDict):\n    \"\"\"Response for getAppManifest command.\"\"\"\n    result: GetAppManifestResultDict\nclass GetFrameTreeResponse(TypedDict):\n    \"\"\"Response for getFrameTree command.\"\"\"\n    result: GetFrameTreeResultDict\nclass GetLayoutMetricsResponse(TypedDict):\n    \"\"\"Response for getLayoutMetrics command.\"\"\"\n    result: GetLayoutMetricsResultDict\nclass GetNavigationHistoryResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetFrameTreeResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetFrameTreeResponse(TypedDict):\n    \"\"\"Response for getFrameTree command.\"\"\"\n    result: GetFrameTreeResultDict\nclass GetLayoutMetricsResponse(TypedDict):\n    \"\"\"Response for getLayoutMetrics command.\"\"\"\n    result: GetLayoutMetricsResultDict\nclass GetNavigationHistoryResponse(TypedDict):\n    \"\"\"Response for getNavigationHistory command.\"\"\"\n    result: GetNavigationHistoryResultDict\nclass NavigateResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetLayoutMetricsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetLayoutMetricsResponse(TypedDict):\n    \"\"\"Response for getLayoutMetrics command.\"\"\"\n    result: GetLayoutMetricsResultDict\nclass GetNavigationHistoryResponse(TypedDict):\n    \"\"\"Response for getNavigationHistory command.\"\"\"\n    result: GetNavigationHistoryResultDict\nclass NavigateResponse(TypedDict):\n    \"\"\"Response for navigate command.\"\"\"\n    result: NavigateResultDict\nclass PrintToPDFResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetNavigationHistoryResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetNavigationHistoryResponse(TypedDict):\n    \"\"\"Response for getNavigationHistory command.\"\"\"\n    result: GetNavigationHistoryResultDict\nclass NavigateResponse(TypedDict):\n    \"\"\"Response for navigate command.\"\"\"\n    result: NavigateResultDict\nclass PrintToPDFResponse(TypedDict):\n    \"\"\"Response for printToPDF command.\"\"\"\n    result: PrintToPDFResultDict\nclass CaptureSnapshotResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "NavigateResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class NavigateResponse(TypedDict):\n    \"\"\"Response for navigate command.\"\"\"\n    result: NavigateResultDict\nclass PrintToPDFResponse(TypedDict):\n    \"\"\"Response for printToPDF command.\"\"\"\n    result: PrintToPDFResultDict\nclass CaptureSnapshotResponse(TypedDict):\n    \"\"\"Response for captureSnapshot command.\"\"\"\n    result: CaptureSnapshotResultDict\nclass GetAdScriptAncestryIdsResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "PrintToPDFResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class PrintToPDFResponse(TypedDict):\n    \"\"\"Response for printToPDF command.\"\"\"\n    result: PrintToPDFResultDict\nclass CaptureSnapshotResponse(TypedDict):\n    \"\"\"Response for captureSnapshot command.\"\"\"\n    result: CaptureSnapshotResultDict\nclass GetAdScriptAncestryIdsResponse(TypedDict):\n    \"\"\"Response for getAdScriptAncestryIds command.\"\"\"\n    result: GetAdScriptAncestryIdsResultDict\nclass GetAppIdResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "CaptureSnapshotResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class CaptureSnapshotResponse(TypedDict):\n    \"\"\"Response for captureSnapshot command.\"\"\"\n    result: CaptureSnapshotResultDict\nclass GetAdScriptAncestryIdsResponse(TypedDict):\n    \"\"\"Response for getAdScriptAncestryIds command.\"\"\"\n    result: GetAdScriptAncestryIdsResultDict\nclass GetAppIdResponse(TypedDict):\n    \"\"\"Response for getAppId command.\"\"\"\n    result: GetAppIdResultDict\nclass GetInstallabilityErrorsResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAdScriptAncestryIdsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetAdScriptAncestryIdsResponse(TypedDict):\n    \"\"\"Response for getAdScriptAncestryIds command.\"\"\"\n    result: GetAdScriptAncestryIdsResultDict\nclass GetAppIdResponse(TypedDict):\n    \"\"\"Response for getAppId command.\"\"\"\n    result: GetAppIdResultDict\nclass GetInstallabilityErrorsResponse(TypedDict):\n    \"\"\"Response for getInstallabilityErrors command.\"\"\"\n    result: GetInstallabilityErrorsResultDict\nclass GetOriginTrialsResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetAppIdResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetAppIdResponse(TypedDict):\n    \"\"\"Response for getAppId command.\"\"\"\n    result: GetAppIdResultDict\nclass GetInstallabilityErrorsResponse(TypedDict):\n    \"\"\"Response for getInstallabilityErrors command.\"\"\"\n    result: GetInstallabilityErrorsResultDict\nclass GetOriginTrialsResponse(TypedDict):\n    \"\"\"Response for getOriginTrials command.\"\"\"\n    result: GetOriginTrialsResultDict\nclass GetPermissionsPolicyStateResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetInstallabilityErrorsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetInstallabilityErrorsResponse(TypedDict):\n    \"\"\"Response for getInstallabilityErrors command.\"\"\"\n    result: GetInstallabilityErrorsResultDict\nclass GetOriginTrialsResponse(TypedDict):\n    \"\"\"Response for getOriginTrials command.\"\"\"\n    result: GetOriginTrialsResultDict\nclass GetPermissionsPolicyStateResponse(TypedDict):\n    \"\"\"Response for getPermissionsPolicyState command.\"\"\"\n    result: GetPermissionsPolicyStateResultDict\nclass GetResourceContentResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetOriginTrialsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetOriginTrialsResponse(TypedDict):\n    \"\"\"Response for getOriginTrials command.\"\"\"\n    result: GetOriginTrialsResultDict\nclass GetPermissionsPolicyStateResponse(TypedDict):\n    \"\"\"Response for getPermissionsPolicyState command.\"\"\"\n    result: GetPermissionsPolicyStateResultDict\nclass GetResourceContentResponse(TypedDict):\n    \"\"\"Response for getResourceContent command.\"\"\"\n    result: GetResourceContentResultDict\nclass GetResourceTreeResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetPermissionsPolicyStateResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetPermissionsPolicyStateResponse(TypedDict):\n    \"\"\"Response for getPermissionsPolicyState command.\"\"\"\n    result: GetPermissionsPolicyStateResultDict\nclass GetResourceContentResponse(TypedDict):\n    \"\"\"Response for getResourceContent command.\"\"\"\n    result: GetResourceContentResultDict\nclass GetResourceTreeResponse(TypedDict):\n    \"\"\"Response for getResourceTree command.\"\"\"\n    result: GetResourceTreeResultDict\nclass SearchInResourceResponse(TypedDict):",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetResourceContentResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetResourceContentResponse(TypedDict):\n    \"\"\"Response for getResourceContent command.\"\"\"\n    result: GetResourceContentResultDict\nclass GetResourceTreeResponse(TypedDict):\n    \"\"\"Response for getResourceTree command.\"\"\"\n    result: GetResourceTreeResultDict\nclass SearchInResourceResponse(TypedDict):\n    \"\"\"Response for searchInResource command.\"\"\"\n    result: SearchInResourceResultDict",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "GetResourceTreeResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class GetResourceTreeResponse(TypedDict):\n    \"\"\"Response for getResourceTree command.\"\"\"\n    result: GetResourceTreeResultDict\nclass SearchInResourceResponse(TypedDict):\n    \"\"\"Response for searchInResource command.\"\"\"\n    result: SearchInResourceResultDict",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "SearchInResourceResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.page.responses",
        "description": "pydoll.protocol.page.responses",
        "peekOfCode": "class SearchInResourceResponse(TypedDict):\n    \"\"\"Response for searchInResource command.\"\"\"\n    result: SearchInResourceResultDict",
        "detail": "pydoll.protocol.page.responses",
        "documentation": {}
    },
    {
        "label": "Viewport",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class Viewport(TypedDict):\n    \"\"\"Viewport for capturing screenshot or clip rectangle.\"\"\"\n    x: float\n    y: float\n    width: float\n    height: float\n    scale: NotRequired[float]\nclass InstallabilityErrorArgument(TypedDict):\n    name: str\n    value: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "InstallabilityErrorArgument",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class InstallabilityErrorArgument(TypedDict):\n    name: str\n    value: str\nclass InstallabilityError(TypedDict):\n    errorId: str\n    errorArguments: list[InstallabilityErrorArgument]\nclass FontFamilies(TypedDict):\n    standard: NotRequired[str]\n    fixed: NotRequired[str]\n    serif: NotRequired[str]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "InstallabilityError",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class InstallabilityError(TypedDict):\n    errorId: str\n    errorArguments: list[InstallabilityErrorArgument]\nclass FontFamilies(TypedDict):\n    standard: NotRequired[str]\n    fixed: NotRequired[str]\n    serif: NotRequired[str]\n    sansSerif: NotRequired[str]\n    cursive: NotRequired[str]\n    fantasy: NotRequired[str]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FontFamilies",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class FontFamilies(TypedDict):\n    standard: NotRequired[str]\n    fixed: NotRequired[str]\n    serif: NotRequired[str]\n    sansSerif: NotRequired[str]\n    cursive: NotRequired[str]\n    fantasy: NotRequired[str]\n    math: NotRequired[str]\nclass ScriptFontFamilies(TypedDict):\n    script: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "ScriptFontFamilies",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class ScriptFontFamilies(TypedDict):\n    script: str\n    fontFamilies: FontFamilies\nclass FontSizes(TypedDict):\n    standard: NotRequired[int]\n    fixed: NotRequired[int]\nclass AppManifestError(TypedDict):\n    \"\"\"App manifest error structure.\"\"\"\n    message: str\n    critical: NotRequired[int]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FontSizes",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class FontSizes(TypedDict):\n    standard: NotRequired[int]\n    fixed: NotRequired[int]\nclass AppManifestError(TypedDict):\n    \"\"\"App manifest error structure.\"\"\"\n    message: str\n    critical: NotRequired[int]\n    line: NotRequired[int]\n    column: NotRequired[int]\nclass ImageResource(TypedDict):",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "AppManifestError",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class AppManifestError(TypedDict):\n    \"\"\"App manifest error structure.\"\"\"\n    message: str\n    critical: NotRequired[int]\n    line: NotRequired[int]\n    column: NotRequired[int]\nclass ImageResource(TypedDict):\n    url: str\n    sizes: NotRequired[str]\n    type: NotRequired[str]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "ImageResource",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class ImageResource(TypedDict):\n    url: str\n    sizes: NotRequired[str]\n    type: NotRequired[str]\nclass FileFilter(TypedDict):\n    name: NotRequired[str]\n    accepts: NotRequired[list[str]]\nclass FileHandler(TypedDict):\n    action: str\n    name: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FileFilter",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class FileFilter(TypedDict):\n    name: NotRequired[str]\n    accepts: NotRequired[list[str]]\nclass FileHandler(TypedDict):\n    action: str\n    name: str\n    icons: NotRequired[list[ImageResource]]\n    accepts: NotRequired[list[FileFilter]]\n    launchType: NotRequired[str]\nclass LaunchHandler(TypedDict):",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class FileHandler(TypedDict):\n    action: str\n    name: str\n    icons: NotRequired[list[ImageResource]]\n    accepts: NotRequired[list[FileFilter]]\n    launchType: NotRequired[str]\nclass LaunchHandler(TypedDict):\n    clientMode: str\nclass ProtocolHandler(TypedDict):\n    protocol: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "LaunchHandler",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class LaunchHandler(TypedDict):\n    clientMode: str\nclass ProtocolHandler(TypedDict):\n    protocol: str\n    url: str\nclass RelatedApplication(TypedDict):\n    id: str\n    url: str\nclass ScopeExtension(TypedDict):\n    origin: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "ProtocolHandler",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class ProtocolHandler(TypedDict):\n    protocol: str\n    url: str\nclass RelatedApplication(TypedDict):\n    id: str\n    url: str\nclass ScopeExtension(TypedDict):\n    origin: str\n    hasOriginWildcard: bool\nclass Screenshot(TypedDict):",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "RelatedApplication",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class RelatedApplication(TypedDict):\n    id: str\n    url: str\nclass ScopeExtension(TypedDict):\n    origin: str\n    hasOriginWildcard: bool\nclass Screenshot(TypedDict):\n    image: ImageResource\n    formFactor: str\n    label: NotRequired[str]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "ScopeExtension",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class ScopeExtension(TypedDict):\n    origin: str\n    hasOriginWildcard: bool\nclass Screenshot(TypedDict):\n    image: ImageResource\n    formFactor: str\n    label: NotRequired[str]\nclass ShareTarget(TypedDict):\n    action: str\n    method: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "Screenshot",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class Screenshot(TypedDict):\n    image: ImageResource\n    formFactor: str\n    label: NotRequired[str]\nclass ShareTarget(TypedDict):\n    action: str\n    method: str\n    enctype: str\n    title: NotRequired[str]\n    text: NotRequired[str]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "ShareTarget",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class ShareTarget(TypedDict):\n    action: str\n    method: str\n    enctype: str\n    title: NotRequired[str]\n    text: NotRequired[str]\n    url: NotRequired[str]\n    files: NotRequired[list[FileFilter]]\nclass Shortcut(TypedDict):\n    name: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "Shortcut",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class Shortcut(TypedDict):\n    name: str\n    url: str\nclass WebAppManifest(TypedDict):\n    backgroundColor: NotRequired[str]\n    description: NotRequired[str]\n    dir: NotRequired[str]\n    display: NotRequired[str]\n    displayOverrides: NotRequired[list[str]]\n    fileHandlers: NotRequired[list[FileHandler]]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "WebAppManifest",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class WebAppManifest(TypedDict):\n    backgroundColor: NotRequired[str]\n    description: NotRequired[str]\n    dir: NotRequired[str]\n    display: NotRequired[str]\n    displayOverrides: NotRequired[list[str]]\n    fileHandlers: NotRequired[list[FileHandler]]\n    icons: NotRequired[list[ImageResource]]\n    id: NotRequired[str]\n    lang: NotRequired[str]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "Frame",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class Frame(TypedDict):\n    \"\"\"Information about a frame.\"\"\"\n    id: str\n    loaderId: NotRequired[str]\n    url: str\n    securityOrigin: NotRequired[str]\n    mimeType: NotRequired[str]\n    unreachableUrl: NotRequired[str]\nclass FrameResource(TypedDict):\n    url: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FrameResource",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class FrameResource(TypedDict):\n    url: str\n    type: ResourceType\n    mimeType: str\n    lastModified: NotRequired[str]\n    contentSize: NotRequired[float]\n    failed: NotRequired[bool]\n    canceled: NotRequired[bool]\nclass FrameResourceTree(TypedDict):\n    \"\"\"Information about frame hierarchy.\"\"\"",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FrameResourceTree",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class FrameResourceTree(TypedDict):\n    \"\"\"Information about frame hierarchy.\"\"\"\n    frame: Frame\n    childFrames: NotRequired[list['FrameResourceTree']]\n    resources: NotRequired[list[FrameResource]]\nclass FrameTree(TypedDict):\n    frame: Frame\n    childFrames: NotRequired[list['FrameTree']]\nclass LayoutViewport(TypedDict):\n    \"\"\"Layout viewport position and dimensions.\"\"\"",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "FrameTree",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class FrameTree(TypedDict):\n    frame: Frame\n    childFrames: NotRequired[list['FrameTree']]\nclass LayoutViewport(TypedDict):\n    \"\"\"Layout viewport position and dimensions.\"\"\"\n    pageX: int\n    pageY: int\n    clientWidth: int\n    clientHeight: int\nclass VisualViewport(TypedDict):",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "LayoutViewport",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class LayoutViewport(TypedDict):\n    \"\"\"Layout viewport position and dimensions.\"\"\"\n    pageX: int\n    pageY: int\n    clientWidth: int\n    clientHeight: int\nclass VisualViewport(TypedDict):\n    \"\"\"Visual viewport position, dimensions, and scale.\"\"\"\n    offsetX: float\n    offsetY: float",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "VisualViewport",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class VisualViewport(TypedDict):\n    \"\"\"Visual viewport position, dimensions, and scale.\"\"\"\n    offsetX: float\n    offsetY: float\n    pageX: float\n    pageY: float\n    clientWidth: float\n    clientHeight: float\n    scale: float\n    zoom: NotRequired[float]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "NavigationEntry",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class NavigationEntry(TypedDict):\n    \"\"\"Navigation history entry.\"\"\"\n    id: int\n    url: str\n    userTypedURL: str\n    title: str\n    transitionType: TransitionType\nclass AdScriptId(TypedDict):\n    scriptId: str\n    debuggerId: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "AdScriptId",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class AdScriptId(TypedDict):\n    scriptId: str\n    debuggerId: str\nclass OriginTrialToken(TypedDict):\n    origin: str\n    matchSubDomains: bool\n    trialName: str\n    expiryTime: str\n    isThirdParty: bool\n    usageRestriction: NotRequired[OriginTrialUsageRestriction]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "OriginTrialToken",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class OriginTrialToken(TypedDict):\n    origin: str\n    matchSubDomains: bool\n    trialName: str\n    expiryTime: str\n    isThirdParty: bool\n    usageRestriction: NotRequired[OriginTrialUsageRestriction]\nclass OriginTrialTokenWithStatus(TypedDict):\n    rawTokenText: str\n    parsedTokenText: NotRequired[OriginTrialToken]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "OriginTrialTokenWithStatus",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class OriginTrialTokenWithStatus(TypedDict):\n    rawTokenText: str\n    parsedTokenText: NotRequired[OriginTrialToken]\n    status: OriginTrialTokenStatus\nclass OriginTrial(TypedDict):\n    trialName: str\n    status: OriginTrialStatus\n    tokenWithStatus: list[OriginTrialTokenWithStatus]\nclass PermissionsPolicyBlockLocator(TypedDict):\n    frameId: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "OriginTrial",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class OriginTrial(TypedDict):\n    trialName: str\n    status: OriginTrialStatus\n    tokenWithStatus: list[OriginTrialTokenWithStatus]\nclass PermissionsPolicyBlockLocator(TypedDict):\n    frameId: str\n    blockReason: PermissionsPolicyBlockReason\nclass PermissionsPolicyFeatureState(TypedDict):\n    feature: PermissionsPolicyFeature\n    allowed: bool",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "PermissionsPolicyBlockLocator",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class PermissionsPolicyBlockLocator(TypedDict):\n    frameId: str\n    blockReason: PermissionsPolicyBlockReason\nclass PermissionsPolicyFeatureState(TypedDict):\n    feature: PermissionsPolicyFeature\n    allowed: bool\n    locator: NotRequired[PermissionsPolicyBlockLocator]\nclass JavascriptDialogOpeningEventParams(TypedDict):\n    url: str\n    frameId: str",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "PermissionsPolicyFeatureState",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class PermissionsPolicyFeatureState(TypedDict):\n    feature: PermissionsPolicyFeature\n    allowed: bool\n    locator: NotRequired[PermissionsPolicyBlockLocator]\nclass JavascriptDialogOpeningEventParams(TypedDict):\n    url: str\n    frameId: str\n    message: str\n    type: DialogType\n    hasBrowserHandler: bool",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "JavascriptDialogOpeningEventParams",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class JavascriptDialogOpeningEventParams(TypedDict):\n    url: str\n    frameId: str\n    message: str\n    type: DialogType\n    hasBrowserHandler: bool\n    defaultPrompt: NotRequired[str]\nclass JavascriptDialogOpeningEvent(TypedDict):\n    method: str\n    params: NotRequired[JavascriptDialogOpeningEventParams]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "JavascriptDialogOpeningEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.page.types",
        "description": "pydoll.protocol.page.types",
        "peekOfCode": "class JavascriptDialogOpeningEvent(TypedDict):\n    method: str\n    params: NotRequired[JavascriptDialogOpeningEventParams]",
        "detail": "pydoll.protocol.page.types",
        "documentation": {}
    },
    {
        "label": "RuntimeEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.events",
        "description": "pydoll.protocol.runtime.events",
        "peekOfCode": "class RuntimeEvent(str, Enum):\n    \"\"\"\n    Events from the Runtime domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of Runtime-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about JavaScript execution, console API calls, exceptions, and execution contexts.\n    \"\"\"\n    CONSOLE_API_CALLED = 'Runtime.consoleAPICalled'\n    \"\"\"\n    Issued when console API was called.",
        "detail": "pydoll.protocol.runtime.events",
        "documentation": {}
    },
    {
        "label": "RuntimeMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.methods",
        "description": "pydoll.protocol.runtime.methods",
        "peekOfCode": "class RuntimeMethod(str, Enum):\n    ADD_BINDING = 'Runtime.addBinding'\n    AWAIT_PROMISE = 'Runtime.awaitPromise'\n    CALL_FUNCTION_ON = 'Runtime.callFunctionOn'\n    COMPILE_SCRIPT = 'Runtime.compileScript'\n    DISABLE = 'Runtime.disable'\n    DISCARD_CONSOLE_ENTRIES = 'Runtime.discardConsoleEntries'\n    ENABLE = 'Runtime.enable'\n    EVALUATE = 'Runtime.evaluate'\n    GET_PROPERTIES = 'Runtime.getProperties'",
        "detail": "pydoll.protocol.runtime.methods",
        "documentation": {}
    },
    {
        "label": "AddBindingParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class AddBindingParams(CommandParams):\n    name: str\n    executionContextName: NotRequired[str]\nclass AwaitPromiseParams(CommandParams):\n    promiseObjectId: str\n    returnByValue: NotRequired[bool]\n    generatePreview: NotRequired[bool]\nclass CallFunctionOnParams(CommandParams):\n    functionDeclaration: str\n    objectId: NotRequired[str]",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "AwaitPromiseParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class AwaitPromiseParams(CommandParams):\n    promiseObjectId: str\n    returnByValue: NotRequired[bool]\n    generatePreview: NotRequired[bool]\nclass CallFunctionOnParams(CommandParams):\n    functionDeclaration: str\n    objectId: NotRequired[str]\n    arguments: NotRequired[list[CallArgument]]\n    silent: NotRequired[bool]\n    returnByValue: NotRequired[bool]",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "CallFunctionOnParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class CallFunctionOnParams(CommandParams):\n    functionDeclaration: str\n    objectId: NotRequired[str]\n    arguments: NotRequired[list[CallArgument]]\n    silent: NotRequired[bool]\n    returnByValue: NotRequired[bool]\n    generatePreview: NotRequired[bool]\n    userGesture: NotRequired[bool]\n    awaitPromise: NotRequired[bool]\n    executionContextId: NotRequired[str]",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "CompileScriptParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class CompileScriptParams(CommandParams):\n    expression: str\n    sourceURL: NotRequired[str]\n    persistScript: NotRequired[bool]\n    executionContextId: NotRequired[str]\nclass EvaluateParams(CommandParams):\n    expression: str\n    objectGroup: NotRequired[str]\n    includeCommandLineAPI: NotRequired[bool]\n    silent: NotRequired[bool]",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "EvaluateParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class EvaluateParams(CommandParams):\n    expression: str\n    objectGroup: NotRequired[str]\n    includeCommandLineAPI: NotRequired[bool]\n    silent: NotRequired[bool]\n    contextId: NotRequired[str]\n    returnByValue: NotRequired[bool]\n    generatePreview: NotRequired[bool]\n    userGesture: NotRequired[bool]\n    awaitPromise: NotRequired[bool]",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "GetPropertiesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class GetPropertiesParams(CommandParams):\n    objectId: str\n    ownProperties: NotRequired[bool]\n    accessorPropertiesOnly: NotRequired[bool]\n    generatePreview: NotRequired[bool]\n    nonIndexedPropertiesOnly: NotRequired[bool]\nclass GlobalLexicalScopeNamesParams(CommandParams):\n    executionContextId: NotRequired[str]\nclass QueryObjectsParams(CommandParams):\n    prototypeObjectId: str",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "GlobalLexicalScopeNamesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class GlobalLexicalScopeNamesParams(CommandParams):\n    executionContextId: NotRequired[str]\nclass QueryObjectsParams(CommandParams):\n    prototypeObjectId: str\n    objectGroup: NotRequired[str]\nclass ReleaseObjectParams(CommandParams):\n    objectId: str\nclass ReleaseObjectGroupParams(CommandParams):\n    objectGroup: str\nclass RemoveBindingParams(CommandParams):",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "QueryObjectsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class QueryObjectsParams(CommandParams):\n    prototypeObjectId: str\n    objectGroup: NotRequired[str]\nclass ReleaseObjectParams(CommandParams):\n    objectId: str\nclass ReleaseObjectGroupParams(CommandParams):\n    objectGroup: str\nclass RemoveBindingParams(CommandParams):\n    name: str\nclass RunScriptParams(CommandParams):",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "ReleaseObjectParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class ReleaseObjectParams(CommandParams):\n    objectId: str\nclass ReleaseObjectGroupParams(CommandParams):\n    objectGroup: str\nclass RemoveBindingParams(CommandParams):\n    name: str\nclass RunScriptParams(CommandParams):\n    scriptId: str\n    executionContextId: NotRequired[str]\n    objectGroup: NotRequired[str]",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "ReleaseObjectGroupParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class ReleaseObjectGroupParams(CommandParams):\n    objectGroup: str\nclass RemoveBindingParams(CommandParams):\n    name: str\nclass RunScriptParams(CommandParams):\n    scriptId: str\n    executionContextId: NotRequired[str]\n    objectGroup: NotRequired[str]\n    silent: NotRequired[bool]\n    includeCommandLineAPI: NotRequired[bool]",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "RemoveBindingParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class RemoveBindingParams(CommandParams):\n    name: str\nclass RunScriptParams(CommandParams):\n    scriptId: str\n    executionContextId: NotRequired[str]\n    objectGroup: NotRequired[str]\n    silent: NotRequired[bool]\n    includeCommandLineAPI: NotRequired[bool]\n    returnByValue: NotRequired[bool]\n    generatePreview: NotRequired[bool]",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "RunScriptParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class RunScriptParams(CommandParams):\n    scriptId: str\n    executionContextId: NotRequired[str]\n    objectGroup: NotRequired[str]\n    silent: NotRequired[bool]\n    includeCommandLineAPI: NotRequired[bool]\n    returnByValue: NotRequired[bool]\n    generatePreview: NotRequired[bool]\n    awaitPromise: NotRequired[bool]\nclass SetAsyncCallStackDepthParams(CommandParams):",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "SetAsyncCallStackDepthParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class SetAsyncCallStackDepthParams(CommandParams):\n    maxDepth: int\nclass GetExceptionDetailsParams(CommandParams):\n    errorObjectId: str\nclass SetCustomObjectFormatterEnabledParams(CommandParams):\n    enabled: bool\nclass SetMaxCallStackSizeToCaptureParams(CommandParams):\n    size: int",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "GetExceptionDetailsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class GetExceptionDetailsParams(CommandParams):\n    errorObjectId: str\nclass SetCustomObjectFormatterEnabledParams(CommandParams):\n    enabled: bool\nclass SetMaxCallStackSizeToCaptureParams(CommandParams):\n    size: int",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "SetCustomObjectFormatterEnabledParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class SetCustomObjectFormatterEnabledParams(CommandParams):\n    enabled: bool\nclass SetMaxCallStackSizeToCaptureParams(CommandParams):\n    size: int",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "SetMaxCallStackSizeToCaptureParams",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.params",
        "description": "pydoll.protocol.runtime.params",
        "peekOfCode": "class SetMaxCallStackSizeToCaptureParams(CommandParams):\n    size: int",
        "detail": "pydoll.protocol.runtime.params",
        "documentation": {}
    },
    {
        "label": "AwaitPromiseResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class AwaitPromiseResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass CallFunctionOnResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass CompileScriptResultDict(TypedDict):\n    scriptId: NotRequired[str]\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass EvaluateResultDict(TypedDict):",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "CallFunctionOnResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class CallFunctionOnResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass CompileScriptResultDict(TypedDict):\n    scriptId: NotRequired[str]\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass EvaluateResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass GetPropertiesResultDict(TypedDict):",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "CompileScriptResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class CompileScriptResultDict(TypedDict):\n    scriptId: NotRequired[str]\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass EvaluateResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass GetPropertiesResultDict(TypedDict):\n    result: list[PropertyDescriptor]\n    internalProperties: NotRequired[list[InternalPropertyDescriptor]]\n    privateProperties: NotRequired[list[PrivatePropertyDescriptor]]",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "EvaluateResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class EvaluateResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass GetPropertiesResultDict(TypedDict):\n    result: list[PropertyDescriptor]\n    internalProperties: NotRequired[list[InternalPropertyDescriptor]]\n    privateProperties: NotRequired[list[PrivatePropertyDescriptor]]\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass GlobalLexicalScopeNamesResultDict(TypedDict):\n    names: list[str]",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetPropertiesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GetPropertiesResultDict(TypedDict):\n    result: list[PropertyDescriptor]\n    internalProperties: NotRequired[list[InternalPropertyDescriptor]]\n    privateProperties: NotRequired[list[PrivatePropertyDescriptor]]\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass GlobalLexicalScopeNamesResultDict(TypedDict):\n    names: list[str]\nclass QueryObjectsResultDict(TypedDict):\n    objects: list[RemoteObject]\nclass RunScriptResultDict(TypedDict):",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GlobalLexicalScopeNamesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GlobalLexicalScopeNamesResultDict(TypedDict):\n    names: list[str]\nclass QueryObjectsResultDict(TypedDict):\n    objects: list[RemoteObject]\nclass RunScriptResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass GetExceptionDetailsResultDict(TypedDict):\n    exceptionDetails: ExceptionDetails\nclass GetHeapUsageResultDict(TypedDict):",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "QueryObjectsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class QueryObjectsResultDict(TypedDict):\n    objects: list[RemoteObject]\nclass RunScriptResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass GetExceptionDetailsResultDict(TypedDict):\n    exceptionDetails: ExceptionDetails\nclass GetHeapUsageResultDict(TypedDict):\n    usedSize: float\n    totalSize: float",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "RunScriptResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class RunScriptResultDict(TypedDict):\n    result: RemoteObject\n    exceptionDetails: NotRequired[ExceptionDetails]\nclass GetExceptionDetailsResultDict(TypedDict):\n    exceptionDetails: ExceptionDetails\nclass GetHeapUsageResultDict(TypedDict):\n    usedSize: float\n    totalSize: float\n    embedderHeapUsedSize: float\n    backingStorageSize: float",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetExceptionDetailsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GetExceptionDetailsResultDict(TypedDict):\n    exceptionDetails: ExceptionDetails\nclass GetHeapUsageResultDict(TypedDict):\n    usedSize: float\n    totalSize: float\n    embedderHeapUsedSize: float\n    backingStorageSize: float\nclass GetIsolateIdResultDict(TypedDict):\n    id: str\nclass AwaitPromiseResponse(TypedDict):",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetHeapUsageResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GetHeapUsageResultDict(TypedDict):\n    usedSize: float\n    totalSize: float\n    embedderHeapUsedSize: float\n    backingStorageSize: float\nclass GetIsolateIdResultDict(TypedDict):\n    id: str\nclass AwaitPromiseResponse(TypedDict):\n    result: AwaitPromiseResultDict\nclass CallFunctionOnResponse(TypedDict):",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetIsolateIdResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GetIsolateIdResultDict(TypedDict):\n    id: str\nclass AwaitPromiseResponse(TypedDict):\n    result: AwaitPromiseResultDict\nclass CallFunctionOnResponse(TypedDict):\n    result: CallFunctionOnResultDict\nclass CompileScriptResponse(TypedDict):\n    result: CompileScriptResultDict\nclass EvaluateResponse(TypedDict):\n    result: EvaluateResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "AwaitPromiseResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class AwaitPromiseResponse(TypedDict):\n    result: AwaitPromiseResultDict\nclass CallFunctionOnResponse(TypedDict):\n    result: CallFunctionOnResultDict\nclass CompileScriptResponse(TypedDict):\n    result: CompileScriptResultDict\nclass EvaluateResponse(TypedDict):\n    result: EvaluateResultDict\nclass GetPropertiesResponse(TypedDict):\n    result: GetPropertiesResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "CallFunctionOnResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class CallFunctionOnResponse(TypedDict):\n    result: CallFunctionOnResultDict\nclass CompileScriptResponse(TypedDict):\n    result: CompileScriptResultDict\nclass EvaluateResponse(TypedDict):\n    result: EvaluateResultDict\nclass GetPropertiesResponse(TypedDict):\n    result: GetPropertiesResultDict\nclass GlobalLexicalScopeNamesResponse(TypedDict):\n    result: GlobalLexicalScopeNamesResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "CompileScriptResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class CompileScriptResponse(TypedDict):\n    result: CompileScriptResultDict\nclass EvaluateResponse(TypedDict):\n    result: EvaluateResultDict\nclass GetPropertiesResponse(TypedDict):\n    result: GetPropertiesResultDict\nclass GlobalLexicalScopeNamesResponse(TypedDict):\n    result: GlobalLexicalScopeNamesResultDict\nclass QueryObjectsResponse(TypedDict):\n    result: QueryObjectsResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "EvaluateResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class EvaluateResponse(TypedDict):\n    result: EvaluateResultDict\nclass GetPropertiesResponse(TypedDict):\n    result: GetPropertiesResultDict\nclass GlobalLexicalScopeNamesResponse(TypedDict):\n    result: GlobalLexicalScopeNamesResultDict\nclass QueryObjectsResponse(TypedDict):\n    result: QueryObjectsResultDict\nclass RunScriptResponse(TypedDict):\n    result: RunScriptResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetPropertiesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GetPropertiesResponse(TypedDict):\n    result: GetPropertiesResultDict\nclass GlobalLexicalScopeNamesResponse(TypedDict):\n    result: GlobalLexicalScopeNamesResultDict\nclass QueryObjectsResponse(TypedDict):\n    result: QueryObjectsResultDict\nclass RunScriptResponse(TypedDict):\n    result: RunScriptResultDict\nclass GetHeapUsageResponse(TypedDict):\n    result: GetHeapUsageResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GlobalLexicalScopeNamesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GlobalLexicalScopeNamesResponse(TypedDict):\n    result: GlobalLexicalScopeNamesResultDict\nclass QueryObjectsResponse(TypedDict):\n    result: QueryObjectsResultDict\nclass RunScriptResponse(TypedDict):\n    result: RunScriptResultDict\nclass GetHeapUsageResponse(TypedDict):\n    result: GetHeapUsageResultDict\nclass GetIsolateIdResponse(TypedDict):\n    result: GetIsolateIdResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "QueryObjectsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class QueryObjectsResponse(TypedDict):\n    result: QueryObjectsResultDict\nclass RunScriptResponse(TypedDict):\n    result: RunScriptResultDict\nclass GetHeapUsageResponse(TypedDict):\n    result: GetHeapUsageResultDict\nclass GetIsolateIdResponse(TypedDict):\n    result: GetIsolateIdResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "RunScriptResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class RunScriptResponse(TypedDict):\n    result: RunScriptResultDict\nclass GetHeapUsageResponse(TypedDict):\n    result: GetHeapUsageResultDict\nclass GetIsolateIdResponse(TypedDict):\n    result: GetIsolateIdResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetHeapUsageResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GetHeapUsageResponse(TypedDict):\n    result: GetHeapUsageResultDict\nclass GetIsolateIdResponse(TypedDict):\n    result: GetIsolateIdResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "GetIsolateIdResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.responses",
        "description": "pydoll.protocol.runtime.responses",
        "peekOfCode": "class GetIsolateIdResponse(TypedDict):\n    result: GetIsolateIdResultDict",
        "detail": "pydoll.protocol.runtime.responses",
        "documentation": {}
    },
    {
        "label": "PropertyPreview",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class PropertyPreview(TypedDict):\n    name: str\n    type: PropertyPreviewType\n    value: NotRequired[str]\n    valuePreview: NotRequired['ObjectPreview']\n    subtype: NotRequired[PropertyPreviewSubtype]\nclass EntryPreview(TypedDict):\n    key: 'ObjectPreview'\n    value: 'ObjectPreview'\nclass DeepSerializedValue(TypedDict):",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "EntryPreview",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class EntryPreview(TypedDict):\n    key: 'ObjectPreview'\n    value: 'ObjectPreview'\nclass DeepSerializedValue(TypedDict):\n    type: DeepSerializedValueType\n    value: NotRequired[Any]\n    objectId: NotRequired[str]\n    weakLocalObjectReference: NotRequired[int]\nclass ObjectPreview(TypedDict):\n    type: ObjectPreviewType",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "DeepSerializedValue",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class DeepSerializedValue(TypedDict):\n    type: DeepSerializedValueType\n    value: NotRequired[Any]\n    objectId: NotRequired[str]\n    weakLocalObjectReference: NotRequired[int]\nclass ObjectPreview(TypedDict):\n    type: ObjectPreviewType\n    subtype: NotRequired[ObjectPreviewSubtype]\n    description: NotRequired[str]\n    overflow: bool",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "ObjectPreview",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class ObjectPreview(TypedDict):\n    type: ObjectPreviewType\n    subtype: NotRequired[ObjectPreviewSubtype]\n    description: NotRequired[str]\n    overflow: bool\n    properties: list[PropertyPreview]\n    entries: NotRequired[list[EntryPreview]]\nclass CustomPreview(TypedDict):\n    header: str\n    bodyGetterId: NotRequired[str]",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "CustomPreview",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class CustomPreview(TypedDict):\n    header: str\n    bodyGetterId: NotRequired[str]\nclass RemoteObject(TypedDict):\n    type: RemoteObjectType\n    subtype: NotRequired[RemoteObjectSubtype]\n    className: NotRequired[str]\n    value: NotRequired[Any]\n    unserializableValue: NotRequired[Union[UnserializableEnum, str]]\n    description: NotRequired[str]",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "RemoteObject",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class RemoteObject(TypedDict):\n    type: RemoteObjectType\n    subtype: NotRequired[RemoteObjectSubtype]\n    className: NotRequired[str]\n    value: NotRequired[Any]\n    unserializableValue: NotRequired[Union[UnserializableEnum, str]]\n    description: NotRequired[str]\n    deepSerializedValue: NotRequired[DeepSerializedValue]\n    objectId: NotRequired[str]\n    preview: NotRequired[ObjectPreview]",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "CallFrame",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class CallFrame(TypedDict):\n    functionName: str\n    scriptId: str\n    url: str\n    lineNumber: int\n    columnNumber: int\nclass StackTraceId(TypedDict):\n    id: str\n    debuggerId: str\nclass StackTrace(TypedDict):",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "StackTraceId",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class StackTraceId(TypedDict):\n    id: str\n    debuggerId: str\nclass StackTrace(TypedDict):\n    description: NotRequired[str]\n    callFrames: list[CallFrame]\n    parent: NotRequired['StackTrace']\n    parentId: NotRequired[StackTraceId]\nclass ExceptionDetails(TypedDict):\n    exceptionId: int",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "StackTrace",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class StackTrace(TypedDict):\n    description: NotRequired[str]\n    callFrames: list[CallFrame]\n    parent: NotRequired['StackTrace']\n    parentId: NotRequired[StackTraceId]\nclass ExceptionDetails(TypedDict):\n    exceptionId: int\n    text: str\n    lineNumber: int\n    columnNumber: int",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "ExceptionDetails",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class ExceptionDetails(TypedDict):\n    exceptionId: int\n    text: str\n    lineNumber: int\n    columnNumber: int\n    scriptId: NotRequired[str]\n    url: NotRequired[str]\n    stackTrace: NotRequired[StackTrace]\n    exception: NotRequired[RemoteObject]\n    executionContextId: NotRequired[int]",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "PropertyDescriptor",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class PropertyDescriptor(TypedDict):\n    name: str\n    value: NotRequired[RemoteObject]\n    writable: bool\n    get: NotRequired[RemoteObject]\n    set: NotRequired[RemoteObject]\n    configurable: bool\n    enumerable: bool\n    wasThrown: NotRequired[bool]\n    isOwn: NotRequired[bool]",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "InternalPropertyDescriptor",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class InternalPropertyDescriptor(TypedDict):\n    name: str\n    value: NotRequired[RemoteObject]\nclass PrivatePropertyDescriptor(TypedDict):\n    name: str\n    value: NotRequired[RemoteObject]\n    get: NotRequired[RemoteObject]\n    set: NotRequired[RemoteObject]\nclass CallArgument(TypedDict):\n    value: NotRequired[str]",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "PrivatePropertyDescriptor",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class PrivatePropertyDescriptor(TypedDict):\n    name: str\n    value: NotRequired[RemoteObject]\n    get: NotRequired[RemoteObject]\n    set: NotRequired[RemoteObject]\nclass CallArgument(TypedDict):\n    value: NotRequired[str]\n    unserializableValue: NotRequired[Union[UnserializableEnum, str]]\n    objectId: NotRequired[str]\nclass SerializationOptions(TypedDict):",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "CallArgument",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class CallArgument(TypedDict):\n    value: NotRequired[str]\n    unserializableValue: NotRequired[Union[UnserializableEnum, str]]\n    objectId: NotRequired[str]\nclass SerializationOptions(TypedDict):\n    serialization: SerializationValue\n    maxDepth: NotRequired[int]\n    additionalParameters: NotRequired[dict]",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "SerializationOptions",
        "kind": 6,
        "importPath": "pydoll.protocol.runtime.types",
        "description": "pydoll.protocol.runtime.types",
        "peekOfCode": "class SerializationOptions(TypedDict):\n    serialization: SerializationValue\n    maxDepth: NotRequired[int]\n    additionalParameters: NotRequired[dict]",
        "detail": "pydoll.protocol.runtime.types",
        "documentation": {}
    },
    {
        "label": "StorageEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.events",
        "description": "pydoll.protocol.storage.events",
        "peekOfCode": "class StorageEvent(str, Enum):\n    \"\"\"\n    Events from the Storage domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of Storage-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about changes to various browser storage mechanisms including Cache Storage,\n    IndexedDB, Interest Groups, Shared Storage, and Storage Buckets.\n    \"\"\"\n    CACHE_STORAGE_CONTENT_UPDATED = 'Storage.cacheStorageContentUpdated'\n    \"\"\"",
        "detail": "pydoll.protocol.storage.events",
        "documentation": {}
    },
    {
        "label": "StorageMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.methods",
        "description": "pydoll.protocol.storage.methods",
        "peekOfCode": "class StorageMethod(str, Enum):\n    CLEAR_COOKIES = 'Storage.clearCookies'\n    CLEAR_DATA_FOR_ORIGIN = 'Storage.clearDataForOrigin'\n    CLEAR_DATA_FOR_STORAGE_KEY = 'Storage.clearDataForStorageKey'\n    GET_COOKIES = 'Storage.getCookies'\n    GET_STORAGE_KEY_FOR_FRAME = 'Storage.getStorageKeyForFrame'\n    GET_USAGE_AND_QUOTA = 'Storage.getUsageAndQuota'\n    SET_COOKIES = 'Storage.setCookies'\n    SET_PROTECTED_AUDIENCE_K_ANONYMITY = 'Storage.setProtectedAudienceKAnonymity'\n    TRACK_CACHE_STORAGE_FOR_ORIGIN = 'Storage.trackCacheStorageForOrigin'",
        "detail": "pydoll.protocol.storage.methods",
        "documentation": {}
    },
    {
        "label": "ClearCookiesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class ClearCookiesParams(CommandParams):\n    browserContextId: NotRequired[str]\nclass ClearDataForOriginParams(CommandParams):\n    origin: str\n    storageTypes: str\nclass ClearDataForStorageKeyParams(CommandParams):\n    storageKey: str\n    storageTypes: str\nclass GetCookiesParams(CommandParams):\n    browserContextId: NotRequired[str]",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ClearDataForOriginParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class ClearDataForOriginParams(CommandParams):\n    origin: str\n    storageTypes: str\nclass ClearDataForStorageKeyParams(CommandParams):\n    storageKey: str\n    storageTypes: str\nclass GetCookiesParams(CommandParams):\n    browserContextId: NotRequired[str]\nclass GetStorageKeyForFrameParams(CommandParams):\n    frameId: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ClearDataForStorageKeyParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class ClearDataForStorageKeyParams(CommandParams):\n    storageKey: str\n    storageTypes: str\nclass GetCookiesParams(CommandParams):\n    browserContextId: NotRequired[str]\nclass GetStorageKeyForFrameParams(CommandParams):\n    frameId: str\nclass GetUsageAndQuotaParams(CommandParams):\n    origin: str\nclass SetCookiesParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetCookiesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class GetCookiesParams(CommandParams):\n    browserContextId: NotRequired[str]\nclass GetStorageKeyForFrameParams(CommandParams):\n    frameId: str\nclass GetUsageAndQuotaParams(CommandParams):\n    origin: str\nclass SetCookiesParams(CommandParams):\n    cookies: list[CookieParam]\n    browserContextId: NotRequired[str]\nclass SetProtectedAudienceKAnonymityParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetStorageKeyForFrameParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class GetStorageKeyForFrameParams(CommandParams):\n    frameId: str\nclass GetUsageAndQuotaParams(CommandParams):\n    origin: str\nclass SetCookiesParams(CommandParams):\n    cookies: list[CookieParam]\n    browserContextId: NotRequired[str]\nclass SetProtectedAudienceKAnonymityParams(CommandParams):\n    owner: str\n    name: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetUsageAndQuotaParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class GetUsageAndQuotaParams(CommandParams):\n    origin: str\nclass SetCookiesParams(CommandParams):\n    cookies: list[CookieParam]\n    browserContextId: NotRequired[str]\nclass SetProtectedAudienceKAnonymityParams(CommandParams):\n    owner: str\n    name: str\n    hashes: list[str]\nclass TrackCacheStorageForOriginParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetCookiesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetCookiesParams(CommandParams):\n    cookies: list[CookieParam]\n    browserContextId: NotRequired[str]\nclass SetProtectedAudienceKAnonymityParams(CommandParams):\n    owner: str\n    name: str\n    hashes: list[str]\nclass TrackCacheStorageForOriginParams(CommandParams):\n    origin: str\nclass TrackCacheStorageForStorageKeyParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetProtectedAudienceKAnonymityParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetProtectedAudienceKAnonymityParams(CommandParams):\n    owner: str\n    name: str\n    hashes: list[str]\nclass TrackCacheStorageForOriginParams(CommandParams):\n    origin: str\nclass TrackCacheStorageForStorageKeyParams(CommandParams):\n    storageKey: str\nclass TrackIndexedDBForOriginParams(CommandParams):\n    origin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TrackCacheStorageForOriginParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class TrackCacheStorageForOriginParams(CommandParams):\n    origin: str\nclass TrackCacheStorageForStorageKeyParams(CommandParams):\n    storageKey: str\nclass TrackIndexedDBForOriginParams(CommandParams):\n    origin: str\nclass TrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str\nclass UntrackCacheStorageForOriginParams(CommandParams):\n    origin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TrackCacheStorageForStorageKeyParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class TrackCacheStorageForStorageKeyParams(CommandParams):\n    storageKey: str\nclass TrackIndexedDBForOriginParams(CommandParams):\n    origin: str\nclass TrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str\nclass UntrackCacheStorageForOriginParams(CommandParams):\n    origin: str\nclass UntrackCacheStorageForStorageKeyParams(CommandParams):\n    storageKey: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TrackIndexedDBForOriginParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class TrackIndexedDBForOriginParams(CommandParams):\n    origin: str\nclass TrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str\nclass UntrackCacheStorageForOriginParams(CommandParams):\n    origin: str\nclass UntrackCacheStorageForStorageKeyParams(CommandParams):\n    storageKey: str\nclass UntrackIndexedDBForOriginParams(CommandParams):\n    origin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "TrackIndexedDBForStorageKeyParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class TrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str\nclass UntrackCacheStorageForOriginParams(CommandParams):\n    origin: str\nclass UntrackCacheStorageForStorageKeyParams(CommandParams):\n    storageKey: str\nclass UntrackIndexedDBForOriginParams(CommandParams):\n    origin: str\nclass UntrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "UntrackCacheStorageForOriginParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class UntrackCacheStorageForOriginParams(CommandParams):\n    origin: str\nclass UntrackCacheStorageForStorageKeyParams(CommandParams):\n    storageKey: str\nclass UntrackIndexedDBForOriginParams(CommandParams):\n    origin: str\nclass UntrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str\nclass ClearSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "UntrackCacheStorageForStorageKeyParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class UntrackCacheStorageForStorageKeyParams(CommandParams):\n    storageKey: str\nclass UntrackIndexedDBForOriginParams(CommandParams):\n    origin: str\nclass UntrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str\nclass ClearSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str\nclass ClearTrustTokensParams(CommandParams):\n    issuerOrigin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "UntrackIndexedDBForOriginParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class UntrackIndexedDBForOriginParams(CommandParams):\n    origin: str\nclass UntrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str\nclass ClearSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str\nclass ClearTrustTokensParams(CommandParams):\n    issuerOrigin: str\nclass DeleteSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "UntrackIndexedDBForStorageKeyParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class UntrackIndexedDBForStorageKeyParams(CommandParams):\n    storageKey: str\nclass ClearSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str\nclass ClearTrustTokensParams(CommandParams):\n    issuerOrigin: str\nclass DeleteSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str\n    key: str\nclass DeleteStorageBucketParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ClearSharedStorageEntriesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class ClearSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str\nclass ClearTrustTokensParams(CommandParams):\n    issuerOrigin: str\nclass DeleteSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str\n    key: str\nclass DeleteStorageBucketParams(CommandParams):\n    bucket: StorageBucket\nclass GetAffectedUrlsForThirdPartyCookieMetadataParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ClearTrustTokensParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class ClearTrustTokensParams(CommandParams):\n    issuerOrigin: str\nclass DeleteSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str\n    key: str\nclass DeleteStorageBucketParams(CommandParams):\n    bucket: StorageBucket\nclass GetAffectedUrlsForThirdPartyCookieMetadataParams(CommandParams):\n    firstPartyUrl: str\n    thirdPartyUrls: list[str]",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "DeleteSharedStorageEntryParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class DeleteSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str\n    key: str\nclass DeleteStorageBucketParams(CommandParams):\n    bucket: StorageBucket\nclass GetAffectedUrlsForThirdPartyCookieMetadataParams(CommandParams):\n    firstPartyUrl: str\n    thirdPartyUrls: list[str]\nclass GetInterestGroupDetailsParams(CommandParams):\n    ownerOrigin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "DeleteStorageBucketParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class DeleteStorageBucketParams(CommandParams):\n    bucket: StorageBucket\nclass GetAffectedUrlsForThirdPartyCookieMetadataParams(CommandParams):\n    firstPartyUrl: str\n    thirdPartyUrls: list[str]\nclass GetInterestGroupDetailsParams(CommandParams):\n    ownerOrigin: str\n    name: str\nclass GetRelatedWebsiteSetsParams(CommandParams):\n    sets: list[RelatedWebsiteSet]",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetAffectedUrlsForThirdPartyCookieMetadataParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class GetAffectedUrlsForThirdPartyCookieMetadataParams(CommandParams):\n    firstPartyUrl: str\n    thirdPartyUrls: list[str]\nclass GetInterestGroupDetailsParams(CommandParams):\n    ownerOrigin: str\n    name: str\nclass GetRelatedWebsiteSetsParams(CommandParams):\n    sets: list[RelatedWebsiteSet]\nclass GetSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetInterestGroupDetailsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class GetInterestGroupDetailsParams(CommandParams):\n    ownerOrigin: str\n    name: str\nclass GetRelatedWebsiteSetsParams(CommandParams):\n    sets: list[RelatedWebsiteSet]\nclass GetSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str\nclass GetSharedStorageMetadataParams(CommandParams):\n    ownerOrigin: str\nclass OverrideQuotaForOriginParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetRelatedWebsiteSetsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class GetRelatedWebsiteSetsParams(CommandParams):\n    sets: list[RelatedWebsiteSet]\nclass GetSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str\nclass GetSharedStorageMetadataParams(CommandParams):\n    ownerOrigin: str\nclass OverrideQuotaForOriginParams(CommandParams):\n    origin: str\n    quotaSize: NotRequired[float]\nclass ResetSharedStorageBudgetParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageEntriesParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class GetSharedStorageEntriesParams(CommandParams):\n    ownerOrigin: str\nclass GetSharedStorageMetadataParams(CommandParams):\n    ownerOrigin: str\nclass OverrideQuotaForOriginParams(CommandParams):\n    origin: str\n    quotaSize: NotRequired[float]\nclass ResetSharedStorageBudgetParams(CommandParams):\n    ownerOrigin: str\nclass SetAttributionReportingLocalTestingModeParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageMetadataParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class GetSharedStorageMetadataParams(CommandParams):\n    ownerOrigin: str\nclass OverrideQuotaForOriginParams(CommandParams):\n    origin: str\n    quotaSize: NotRequired[float]\nclass ResetSharedStorageBudgetParams(CommandParams):\n    ownerOrigin: str\nclass SetAttributionReportingLocalTestingModeParams(CommandParams):\n    enable: bool\nclass SetAttributionReportingTrackingParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "OverrideQuotaForOriginParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class OverrideQuotaForOriginParams(CommandParams):\n    origin: str\n    quotaSize: NotRequired[float]\nclass ResetSharedStorageBudgetParams(CommandParams):\n    ownerOrigin: str\nclass SetAttributionReportingLocalTestingModeParams(CommandParams):\n    enable: bool\nclass SetAttributionReportingTrackingParams(CommandParams):\n    enable: bool\nclass SetInterestGroupAuctionTrackingParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "ResetSharedStorageBudgetParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class ResetSharedStorageBudgetParams(CommandParams):\n    ownerOrigin: str\nclass SetAttributionReportingLocalTestingModeParams(CommandParams):\n    enable: bool\nclass SetAttributionReportingTrackingParams(CommandParams):\n    enable: bool\nclass SetInterestGroupAuctionTrackingParams(CommandParams):\n    enable: bool\nclass SetInterestGroupTrackingParams(CommandParams):\n    enable: bool",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetAttributionReportingLocalTestingModeParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetAttributionReportingLocalTestingModeParams(CommandParams):\n    enable: bool\nclass SetAttributionReportingTrackingParams(CommandParams):\n    enable: bool\nclass SetInterestGroupAuctionTrackingParams(CommandParams):\n    enable: bool\nclass SetInterestGroupTrackingParams(CommandParams):\n    enable: bool\nclass SetSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetAttributionReportingTrackingParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetAttributionReportingTrackingParams(CommandParams):\n    enable: bool\nclass SetInterestGroupAuctionTrackingParams(CommandParams):\n    enable: bool\nclass SetInterestGroupTrackingParams(CommandParams):\n    enable: bool\nclass SetSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str\n    key: str\n    value: str",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetInterestGroupAuctionTrackingParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetInterestGroupAuctionTrackingParams(CommandParams):\n    enable: bool\nclass SetInterestGroupTrackingParams(CommandParams):\n    enable: bool\nclass SetSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str\n    key: str\n    value: str\n    ignoreIfPresent: NotRequired[bool]\nclass SetSharedStorageTrackingParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetInterestGroupTrackingParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetInterestGroupTrackingParams(CommandParams):\n    enable: bool\nclass SetSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str\n    key: str\n    value: str\n    ignoreIfPresent: NotRequired[bool]\nclass SetSharedStorageTrackingParams(CommandParams):\n    enable: bool\nclass SetStorageBucketTrackingParams(CommandParams):",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetSharedStorageEntryParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetSharedStorageEntryParams(CommandParams):\n    ownerOrigin: str\n    key: str\n    value: str\n    ignoreIfPresent: NotRequired[bool]\nclass SetSharedStorageTrackingParams(CommandParams):\n    enable: bool\nclass SetStorageBucketTrackingParams(CommandParams):\n    storageKey: str\n    enable: bool",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetSharedStorageTrackingParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetSharedStorageTrackingParams(CommandParams):\n    enable: bool\nclass SetStorageBucketTrackingParams(CommandParams):\n    storageKey: str\n    enable: bool",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "SetStorageBucketTrackingParams",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.params",
        "description": "pydoll.protocol.storage.params",
        "peekOfCode": "class SetStorageBucketTrackingParams(CommandParams):\n    storageKey: str\n    enable: bool",
        "detail": "pydoll.protocol.storage.params",
        "documentation": {}
    },
    {
        "label": "GetCookiesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetCookiesResultDict(TypedDict):\n    cookies: list[Cookie]\nclass GetStorageKeyForFrameResultDict(TypedDict):\n    storageKey: str\nclass GetUsageAndQuotaResultDict(TypedDict):\n    usage: float\n    quota: float\n    overrideActive: bool\n    usageBreakdown: list[UsageForType]\nclass ClearTrustTokensResultDict(TypedDict):",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetStorageKeyForFrameResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetStorageKeyForFrameResultDict(TypedDict):\n    storageKey: str\nclass GetUsageAndQuotaResultDict(TypedDict):\n    usage: float\n    quota: float\n    overrideActive: bool\n    usageBreakdown: list[UsageForType]\nclass ClearTrustTokensResultDict(TypedDict):\n    didDeleteTokens: bool\nclass GetAffectedUrlsForThirdPartyCookieMetadataResultDict(TypedDict):",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetUsageAndQuotaResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetUsageAndQuotaResultDict(TypedDict):\n    usage: float\n    quota: float\n    overrideActive: bool\n    usageBreakdown: list[UsageForType]\nclass ClearTrustTokensResultDict(TypedDict):\n    didDeleteTokens: bool\nclass GetAffectedUrlsForThirdPartyCookieMetadataResultDict(TypedDict):\n    matchedUrls: list[str]\nclass GetInterestGroupDetailsResultDict(TypedDict):",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "ClearTrustTokensResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class ClearTrustTokensResultDict(TypedDict):\n    didDeleteTokens: bool\nclass GetAffectedUrlsForThirdPartyCookieMetadataResultDict(TypedDict):\n    matchedUrls: list[str]\nclass GetInterestGroupDetailsResultDict(TypedDict):\n    details: dict\nclass GetRelatedWebsiteSetsResultDict(TypedDict):\n    sets: list[RelatedWebsiteSet]\nclass GetSharedStorageEntriesResultDict(TypedDict):\n    entries: list[SharedStorageEntry]",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetAffectedUrlsForThirdPartyCookieMetadataResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetAffectedUrlsForThirdPartyCookieMetadataResultDict(TypedDict):\n    matchedUrls: list[str]\nclass GetInterestGroupDetailsResultDict(TypedDict):\n    details: dict\nclass GetRelatedWebsiteSetsResultDict(TypedDict):\n    sets: list[RelatedWebsiteSet]\nclass GetSharedStorageEntriesResultDict(TypedDict):\n    entries: list[SharedStorageEntry]\nclass GetSharedStorageMetadataResultDict(TypedDict):\n    metadata: SharedStorageMetadata",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetInterestGroupDetailsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetInterestGroupDetailsResultDict(TypedDict):\n    details: dict\nclass GetRelatedWebsiteSetsResultDict(TypedDict):\n    sets: list[RelatedWebsiteSet]\nclass GetSharedStorageEntriesResultDict(TypedDict):\n    entries: list[SharedStorageEntry]\nclass GetSharedStorageMetadataResultDict(TypedDict):\n    metadata: SharedStorageMetadata\nclass GetTrustTokensResultDict(TypedDict):\n    tokens: list[TrustToken]",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetRelatedWebsiteSetsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetRelatedWebsiteSetsResultDict(TypedDict):\n    sets: list[RelatedWebsiteSet]\nclass GetSharedStorageEntriesResultDict(TypedDict):\n    entries: list[SharedStorageEntry]\nclass GetSharedStorageMetadataResultDict(TypedDict):\n    metadata: SharedStorageMetadata\nclass GetTrustTokensResultDict(TypedDict):\n    tokens: list[TrustToken]\nclass RunBounceTrackingMitigationsResultDict(TypedDict):\n    deletedSites: list[str]",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageEntriesResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetSharedStorageEntriesResultDict(TypedDict):\n    entries: list[SharedStorageEntry]\nclass GetSharedStorageMetadataResultDict(TypedDict):\n    metadata: SharedStorageMetadata\nclass GetTrustTokensResultDict(TypedDict):\n    tokens: list[TrustToken]\nclass RunBounceTrackingMitigationsResultDict(TypedDict):\n    deletedSites: list[str]\nclass SendPendingAttributionReportsResultDict(TypedDict):\n    numSent: int",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageMetadataResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetSharedStorageMetadataResultDict(TypedDict):\n    metadata: SharedStorageMetadata\nclass GetTrustTokensResultDict(TypedDict):\n    tokens: list[TrustToken]\nclass RunBounceTrackingMitigationsResultDict(TypedDict):\n    deletedSites: list[str]\nclass SendPendingAttributionReportsResultDict(TypedDict):\n    numSent: int\nclass GetCookiesResponse(TypedDict):\n    result: GetCookiesResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetTrustTokensResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetTrustTokensResultDict(TypedDict):\n    tokens: list[TrustToken]\nclass RunBounceTrackingMitigationsResultDict(TypedDict):\n    deletedSites: list[str]\nclass SendPendingAttributionReportsResultDict(TypedDict):\n    numSent: int\nclass GetCookiesResponse(TypedDict):\n    result: GetCookiesResultDict\nclass GetStorageKeyForFrameResponse(TypedDict):\n    result: GetStorageKeyForFrameResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "RunBounceTrackingMitigationsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class RunBounceTrackingMitigationsResultDict(TypedDict):\n    deletedSites: list[str]\nclass SendPendingAttributionReportsResultDict(TypedDict):\n    numSent: int\nclass GetCookiesResponse(TypedDict):\n    result: GetCookiesResultDict\nclass GetStorageKeyForFrameResponse(TypedDict):\n    result: GetStorageKeyForFrameResultDict\nclass GetUsageAndQuotaResponse(TypedDict):\n    result: GetUsageAndQuotaResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "SendPendingAttributionReportsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class SendPendingAttributionReportsResultDict(TypedDict):\n    numSent: int\nclass GetCookiesResponse(TypedDict):\n    result: GetCookiesResultDict\nclass GetStorageKeyForFrameResponse(TypedDict):\n    result: GetStorageKeyForFrameResultDict\nclass GetUsageAndQuotaResponse(TypedDict):\n    result: GetUsageAndQuotaResultDict\nclass ClearTrustTokensResponse(TypedDict):\n    result: ClearTrustTokensResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetCookiesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetCookiesResponse(TypedDict):\n    result: GetCookiesResultDict\nclass GetStorageKeyForFrameResponse(TypedDict):\n    result: GetStorageKeyForFrameResultDict\nclass GetUsageAndQuotaResponse(TypedDict):\n    result: GetUsageAndQuotaResultDict\nclass ClearTrustTokensResponse(TypedDict):\n    result: ClearTrustTokensResultDict\nclass GetAffectedUrlsForThirdPartyCookieMetadataResponse(TypedDict):\n    result: GetAffectedUrlsForThirdPartyCookieMetadataResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetStorageKeyForFrameResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetStorageKeyForFrameResponse(TypedDict):\n    result: GetStorageKeyForFrameResultDict\nclass GetUsageAndQuotaResponse(TypedDict):\n    result: GetUsageAndQuotaResultDict\nclass ClearTrustTokensResponse(TypedDict):\n    result: ClearTrustTokensResultDict\nclass GetAffectedUrlsForThirdPartyCookieMetadataResponse(TypedDict):\n    result: GetAffectedUrlsForThirdPartyCookieMetadataResultDict\nclass GetInterestGroupDetailsResponse(TypedDict):\n    result: GetInterestGroupDetailsResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetUsageAndQuotaResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetUsageAndQuotaResponse(TypedDict):\n    result: GetUsageAndQuotaResultDict\nclass ClearTrustTokensResponse(TypedDict):\n    result: ClearTrustTokensResultDict\nclass GetAffectedUrlsForThirdPartyCookieMetadataResponse(TypedDict):\n    result: GetAffectedUrlsForThirdPartyCookieMetadataResultDict\nclass GetInterestGroupDetailsResponse(TypedDict):\n    result: GetInterestGroupDetailsResultDict\nclass GetRelatedWebsiteSetsResponse(TypedDict):\n    result: GetRelatedWebsiteSetsResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "ClearTrustTokensResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class ClearTrustTokensResponse(TypedDict):\n    result: ClearTrustTokensResultDict\nclass GetAffectedUrlsForThirdPartyCookieMetadataResponse(TypedDict):\n    result: GetAffectedUrlsForThirdPartyCookieMetadataResultDict\nclass GetInterestGroupDetailsResponse(TypedDict):\n    result: GetInterestGroupDetailsResultDict\nclass GetRelatedWebsiteSetsResponse(TypedDict):\n    result: GetRelatedWebsiteSetsResultDict\nclass GetSharedStorageEntriesResponse(TypedDict):\n    result: GetSharedStorageEntriesResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetAffectedUrlsForThirdPartyCookieMetadataResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetAffectedUrlsForThirdPartyCookieMetadataResponse(TypedDict):\n    result: GetAffectedUrlsForThirdPartyCookieMetadataResultDict\nclass GetInterestGroupDetailsResponse(TypedDict):\n    result: GetInterestGroupDetailsResultDict\nclass GetRelatedWebsiteSetsResponse(TypedDict):\n    result: GetRelatedWebsiteSetsResultDict\nclass GetSharedStorageEntriesResponse(TypedDict):\n    result: GetSharedStorageEntriesResultDict\nclass GetSharedStorageMetadataResponse(TypedDict):\n    result: GetSharedStorageMetadataResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetInterestGroupDetailsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetInterestGroupDetailsResponse(TypedDict):\n    result: GetInterestGroupDetailsResultDict\nclass GetRelatedWebsiteSetsResponse(TypedDict):\n    result: GetRelatedWebsiteSetsResultDict\nclass GetSharedStorageEntriesResponse(TypedDict):\n    result: GetSharedStorageEntriesResultDict\nclass GetSharedStorageMetadataResponse(TypedDict):\n    result: GetSharedStorageMetadataResultDict\nclass GetTrustTokensResponse(TypedDict):\n    result: GetTrustTokensResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetRelatedWebsiteSetsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetRelatedWebsiteSetsResponse(TypedDict):\n    result: GetRelatedWebsiteSetsResultDict\nclass GetSharedStorageEntriesResponse(TypedDict):\n    result: GetSharedStorageEntriesResultDict\nclass GetSharedStorageMetadataResponse(TypedDict):\n    result: GetSharedStorageMetadataResultDict\nclass GetTrustTokensResponse(TypedDict):\n    result: GetTrustTokensResultDict\nclass RunBounceTrackingMitigationsResponse(TypedDict):\n    result: RunBounceTrackingMitigationsResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageEntriesResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetSharedStorageEntriesResponse(TypedDict):\n    result: GetSharedStorageEntriesResultDict\nclass GetSharedStorageMetadataResponse(TypedDict):\n    result: GetSharedStorageMetadataResultDict\nclass GetTrustTokensResponse(TypedDict):\n    result: GetTrustTokensResultDict\nclass RunBounceTrackingMitigationsResponse(TypedDict):\n    result: RunBounceTrackingMitigationsResultDict\nclass SendPendingAttributionReportsResponse(TypedDict):\n    result: SendPendingAttributionReportsResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetSharedStorageMetadataResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetSharedStorageMetadataResponse(TypedDict):\n    result: GetSharedStorageMetadataResultDict\nclass GetTrustTokensResponse(TypedDict):\n    result: GetTrustTokensResultDict\nclass RunBounceTrackingMitigationsResponse(TypedDict):\n    result: RunBounceTrackingMitigationsResultDict\nclass SendPendingAttributionReportsResponse(TypedDict):\n    result: SendPendingAttributionReportsResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "GetTrustTokensResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class GetTrustTokensResponse(TypedDict):\n    result: GetTrustTokensResultDict\nclass RunBounceTrackingMitigationsResponse(TypedDict):\n    result: RunBounceTrackingMitigationsResultDict\nclass SendPendingAttributionReportsResponse(TypedDict):\n    result: SendPendingAttributionReportsResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "RunBounceTrackingMitigationsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class RunBounceTrackingMitigationsResponse(TypedDict):\n    result: RunBounceTrackingMitigationsResultDict\nclass SendPendingAttributionReportsResponse(TypedDict):\n    result: SendPendingAttributionReportsResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "SendPendingAttributionReportsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.responses",
        "description": "pydoll.protocol.storage.responses",
        "peekOfCode": "class SendPendingAttributionReportsResponse(TypedDict):\n    result: SendPendingAttributionReportsResultDict",
        "detail": "pydoll.protocol.storage.responses",
        "documentation": {}
    },
    {
        "label": "StorageBucket",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "peekOfCode": "class StorageBucket(TypedDict):\n    storageKey: str\n    name: NotRequired[str]\nclass RelatedWebsiteSet(TypedDict):\n    primarySites: list[str]\n    associatedSites: list[str]\n    serviceSites: list[str]\nclass UsageForType(TypedDict):\n    storageType: StorageType\n    usage: float",
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "RelatedWebsiteSet",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "peekOfCode": "class RelatedWebsiteSet(TypedDict):\n    primarySites: list[str]\n    associatedSites: list[str]\n    serviceSites: list[str]\nclass UsageForType(TypedDict):\n    storageType: StorageType\n    usage: float\nclass SharedStorageEntry(TypedDict):\n    key: str\n    value: str",
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "UsageForType",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "peekOfCode": "class UsageForType(TypedDict):\n    storageType: StorageType\n    usage: float\nclass SharedStorageEntry(TypedDict):\n    key: str\n    value: str\nclass SharedStorageMetadata(TypedDict):\n    creationTime: float\n    length: int\n    remainingBudget: float",
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "SharedStorageEntry",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "peekOfCode": "class SharedStorageEntry(TypedDict):\n    key: str\n    value: str\nclass SharedStorageMetadata(TypedDict):\n    creationTime: float\n    length: int\n    remainingBudget: float\n    bytesUsed: int\nclass TrustToken(TypedDict):\n    issuerOrigin: str",
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "SharedStorageMetadata",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "peekOfCode": "class SharedStorageMetadata(TypedDict):\n    creationTime: float\n    length: int\n    remainingBudget: float\n    bytesUsed: int\nclass TrustToken(TypedDict):\n    issuerOrigin: str\n    count: float",
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "TrustToken",
        "kind": 6,
        "importPath": "pydoll.protocol.storage.types",
        "description": "pydoll.protocol.storage.types",
        "peekOfCode": "class TrustToken(TypedDict):\n    issuerOrigin: str\n    count: float",
        "detail": "pydoll.protocol.storage.types",
        "documentation": {}
    },
    {
        "label": "TargetEvent",
        "kind": 6,
        "importPath": "pydoll.protocol.target.events",
        "description": "pydoll.protocol.target.events",
        "peekOfCode": "class TargetEvent(str, Enum):\n    \"\"\"\n    Events from the Target domain of the Chrome DevTools Protocol.\n    This enumeration contains the names of Target-related events that can be\n    received from the Chrome DevTools Protocol. These events provide information\n    about target creation, destruction, and communication between targets.\n    \"\"\"\n    RECEIVED_MESSAGE_FROM_TARGET = 'Target.receivedMessageFromTarget'\n    \"\"\"\n    Notifies about a new protocol message received from the session",
        "detail": "pydoll.protocol.target.events",
        "documentation": {}
    },
    {
        "label": "TargetMethod",
        "kind": 6,
        "importPath": "pydoll.protocol.target.methods",
        "description": "pydoll.protocol.target.methods",
        "peekOfCode": "class TargetMethod(str, Enum):\n    ACTIVATE_TARGET = 'Target.activateTarget'\n    ATTACH_TO_TARGET = 'Target.attachToTarget'\n    CLOSE_TARGET = 'Target.closeTarget'\n    CREATE_BROWSER_CONTEXT = 'Target.createBrowserContext'\n    CREATE_TARGET = 'Target.createTarget'\n    DETACH_FROM_TARGET = 'Target.detachFromTarget'\n    DISPOSE_BROWSER_CONTEXT = 'Target.disposeBrowserContext'\n    GET_BROWSER_CONTEXTS = 'Target.getBrowserContexts'\n    GET_TARGETS = 'Target.getTargets'",
        "detail": "pydoll.protocol.target.methods",
        "documentation": {}
    },
    {
        "label": "ActivateTargetParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class ActivateTargetParams(CommandParams):\n    targetId: str\nclass AttachToTargetParams(CommandParams):\n    targetId: str\n    flatten: NotRequired[bool]\nclass CloseTargetParams(CommandParams):\n    targetId: str\nclass CreateBrowserContextParams(CommandParams):\n    disposeOnDetach: NotRequired[bool]\n    proxyServer: NotRequired[str]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "AttachToTargetParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class AttachToTargetParams(CommandParams):\n    targetId: str\n    flatten: NotRequired[bool]\nclass CloseTargetParams(CommandParams):\n    targetId: str\nclass CreateBrowserContextParams(CommandParams):\n    disposeOnDetach: NotRequired[bool]\n    proxyServer: NotRequired[str]\n    proxyBypassList: NotRequired[str]\n    originsWithUniversalNetworkAccess: NotRequired[list[str]]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "CloseTargetParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class CloseTargetParams(CommandParams):\n    targetId: str\nclass CreateBrowserContextParams(CommandParams):\n    disposeOnDetach: NotRequired[bool]\n    proxyServer: NotRequired[str]\n    proxyBypassList: NotRequired[str]\n    originsWithUniversalNetworkAccess: NotRequired[list[str]]\nclass CreateTargetParams(CommandParams):\n    url: str\n    left: NotRequired[int]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "CreateBrowserContextParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class CreateBrowserContextParams(CommandParams):\n    disposeOnDetach: NotRequired[bool]\n    proxyServer: NotRequired[str]\n    proxyBypassList: NotRequired[str]\n    originsWithUniversalNetworkAccess: NotRequired[list[str]]\nclass CreateTargetParams(CommandParams):\n    url: str\n    left: NotRequired[int]\n    top: NotRequired[int]\n    width: NotRequired[int]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "CreateTargetParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class CreateTargetParams(CommandParams):\n    url: str\n    left: NotRequired[int]\n    top: NotRequired[int]\n    width: NotRequired[int]\n    height: NotRequired[int]\n    windowState: NotRequired[WindowState]\n    browserContextId: NotRequired[str]\n    enableBeginFrameControl: NotRequired[bool]\n    newWindow: NotRequired[bool]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "DetachFromTargetParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class DetachFromTargetParams(CommandParams):\n    sessionId: NotRequired[str]\nclass DisposeBrowserContextParams(CommandParams):\n    browserContextId: str\nclass GetTargetsParams(CommandParams):\n    filter: NotRequired[list]\nclass SetAutoAttachParams(CommandParams):\n    autoAttach: bool\n    waitForDebuggerOnStart: NotRequired[bool]\n    flatten: NotRequired[bool]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "DisposeBrowserContextParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class DisposeBrowserContextParams(CommandParams):\n    browserContextId: str\nclass GetTargetsParams(CommandParams):\n    filter: NotRequired[list]\nclass SetAutoAttachParams(CommandParams):\n    autoAttach: bool\n    waitForDebuggerOnStart: NotRequired[bool]\n    flatten: NotRequired[bool]\n    filter: NotRequired[list]\nclass SetDiscoverTargetsParams(CommandParams):",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "GetTargetsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class GetTargetsParams(CommandParams):\n    filter: NotRequired[list]\nclass SetAutoAttachParams(CommandParams):\n    autoAttach: bool\n    waitForDebuggerOnStart: NotRequired[bool]\n    flatten: NotRequired[bool]\n    filter: NotRequired[list]\nclass SetDiscoverTargetsParams(CommandParams):\n    discover: bool\n    filter: NotRequired[list]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "SetAutoAttachParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class SetAutoAttachParams(CommandParams):\n    autoAttach: bool\n    waitForDebuggerOnStart: NotRequired[bool]\n    flatten: NotRequired[bool]\n    filter: NotRequired[list]\nclass SetDiscoverTargetsParams(CommandParams):\n    discover: bool\n    filter: NotRequired[list]\nclass AttachToBrowserTargetParams(CommandParams):\n    sessionId: str",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "SetDiscoverTargetsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class SetDiscoverTargetsParams(CommandParams):\n    discover: bool\n    filter: NotRequired[list]\nclass AttachToBrowserTargetParams(CommandParams):\n    sessionId: str\nclass AutoAttachRelatedParams(CommandParams):\n    targetId: str\n    waitForDebuggerOnStart: NotRequired[bool]\n    filter: NotRequired[list]\nclass ExposeDevToolsProtocolParams(CommandParams):",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "AttachToBrowserTargetParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class AttachToBrowserTargetParams(CommandParams):\n    sessionId: str\nclass AutoAttachRelatedParams(CommandParams):\n    targetId: str\n    waitForDebuggerOnStart: NotRequired[bool]\n    filter: NotRequired[list]\nclass ExposeDevToolsProtocolParams(CommandParams):\n    targetId: str\n    bindingName: NotRequired[str]\n    inherintPermissions: NotRequired[bool]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "AutoAttachRelatedParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class AutoAttachRelatedParams(CommandParams):\n    targetId: str\n    waitForDebuggerOnStart: NotRequired[bool]\n    filter: NotRequired[list]\nclass ExposeDevToolsProtocolParams(CommandParams):\n    targetId: str\n    bindingName: NotRequired[str]\n    inherintPermissions: NotRequired[bool]\nclass GetTargetInfoParams(CommandParams):\n    targetId: str",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "ExposeDevToolsProtocolParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class ExposeDevToolsProtocolParams(CommandParams):\n    targetId: str\n    bindingName: NotRequired[str]\n    inherintPermissions: NotRequired[bool]\nclass GetTargetInfoParams(CommandParams):\n    targetId: str\nclass SetRemoteLocationsParams(CommandParams):\n    locations: list[RemoteLocation]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "GetTargetInfoParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class GetTargetInfoParams(CommandParams):\n    targetId: str\nclass SetRemoteLocationsParams(CommandParams):\n    locations: list[RemoteLocation]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "SetRemoteLocationsParams",
        "kind": 6,
        "importPath": "pydoll.protocol.target.params",
        "description": "pydoll.protocol.target.params",
        "peekOfCode": "class SetRemoteLocationsParams(CommandParams):\n    locations: list[RemoteLocation]",
        "detail": "pydoll.protocol.target.params",
        "documentation": {}
    },
    {
        "label": "AttachToTargetResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class AttachToTargetResultDict(TypedDict):\n    sessionId: str\nclass CreateBrowserContextResultDict(TypedDict):\n    browserContextId: str\nclass CreateTargetResultDict(TypedDict):\n    targetId: str\nclass GetBrowserContextsResultDict(TypedDict):\n    browserContextIds: list[str]\nclass GetTargetsResultDict(TypedDict):\n    targetInfos: list[TargetInfo]",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "CreateBrowserContextResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class CreateBrowserContextResultDict(TypedDict):\n    browserContextId: str\nclass CreateTargetResultDict(TypedDict):\n    targetId: str\nclass GetBrowserContextsResultDict(TypedDict):\n    browserContextIds: list[str]\nclass GetTargetsResultDict(TypedDict):\n    targetInfos: list[TargetInfo]\nclass AttachToBrowserTargetResultDict(TypedDict):\n    sessionId: str",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "CreateTargetResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class CreateTargetResultDict(TypedDict):\n    targetId: str\nclass GetBrowserContextsResultDict(TypedDict):\n    browserContextIds: list[str]\nclass GetTargetsResultDict(TypedDict):\n    targetInfos: list[TargetInfo]\nclass AttachToBrowserTargetResultDict(TypedDict):\n    sessionId: str\nclass GetTargetInfoResultDict(TypedDict):\n    targetInfo: TargetInfo",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetBrowserContextsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class GetBrowserContextsResultDict(TypedDict):\n    browserContextIds: list[str]\nclass GetTargetsResultDict(TypedDict):\n    targetInfos: list[TargetInfo]\nclass AttachToBrowserTargetResultDict(TypedDict):\n    sessionId: str\nclass GetTargetInfoResultDict(TypedDict):\n    targetInfo: TargetInfo\nclass AttachToTargetResponse(TypedDict):\n    result: AttachToTargetResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetTargetsResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class GetTargetsResultDict(TypedDict):\n    targetInfos: list[TargetInfo]\nclass AttachToBrowserTargetResultDict(TypedDict):\n    sessionId: str\nclass GetTargetInfoResultDict(TypedDict):\n    targetInfo: TargetInfo\nclass AttachToTargetResponse(TypedDict):\n    result: AttachToTargetResultDict\nclass CreateBrowserContextResponse(TypedDict):\n    result: CreateBrowserContextResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "AttachToBrowserTargetResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class AttachToBrowserTargetResultDict(TypedDict):\n    sessionId: str\nclass GetTargetInfoResultDict(TypedDict):\n    targetInfo: TargetInfo\nclass AttachToTargetResponse(TypedDict):\n    result: AttachToTargetResultDict\nclass CreateBrowserContextResponse(TypedDict):\n    result: CreateBrowserContextResultDict\nclass CreateTargetResponse(TypedDict):\n    result: CreateTargetResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetTargetInfoResultDict",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class GetTargetInfoResultDict(TypedDict):\n    targetInfo: TargetInfo\nclass AttachToTargetResponse(TypedDict):\n    result: AttachToTargetResultDict\nclass CreateBrowserContextResponse(TypedDict):\n    result: CreateBrowserContextResultDict\nclass CreateTargetResponse(TypedDict):\n    result: CreateTargetResultDict\nclass GetBrowserContextsResponse(TypedDict):\n    result: GetBrowserContextsResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "AttachToTargetResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class AttachToTargetResponse(TypedDict):\n    result: AttachToTargetResultDict\nclass CreateBrowserContextResponse(TypedDict):\n    result: CreateBrowserContextResultDict\nclass CreateTargetResponse(TypedDict):\n    result: CreateTargetResultDict\nclass GetBrowserContextsResponse(TypedDict):\n    result: GetBrowserContextsResultDict\nclass GetTargetsResponse(TypedDict):\n    result: GetTargetsResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "CreateBrowserContextResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class CreateBrowserContextResponse(TypedDict):\n    result: CreateBrowserContextResultDict\nclass CreateTargetResponse(TypedDict):\n    result: CreateTargetResultDict\nclass GetBrowserContextsResponse(TypedDict):\n    result: GetBrowserContextsResultDict\nclass GetTargetsResponse(TypedDict):\n    result: GetTargetsResultDict\nclass AttachToBrowserTargetResponse(TypedDict):\n    result: AttachToBrowserTargetResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "CreateTargetResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class CreateTargetResponse(TypedDict):\n    result: CreateTargetResultDict\nclass GetBrowserContextsResponse(TypedDict):\n    result: GetBrowserContextsResultDict\nclass GetTargetsResponse(TypedDict):\n    result: GetTargetsResultDict\nclass AttachToBrowserTargetResponse(TypedDict):\n    result: AttachToBrowserTargetResultDict\nclass GetTargetInfoResponse(TypedDict):\n    result: GetTargetInfoResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetBrowserContextsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class GetBrowserContextsResponse(TypedDict):\n    result: GetBrowserContextsResultDict\nclass GetTargetsResponse(TypedDict):\n    result: GetTargetsResultDict\nclass AttachToBrowserTargetResponse(TypedDict):\n    result: AttachToBrowserTargetResultDict\nclass GetTargetInfoResponse(TypedDict):\n    result: GetTargetInfoResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetTargetsResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class GetTargetsResponse(TypedDict):\n    result: GetTargetsResultDict\nclass AttachToBrowserTargetResponse(TypedDict):\n    result: AttachToBrowserTargetResultDict\nclass GetTargetInfoResponse(TypedDict):\n    result: GetTargetInfoResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "AttachToBrowserTargetResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class AttachToBrowserTargetResponse(TypedDict):\n    result: AttachToBrowserTargetResultDict\nclass GetTargetInfoResponse(TypedDict):\n    result: GetTargetInfoResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "GetTargetInfoResponse",
        "kind": 6,
        "importPath": "pydoll.protocol.target.responses",
        "description": "pydoll.protocol.target.responses",
        "peekOfCode": "class GetTargetInfoResponse(TypedDict):\n    result: GetTargetInfoResultDict",
        "detail": "pydoll.protocol.target.responses",
        "documentation": {}
    },
    {
        "label": "RemoteLocation",
        "kind": 6,
        "importPath": "pydoll.protocol.target.types",
        "description": "pydoll.protocol.target.types",
        "peekOfCode": "class RemoteLocation(TypedDict):\n    host: str\n    port: int\nclass TargetInfo(TypedDict):\n    targetId: str\n    type: str\n    title: str\n    url: str\n    attached: bool\n    openerId: NotRequired[str]",
        "detail": "pydoll.protocol.target.types",
        "documentation": {}
    },
    {
        "label": "TargetInfo",
        "kind": 6,
        "importPath": "pydoll.protocol.target.types",
        "description": "pydoll.protocol.target.types",
        "peekOfCode": "class TargetInfo(TypedDict):\n    targetId: str\n    type: str\n    title: str\n    url: str\n    attached: bool\n    openerId: NotRequired[str]\n    canAccessOpener: bool\n    openerFrameId: NotRequired[str]\n    browserContextId: NotRequired[str]",
        "detail": "pydoll.protocol.target.types",
        "documentation": {}
    },
    {
        "label": "CommandParams",
        "kind": 6,
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "peekOfCode": "class CommandParams(TypedDict, total=False):\n    \"\"\"Base structure for all command parameters.\"\"\"\n    pass\nclass Command(TypedDict, Generic[T_CommandResponse]):\n    \"\"\"Base structure for all commands.\n    Attributes:\n        method: The command method name\n        params: Optional dictionary of parameters for the command\n    \"\"\"\n    id: NotRequired[int]",
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "peekOfCode": "class Command(TypedDict, Generic[T_CommandResponse]):\n    \"\"\"Base structure for all commands.\n    Attributes:\n        method: The command method name\n        params: Optional dictionary of parameters for the command\n    \"\"\"\n    id: NotRequired[int]\n    method: str\n    params: NotRequired[CommandParams]\nclass ResponseResult(TypedDict, total=False):",
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "ResponseResult",
        "kind": 6,
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "peekOfCode": "class ResponseResult(TypedDict, total=False):\n    \"\"\"Base structure for all response results.\"\"\"\n    pass\nclass Response(TypedDict):\n    \"\"\"Base structure for all responses.\n    Attributes:\n        id: The ID that matches the command ID\n        result: The result data for the command\n    \"\"\"\n    id: int",
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "peekOfCode": "class Response(TypedDict):\n    \"\"\"Base structure for all responses.\n    Attributes:\n        id: The ID that matches the command ID\n        result: The result data for the command\n    \"\"\"\n    id: int\n    result: ResponseResult\nclass Event(TypedDict):\n    \"\"\"Base structure for all events.\"\"\"",
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "peekOfCode": "class Event(TypedDict):\n    \"\"\"Base structure for all events.\"\"\"\n    method: str\n    params: NotRequired[dict[str, str]]",
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "T_CommandResponse",
        "kind": 5,
        "importPath": "pydoll.protocol.base",
        "description": "pydoll.protocol.base",
        "peekOfCode": "T_CommandResponse = TypeVar('T_CommandResponse')\nclass CommandParams(TypedDict, total=False):\n    \"\"\"Base structure for all command parameters.\"\"\"\n    pass\nclass Command(TypedDict, Generic[T_CommandResponse]):\n    \"\"\"Base structure for all commands.\n    Attributes:\n        method: The command method name\n        params: Optional dictionary of parameters for the command\n    \"\"\"",
        "detail": "pydoll.protocol.base",
        "documentation": {}
    },
    {
        "label": "By",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class By(str, Enum):\n    CSS_SELECTOR = 'css'\n    XPATH = 'xpath'\n    CLASS_NAME = 'class_name'\n    ID = 'id'\n    TAG_NAME = 'tag_name'\n    NAME = 'name'\nclass Scripts:\n    ELEMENT_VISIBLE = \"\"\"\n    function() {",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "Scripts",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class Scripts:\n    ELEMENT_VISIBLE = \"\"\"\n    function() {\n        const rect = this.getBoundingClientRect();\n        return (\n            rect.width > 0 && rect.height > 0\n            && getComputedStyle(this).visibility !== 'hidden'\n            && getComputedStyle(this).display !== 'none'\n        )\n    }",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "Key",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class Key(tuple[str, int], Enum):\n    BACKSPACE = ('Backspace', 8)\n    TAB = ('Tab', 9)\n    ENTER = ('Enter', 13)\n    SHIFT = ('Shift', 16)\n    CONTROL = ('Control', 17)\n    ALT = ('Alt', 18)\n    PAUSE = ('Pause', 19)\n    CAPSLOCK = ('CapsLock', 20)\n    ESCAPE = ('Escape', 27)",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "BrowserType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class BrowserType(Enum):\n    CHROME = auto()\n    EDGE = auto()\nclass WindowState(str, Enum):\n    \"\"\"Possible states for a browser window.\"\"\"\n    MAXIMIZED = 'maximized'\n    MINIMIZED = 'minimized'\n    NORMAL = 'normal'\nclass DownloadBehavior(str, Enum):\n    \"\"\"Possible behaviors for download handling.\"\"\"",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WindowState",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class WindowState(str, Enum):\n    \"\"\"Possible states for a browser window.\"\"\"\n    MAXIMIZED = 'maximized'\n    MINIMIZED = 'minimized'\n    NORMAL = 'normal'\nclass DownloadBehavior(str, Enum):\n    \"\"\"Possible behaviors for download handling.\"\"\"\n    ALLOW = 'allow'\n    DENY = 'deny'\n    ALLOW_AND_NAME = 'allowAndName'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DownloadBehavior",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class DownloadBehavior(str, Enum):\n    \"\"\"Possible behaviors for download handling.\"\"\"\n    ALLOW = 'allow'\n    DENY = 'deny'\n    ALLOW_AND_NAME = 'allowAndName'\n    DEFAULT = 'default'\nclass PermissionType(str, Enum):\n    \"\"\"Browser permission types as defined in the Chrome DevTools Protocol.\"\"\"\n    AR = 'ar'\n    AUDIO_CAPTURE = 'audioCapture'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class PermissionType(str, Enum):\n    \"\"\"Browser permission types as defined in the Chrome DevTools Protocol.\"\"\"\n    AR = 'ar'\n    AUDIO_CAPTURE = 'audioCapture'\n    AUTOMATIC_FULLSCREEN = 'automaticFullscreen'\n    BACKGROUND_FETCH = 'backgroundFetch'\n    BACKGROUND_SYNC = 'backgroundSync'\n    CAMERA_PAN_TILT_ZOOM = 'cameraPanTiltZoom'\n    CAPTURED_SURFACE_CONTROL = 'capturedSurfaceControl'\n    CLIPBOARD_READ_WRITE = 'clipboardReadWrite'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestMethod",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class RequestMethod(str, Enum):\n    \"\"\"HTTP request methods.\"\"\"\n    GET = 'GET'\n    POST = 'POST'\n    OPTIONS = 'OPTIONS'\n    PUT = 'PUT'\n    DELETE = 'DELETE'\nclass AuthChallengeResponseValues(str, Enum):\n    DEFAULT = 'Default'\n    CANCEL_AUTH = 'CancelAuth'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AuthChallengeResponseValues",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class AuthChallengeResponseValues(str, Enum):\n    DEFAULT = 'Default'\n    CANCEL_AUTH = 'CancelAuth'\n    PROVIDE_CREDENTIALS = 'ProvideCredentials'\nclass ResourceType(str, Enum):\n    DOCUMENT = 'Document'\n    STYLESHEET = 'Stylesheet'\n    IMAGE = 'Image'\n    MEDIA = 'Media'\n    FONT = 'Font'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourceType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ResourceType(str, Enum):\n    DOCUMENT = 'Document'\n    STYLESHEET = 'Stylesheet'\n    IMAGE = 'Image'\n    MEDIA = 'Media'\n    FONT = 'Font'\n    SCRIPT = 'Script'\n    TEXT_TRACK = 'TextTrack'\n    XHR = 'XHR'\n    FETCH = 'Fetch'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RequestStage",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class RequestStage(str, Enum):\n    REQUEST = 'Request'\n    RESPONSE = 'Response'\nclass NetworkErrorReason(str, Enum):\n    \"\"\"Network level fetch failure reason.\"\"\"\n    FAILED = 'Failed'\n    ABORTED = 'Aborted'\n    TIMED_OUT = 'TimedOut'\n    ACCESS_DENIED = 'AccessDenied'\n    CONNECTION_CLOSED = 'ConnectionClosed'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkErrorReason",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class NetworkErrorReason(str, Enum):\n    \"\"\"Network level fetch failure reason.\"\"\"\n    FAILED = 'Failed'\n    ABORTED = 'Aborted'\n    TIMED_OUT = 'TimedOut'\n    ACCESS_DENIED = 'AccessDenied'\n    CONNECTION_CLOSED = 'ConnectionClosed'\n    CONNECTION_RESET = 'ConnectionReset'\n    CONNECTION_REFUSED = 'ConnectionRefused'\n    CONNECTION_ABORTED = 'ConnectionAborted'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookiePriority",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class CookiePriority(str, Enum):\n    \"\"\"Cookie priority levels.\"\"\"\n    LOW = 'Low'\n    MEDIUM = 'Medium'\n    HIGH = 'High'\nclass CookieSourceScheme(str, Enum):\n    \"\"\"Cookie source schemes.\"\"\"\n    UNSET = 'Unset'\n    NON_SECURE = 'NonSecure'\n    SECURE = 'Secure'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSourceScheme",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class CookieSourceScheme(str, Enum):\n    \"\"\"Cookie source schemes.\"\"\"\n    UNSET = 'Unset'\n    NON_SECURE = 'NonSecure'\n    SECURE = 'Secure'\nclass CookieSameSite(str, Enum):\n    \"\"\"Cookie same site values.\"\"\"\n    STRICT = 'Strict'\n    LAX = 'Lax'\n    NONE = 'None'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CookieSameSite",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class CookieSameSite(str, Enum):\n    \"\"\"Cookie same site values.\"\"\"\n    STRICT = 'Strict'\n    LAX = 'Lax'\n    NONE = 'None'\nclass ConnectionType(str, Enum):\n    \"\"\"Network connection types.\"\"\"\n    NONE = 'none'\n    CELLULAR2G = 'cellular2g'\n    CELLULAR3G = 'cellular3g'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ConnectionType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ConnectionType(str, Enum):\n    \"\"\"Network connection types.\"\"\"\n    NONE = 'none'\n    CELLULAR2G = 'cellular2g'\n    CELLULAR3G = 'cellular3g'\n    CELLULAR4G = 'cellular4g'\n    WIFI = 'wifi'\n    ETHERNET = 'ethernet'\n    BLUETOOTH = 'bluetooth'\n    WIMAX = 'wimax'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ContentEncoding",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ContentEncoding(str, Enum):\n    \"\"\"Content encoding types.\"\"\"\n    GZIP = 'gzip'\n    DEFLATE = 'deflate'\n    BR = 'br'\n    ZSTD = 'zstd'\nclass ScreenshotFormat(str, Enum):\n    \"\"\"Screenshot formats.\"\"\"\n    JPEG = 'jpeg'\n    PNG = 'png'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreenshotFormat",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ScreenshotFormat(str, Enum):\n    \"\"\"Screenshot formats.\"\"\"\n    JPEG = 'jpeg'\n    PNG = 'png'\n    WEBP = 'webp'\n    @classmethod\n    def has_value(cls, value: str) -> bool:\n        return value in cls._value2member_map_\n    @classmethod\n    def get_value(cls, value: str) -> 'ScreenshotFormat':",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransitionType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class TransitionType(str, Enum):\n    \"\"\"Transition types.\"\"\"\n    LINK = 'link'\n    TYPED = 'typed'\n    ADDRESS_BAR = 'address_bar'\n    AUTO_BOOKMARK = 'auto_bookmark'\n    AUTO_SUBFRAME = 'auto_subframe'\n    MANUAL_SUBFRAME = 'manual_subframe'\n    GENERATED = 'generated'\n    AUTO_TOPLEVEL = 'auto_toplevel'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ReferrerPolicy",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ReferrerPolicy(str, Enum):\n    \"\"\"Referrer policies.\"\"\"\n    NO_REFERRER = 'noReferrer'\n    NO_REFERRER_WHEN_DOWNGRADE = 'noReferrerWhenDowngrade'\n    ORIGIN = 'origin'\n    ORIGIN_WHEN_CROSS_ORIGIN = 'originWhenCrossOrigin'\n    SAME_ORIGIN = 'sameOrigin'\n    STRICT_ORIGIN = 'strictOrigin'\n    STRICT_ORIGIN_WHEN_CROSS_ORIGIN = 'strictOriginWhenCrossOrigin'\n    UNSAFE_URL = 'unsafeUrl'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TransferMode",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class TransferMode(str, Enum):\n    \"\"\"Transfer modes.\"\"\"\n    RETURN_AS_STREAM = 'returnAsStream'\n    RETURN_AS_BASE64 = 'returnAsBase64'\nclass AutoResponseMode(str, Enum):\n    NONE = 'none'\n    AUTO_ACCEPT = 'autoAccept'\n    AUTO_REJECT = 'autoReject'\n    AUTO_OPTOUT = 'autoOptout'\nclass WebLifecycleState(str, Enum):",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AutoResponseMode",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class AutoResponseMode(str, Enum):\n    NONE = 'none'\n    AUTO_ACCEPT = 'autoAccept'\n    AUTO_REJECT = 'autoReject'\n    AUTO_OPTOUT = 'autoOptout'\nclass WebLifecycleState(str, Enum):\n    \"\"\"Web lifecycle states.\"\"\"\n    FROZEN = 'frozen'\n    ACTIVE = 'active'\nclass ScreencastFormat(str, Enum):",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "WebLifecycleState",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class WebLifecycleState(str, Enum):\n    \"\"\"Web lifecycle states.\"\"\"\n    FROZEN = 'frozen'\n    ACTIVE = 'active'\nclass ScreencastFormat(str, Enum):\n    \"\"\"Screencast formats.\"\"\"\n    JPEG = 'jpeg'\n    PNG = 'png'\nclass OriginTrialStatus(str, Enum):\n    ENABLED = 'Enabled'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ScreencastFormat",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ScreencastFormat(str, Enum):\n    \"\"\"Screencast formats.\"\"\"\n    JPEG = 'jpeg'\n    PNG = 'png'\nclass OriginTrialStatus(str, Enum):\n    ENABLED = 'Enabled'\n    VALID_TOKEN_NOT_PROVIDED = 'ValidTokenNotProvided'\n    OS_NOT_SUPPORTED = 'OsNotSupported'\n    TRIAL_NOT_ALLOWED = 'TrialNotAllowed'\nclass OriginTrialUsageRestriction(str, Enum):",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "OriginTrialStatus",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class OriginTrialStatus(str, Enum):\n    ENABLED = 'Enabled'\n    VALID_TOKEN_NOT_PROVIDED = 'ValidTokenNotProvided'\n    OS_NOT_SUPPORTED = 'OsNotSupported'\n    TRIAL_NOT_ALLOWED = 'TrialNotAllowed'\nclass OriginTrialUsageRestriction(str, Enum):\n    NONE = 'None'\n    SUBSET = 'Subset'\nclass OriginTrialTokenStatus(str, Enum):\n    SUCCESS = 'Success'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "OriginTrialUsageRestriction",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class OriginTrialUsageRestriction(str, Enum):\n    NONE = 'None'\n    SUBSET = 'Subset'\nclass OriginTrialTokenStatus(str, Enum):\n    SUCCESS = 'Success'\n    NOT_SUPPORTED = 'NotSupported'\n    INSECURE = 'Insecure'\n    EXPIRED = 'Expired'\n    WRONG_ORIGIN = 'WrongOrigin'\n    INVALID_SIGNATURE = 'InvalidSignature'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "OriginTrialTokenStatus",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class OriginTrialTokenStatus(str, Enum):\n    SUCCESS = 'Success'\n    NOT_SUPPORTED = 'NotSupported'\n    INSECURE = 'Insecure'\n    EXPIRED = 'Expired'\n    WRONG_ORIGIN = 'WrongOrigin'\n    INVALID_SIGNATURE = 'InvalidSignature'\n    MALFORMED = 'Malformed'\n    WRONG_VERSION = 'WrongVersion'\n    FEATURE_DISABLED = 'FeatureDisabled'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionsPolicyBlockReason",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class PermissionsPolicyBlockReason(str, Enum):\n    HEADER = 'Header'\n    IFRAME_ATTRIBUTE = 'IframeAttribute'\n    IN_FANCED_FRAME_TREE = 'InFancedFrameTree'\n    IN_ISOLATED_APP = 'InIsolatedApp'\nclass PermissionsPolicyFeature(str, Enum):\n    ACCELEROMETER = 'accelerometer'\n    ALL_SCREENS_CAPTURE = 'all-screens-capture'\n    AMBIENT_LIGHT_SENSOR = 'ambient-light-sensor'\n    ATTRIBUTION_REPORTING = 'attribution-reporting'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PermissionsPolicyFeature",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class PermissionsPolicyFeature(str, Enum):\n    ACCELEROMETER = 'accelerometer'\n    ALL_SCREENS_CAPTURE = 'all-screens-capture'\n    AMBIENT_LIGHT_SENSOR = 'ambient-light-sensor'\n    ATTRIBUTION_REPORTING = 'attribution-reporting'\n    AUTOPLAY = 'autoplay'\n    BLUETOOTH = 'bluetooth'\n    BROWSING_TOPICS = 'browsing-topics'\n    CAMERA = 'camera'\n    CAPTURED_SURFACE_CONTROL = 'captured-surface-control'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CrossOriginOpenerPolicyStatus",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class CrossOriginOpenerPolicyStatus(str, Enum):\n    SAME_ORIGIN = 'SameOrigin'\n    SAME_ORIGIN_ALLOW_POPUPS = 'SameOriginAllowPopups'\n    RESTRICT_PROPERTIES = 'RestrictProperties'\n    UNSAFE_NONE = 'UnsafeNone'\n    SAME_ORIGIN_PLUS_COEP = 'SameOriginPlusCoep'\n    RESTRICT_PROPERTIES_PLUS_COEP = 'RestrictPropertiesPlusCoep'\n    NO_OPENER_ALLOW_POPUPS = 'NoopenerAllowPopups'\nclass CrossOriginEmbedderPolicyStatus(str, Enum):\n    \"\"\"Cross-origin embedder policy status values.\"\"\"",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CrossOriginEmbedderPolicyStatus",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class CrossOriginEmbedderPolicyStatus(str, Enum):\n    \"\"\"Cross-origin embedder policy status values.\"\"\"\n    NONE = 'None'\n    CREDENTIALLESS = 'Credentialless'\n    REQUIRE_CORP = 'RequireCorp'\nclass ContentSecurityPolicySource(str, Enum):\n    HTTP = 'HTTP'\n    META = 'Meta'\nclass UnserializableEnum(str, Enum):\n    NEGATIVE_ZERO = '-0'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ContentSecurityPolicySource",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ContentSecurityPolicySource(str, Enum):\n    HTTP = 'HTTP'\n    META = 'Meta'\nclass UnserializableEnum(str, Enum):\n    NEGATIVE_ZERO = '-0'\n    NAN = 'NaN'\n    INFINITY = 'Infinity'\n    NEGATIVE_INFINITY = '-Infinity'\nclass SerializationValue(str, Enum):\n    DEEP = 'deep'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "UnserializableEnum",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class UnserializableEnum(str, Enum):\n    NEGATIVE_ZERO = '-0'\n    NAN = 'NaN'\n    INFINITY = 'Infinity'\n    NEGATIVE_INFINITY = '-Infinity'\nclass SerializationValue(str, Enum):\n    DEEP = 'deep'\n    JSON = 'json'\n    ID_ONLY = 'idOnly'\nclass RemoteObjectType(str, Enum):",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "SerializationValue",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class SerializationValue(str, Enum):\n    DEEP = 'deep'\n    JSON = 'json'\n    ID_ONLY = 'idOnly'\nclass RemoteObjectType(str, Enum):\n    OBJECT = 'object'\n    FUNCTION = 'function'\n    UNDEFINED = 'undefined'\n    STRING = 'string'\n    NUMBER = 'number'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RemoteObjectType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class RemoteObjectType(str, Enum):\n    OBJECT = 'object'\n    FUNCTION = 'function'\n    UNDEFINED = 'undefined'\n    STRING = 'string'\n    NUMBER = 'number'\n    BOOLEAN = 'boolean'\n    SYMBOL = 'symbol'\n    BIGINT = 'bigint'\nclass RemoteObjectSubtype(str, Enum):",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RemoteObjectSubtype",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class RemoteObjectSubtype(str, Enum):\n    ARRAY = 'array'\n    NULL = 'null'\n    NODE = 'node'\n    REGEXP = 'regexp'\n    DATE = 'date'\n    MAP = 'map'\n    SET = 'set'\n    WEAK_MAP = 'weakmap'\n    WEAK_SET = 'weakset'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DeepSerializedValueType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class DeepSerializedValueType(str, Enum):\n    UNDEFINED = 'undefined'\n    NULL = 'null'\n    STRING = 'string'\n    NUMBER = 'number'\n    BOOLEAN = 'boolean'\n    BIGINT = 'bigint'\n    REGEXP = 'regexp'\n    DATE = 'date'\n    SYMBOL = 'symbol'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ObjectPreviewType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ObjectPreviewType(str, Enum):\n    OBJECT = 'object'\n    FUNCTION = 'function'\n    UNDEFINED = 'undefined'\n    STRING = 'string'\n    NUMBER = 'number'\n    BOOLEAN = 'boolean'\n    SYMBOL = 'symbol'\n    BIGINT = 'bigint'\nclass ObjectPreviewSubtype(str, Enum):",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ObjectPreviewSubtype",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ObjectPreviewSubtype(str, Enum):\n    ARRAY = 'array'\n    NULL = 'null'\n    NODE = 'node'\n    REGEXP = 'regexp'\n    DATE = 'date'\n    MAP = 'map'\n    SET = 'set'\n    WEAKMAP = 'weakmap'\n    WEAKSET = 'weakset'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PropertyPreviewType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class PropertyPreviewType(str, Enum):\n    OBJECT = 'object'\n    FUNCTION = 'function'\n    UNDEFINED = 'undefined'\n    STRING = 'string'\n    NUMBER = 'number'\n    BOOLEAN = 'boolean'\n    SYMBOL = 'symbol'\n    ACCESSOR = 'accessor'\n    BIGINT = 'bigint'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PropertyPreviewSubtype",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class PropertyPreviewSubtype(str, Enum):\n    ARRAY = 'array'\n    NULL = 'null'\n    NODE = 'node'\n    REGEXP = 'regexp'\n    DATE = 'date'\n    MAP = 'map'\n    SET = 'set'\n    WEAKMAP = 'weakmap'\n    WEAKSET = 'weakset'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "StorageBucketDurability",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class StorageBucketDurability(str, Enum):\n    RELAXED = 'relaxed'\n    STRICT = 'strict'\nclass StorageType(str, Enum):\n    COOKIES = 'cookies'\n    FILE_SYSTEMS = 'file_systems'\n    INDEXEDDB = 'indexeddb'\n    LOCAL_STORAGE = 'local_storage'\n    SHADER_CACHE = 'shader_cache'\n    WEBSQL = 'websql'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "StorageType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class StorageType(str, Enum):\n    COOKIES = 'cookies'\n    FILE_SYSTEMS = 'file_systems'\n    INDEXEDDB = 'indexeddb'\n    LOCAL_STORAGE = 'local_storage'\n    SHADER_CACHE = 'shader_cache'\n    WEBSQL = 'websql'\n    SERVICE_WORKERS = 'service_workers'\n    CACHE_STORAGE = 'cache_storage'\n    INTEREST_GROUPS = 'interest_groups'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyEventType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class KeyEventType(str, Enum):\n    KEY_DOWN = 'keyDown'\n    KEY_UP = 'keyUp'\n    CHAR = 'char'\n    RAW_KEY_DOWN = 'rawKeyDown'\nclass KeyModifier(int, Enum):\n    ALT = 1\n    CTRL = 2\n    META = 4\n    SHIFT = 8",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyModifier",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class KeyModifier(int, Enum):\n    ALT = 1\n    CTRL = 2\n    META = 4\n    SHIFT = 8\nclass KeyLocation(int, Enum):\n    LEFT = 1\n    RIGHT = 2\nclass MouseEventType(str, Enum):\n    MOUSE_PRESSED = 'mousePressed'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "KeyLocation",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class KeyLocation(int, Enum):\n    LEFT = 1\n    RIGHT = 2\nclass MouseEventType(str, Enum):\n    MOUSE_PRESSED = 'mousePressed'\n    MOUSE_RELEASED = 'mouseReleased'\n    MOUSE_MOVED = 'mouseMoved'\n    MOUSE_WHEEL = 'mouseWheel'\nclass MouseButton(str, Enum):\n    NONE = 'none'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseEventType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class MouseEventType(str, Enum):\n    MOUSE_PRESSED = 'mousePressed'\n    MOUSE_RELEASED = 'mouseReleased'\n    MOUSE_MOVED = 'mouseMoved'\n    MOUSE_WHEEL = 'mouseWheel'\nclass MouseButton(str, Enum):\n    NONE = 'none'\n    LEFT = 'left'\n    MIDDLE = 'middle'\n    RIGHT = 'right'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MouseButton",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class MouseButton(str, Enum):\n    NONE = 'none'\n    LEFT = 'left'\n    MIDDLE = 'middle'\n    RIGHT = 'right'\n    BACK = 'back'\n    FORWARD = 'forward'\nclass PointerType(str, Enum):\n    MOUSE = 'mouse'\n    PEN = 'pen'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PointerType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class PointerType(str, Enum):\n    MOUSE = 'mouse'\n    PEN = 'pen'\nclass TouchEventType(str, Enum):\n    TOUCH_START = 'touchStart'\n    TOUCH_MOVE = 'touchMove'\n    TOUCH_END = 'touchEnd'\n    TOUCH_CANCEL = 'touchCancel'\nclass DragEventType(str, Enum):\n    DRAG_ENTER = 'dragEnter'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TouchEventType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class TouchEventType(str, Enum):\n    TOUCH_START = 'touchStart'\n    TOUCH_MOVE = 'touchMove'\n    TOUCH_END = 'touchEnd'\n    TOUCH_CANCEL = 'touchCancel'\nclass DragEventType(str, Enum):\n    DRAG_ENTER = 'dragEnter'\n    DRAG_OVER = 'dragOver'\n    DROP = 'drop'\n    DRAG_CANCEL = 'dragCancel'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DragEventType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class DragEventType(str, Enum):\n    DRAG_ENTER = 'dragEnter'\n    DRAG_OVER = 'dragOver'\n    DROP = 'drop'\n    DRAG_CANCEL = 'dragCancel'\nclass GestureSourceType(str, Enum):\n    TOUCH = 'touch'\n    MOUSE = 'mouse'\n    DEFAULT = 'default'\nclass IncludeWhitespace(str, Enum):",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "GestureSourceType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class GestureSourceType(str, Enum):\n    TOUCH = 'touch'\n    MOUSE = 'mouse'\n    DEFAULT = 'default'\nclass IncludeWhitespace(str, Enum):\n    NONE = 'none'\n    ALL = 'all'\nclass PhysicalAxes(str, Enum):\n    HORIZONTAL = 'Horizontal'\n    VERTICAL = 'Vertical'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "IncludeWhitespace",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class IncludeWhitespace(str, Enum):\n    NONE = 'none'\n    ALL = 'all'\nclass PhysicalAxes(str, Enum):\n    HORIZONTAL = 'Horizontal'\n    VERTICAL = 'Vertical'\n    BOTH = 'Both'\nclass LogicalAxes(str, Enum):\n    INLINE = 'Inline'\n    BLOCK = 'Block'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PhysicalAxes",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class PhysicalAxes(str, Enum):\n    HORIZONTAL = 'Horizontal'\n    VERTICAL = 'Vertical'\n    BOTH = 'Both'\nclass LogicalAxes(str, Enum):\n    INLINE = 'Inline'\n    BLOCK = 'Block'\n    BOTH = 'Both'\nclass PseudoType(str, Enum):\n    FIRST_LINE = 'first-line'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "LogicalAxes",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class LogicalAxes(str, Enum):\n    INLINE = 'Inline'\n    BLOCK = 'Block'\n    BOTH = 'Both'\nclass PseudoType(str, Enum):\n    FIRST_LINE = 'first-line'\n    FIRST_LETTER = 'first-letter'\n    CHECKMARK = 'checkmark'\n    BEFORE = 'before'\n    AFTER = 'after'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PseudoType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class PseudoType(str, Enum):\n    FIRST_LINE = 'first-line'\n    FIRST_LETTER = 'first-letter'\n    CHECKMARK = 'checkmark'\n    BEFORE = 'before'\n    AFTER = 'after'\n    PICKER_ICON = 'picker-icon'\n    MARKER = 'marker'\n    BACKDROP = 'backdrop'\n    COLUMN = 'column'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ShadowRootType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ShadowRootType(str, Enum):\n    OPEN = 'open'\n    CLOSED = 'closed'\n    USER_AGENT = 'user-agent'\nclass CompatibilityMode(str, Enum):\n    QUIRKS_MODE = 'QuirksMode'\n    LIMITED_QUIRKS_MODE = 'LimitedQuirksMode'\n    NO_QUIRKS_MODE = 'NoQuirksMode'\nclass ElementRelation(str, Enum):\n    POPOVER_TARGET = 'PopoverTarget'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CompatibilityMode",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class CompatibilityMode(str, Enum):\n    QUIRKS_MODE = 'QuirksMode'\n    LIMITED_QUIRKS_MODE = 'LimitedQuirksMode'\n    NO_QUIRKS_MODE = 'NoQuirksMode'\nclass ElementRelation(str, Enum):\n    POPOVER_TARGET = 'PopoverTarget'\n    INTEREST_TARGET = 'InterestTarget'\nclass MixedContentType(str, Enum):\n    BLOCKABLE = 'blockable'\n    OPTIONALLY_BLOCKABLE = 'optionally-blockable'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ElementRelation",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ElementRelation(str, Enum):\n    POPOVER_TARGET = 'PopoverTarget'\n    INTEREST_TARGET = 'InterestTarget'\nclass MixedContentType(str, Enum):\n    BLOCKABLE = 'blockable'\n    OPTIONALLY_BLOCKABLE = 'optionally-blockable'\n    NONE = 'none'\nclass ResourcePriority(str, Enum):\n    VERY_LOW = 'VeryLow'\n    LOW = 'Low'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "MixedContentType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class MixedContentType(str, Enum):\n    BLOCKABLE = 'blockable'\n    OPTIONALLY_BLOCKABLE = 'optionally-blockable'\n    NONE = 'none'\nclass ResourcePriority(str, Enum):\n    VERY_LOW = 'VeryLow'\n    LOW = 'Low'\n    MEDIUM = 'Medium'\n    HIGH = 'High'\n    VERY_HIGH = 'VeryHigh'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "ResourcePriority",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class ResourcePriority(str, Enum):\n    VERY_LOW = 'VeryLow'\n    LOW = 'Low'\n    MEDIUM = 'Medium'\n    HIGH = 'High'\n    VERY_HIGH = 'VeryHigh'\nclass TrustTokenOperationType(str, Enum):\n    ISSUANCE = 'Issuance'\n    REDEMPTION = 'Redemption'\n    SIGNING = 'Signing'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "TrustTokenOperationType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class TrustTokenOperationType(str, Enum):\n    ISSUANCE = 'Issuance'\n    REDEMPTION = 'Redemption'\n    SIGNING = 'Signing'\nclass RefreshPolicy(str, Enum):\n    USE_CACHED = 'UseCached'\n    REFRESH = 'Refresh'\nclass DialogType(str, Enum):\n    ALERT = 'alert'\n    CONFIRM = 'confirm'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "RefreshPolicy",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class RefreshPolicy(str, Enum):\n    USE_CACHED = 'UseCached'\n    REFRESH = 'Refresh'\nclass DialogType(str, Enum):\n    ALERT = 'alert'\n    CONFIRM = 'confirm'\n    PROMPT = 'prompt'\n    BEFORE_UNLOAD = 'beforeunload'\nclass InitiatorType(str, Enum):\n    PARSER = 'parser'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "DialogType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class DialogType(str, Enum):\n    ALERT = 'alert'\n    CONFIRM = 'confirm'\n    PROMPT = 'prompt'\n    BEFORE_UNLOAD = 'beforeunload'\nclass InitiatorType(str, Enum):\n    PARSER = 'parser'\n    SCRIPT = 'script'\n    PRELOAD = 'preload'\n    SIGNED_EXCHANGE = 'SignedExchange'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "InitiatorType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class InitiatorType(str, Enum):\n    PARSER = 'parser'\n    SCRIPT = 'script'\n    PRELOAD = 'preload'\n    SIGNED_EXCHANGE = 'SignedExchange'\n    PREFLIGHT = 'preflight'\n    OTHER = 'other'\nclass NetworkServiceWorkerRouterSourceType(str, Enum):\n    \"\"\"Network service worker router source types.\"\"\"\n    NETWORK = 'network'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkServiceWorkerRouterSourceType",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class NetworkServiceWorkerRouterSourceType(str, Enum):\n    \"\"\"Network service worker router source types.\"\"\"\n    NETWORK = 'network'\n    CACHE = 'cache'\n    FETCH_EVENT = 'fetch-event'\n    RACE_NETWORK = 'race-network'\n    RACE_NETWORK_AND_FETCH_HANDLER = 'race-network-and-fetch-handler'\n    RACE_NETWORK_AND_CACHE = 'race-network-and-cache'\nclass NetworkServiceWorkerResponseSource(str, Enum):\n    \"\"\"Network service worker response source types.\"\"\"",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "NetworkServiceWorkerResponseSource",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class NetworkServiceWorkerResponseSource(str, Enum):\n    \"\"\"Network service worker response source types.\"\"\"\n    CACHE_STORAGE = 'cache-storage'\n    HTTP_CACHE = 'http-cache'\n    FALLBACK_CODE = 'fallback-code'\n    NETWORK = 'network'\nclass AlternateProtocolUsage(str, Enum):\n    \"\"\"Alternate protocol usage types.\"\"\"\n    ALTERNATIVE_JOB_WON_WITHOUT_RACE = 'alternativeJobWonWithoutRace'\n    ALTERNATIVE_JOB_WON_RACE = 'alternativeJobWonRace'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "AlternateProtocolUsage",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class AlternateProtocolUsage(str, Enum):\n    \"\"\"Alternate protocol usage types.\"\"\"\n    ALTERNATIVE_JOB_WON_WITHOUT_RACE = 'alternativeJobWonWithoutRace'\n    ALTERNATIVE_JOB_WON_RACE = 'alternativeJobWonRace'\n    MAIN_JOB_WON_RACE = 'mainJobWonRace'\n    MAPPING_MISSING = 'mappingMissing'\n    BROKEN = 'broken'\n    DNS_ALPN_H3_JOB_WON_WITHOUT_RACE = 'dnsAlpnH3JobWonWithoutRace'\n    DNS_ALPN_H3_JOB_WON_RACE = 'dnsAlpnH3JobWonRace'\n    UNSPECIFIED_REASON = 'unspecifiedReason'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "SecurityState",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class SecurityState(str, Enum):\n    \"\"\"Security state types.\"\"\"\n    UNKNOWN = 'unknown'\n    NEUTRAL = 'neutral'\n    INSECURE = 'insecure'\n    INFO = 'info'\n    INSECURE_BROKEN = 'insecure-broken'\nclass CertificateTransparencyCompliance(str, Enum):\n    \"\"\"Certificate transparency compliance types.\"\"\"\n    UNKNOWN = 'unknown'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "CertificateTransparencyCompliance",
        "kind": 6,
        "importPath": "pydoll.constants",
        "description": "pydoll.constants",
        "peekOfCode": "class CertificateTransparencyCompliance(str, Enum):\n    \"\"\"Certificate transparency compliance types.\"\"\"\n    UNKNOWN = 'unknown'\n    NOT_COMPLIANT = 'not-compliant'\n    COMPLIANT = 'compliant'",
        "detail": "pydoll.constants",
        "documentation": {}
    },
    {
        "label": "PydollException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class PydollException(Exception):\n    \"\"\"Base class for all Pydoll exceptions.\"\"\"\n    message = 'An error occurred in Pydoll'\n    def __init__(self, message: str = ''):\n        self.message = message or self.message\n    def __str__(self):\n        return self.message\nclass ConnectionException(PydollException):\n    \"\"\"Base class for exceptions related to browser connection.\"\"\"\n    message = 'A connection error occurred'",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ConnectionException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ConnectionException(PydollException):\n    \"\"\"Base class for exceptions related to browser connection.\"\"\"\n    message = 'A connection error occurred'\nclass ConnectionFailed(ConnectionException):\n    \"\"\"Raised when connection to the browser cannot be established.\"\"\"\n    message = 'Failed to connect to the browser'\nclass ReconnectionFailed(ConnectionException):\n    \"\"\"Raised when an attempt to reconnect to the browser fails.\"\"\"\n    message = 'Failed to reconnect to the browser'\nclass WebSocketConnectionClosed(ConnectionException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ConnectionFailed",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ConnectionFailed(ConnectionException):\n    \"\"\"Raised when connection to the browser cannot be established.\"\"\"\n    message = 'Failed to connect to the browser'\nclass ReconnectionFailed(ConnectionException):\n    \"\"\"Raised when an attempt to reconnect to the browser fails.\"\"\"\n    message = 'Failed to reconnect to the browser'\nclass WebSocketConnectionClosed(ConnectionException):\n    \"\"\"Raised when the WebSocket connection to the browser is closed unexpectedly.\"\"\"\n    message = 'The WebSocket connection is closed'\nclass NetworkError(ConnectionException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ReconnectionFailed",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ReconnectionFailed(ConnectionException):\n    \"\"\"Raised when an attempt to reconnect to the browser fails.\"\"\"\n    message = 'Failed to reconnect to the browser'\nclass WebSocketConnectionClosed(ConnectionException):\n    \"\"\"Raised when the WebSocket connection to the browser is closed unexpectedly.\"\"\"\n    message = 'The WebSocket connection is closed'\nclass NetworkError(ConnectionException):\n    \"\"\"Raised when a general network error occurs during browser communication.\"\"\"\n    message = 'A network error occurred'\nclass BrowserException(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WebSocketConnectionClosed",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class WebSocketConnectionClosed(ConnectionException):\n    \"\"\"Raised when the WebSocket connection to the browser is closed unexpectedly.\"\"\"\n    message = 'The WebSocket connection is closed'\nclass NetworkError(ConnectionException):\n    \"\"\"Raised when a general network error occurs during browser communication.\"\"\"\n    message = 'A network error occurred'\nclass BrowserException(PydollException):\n    \"\"\"Base class for exceptions related to browser process management.\"\"\"\n    message = 'A browser error occurred'\nclass BrowserNotRunning(BrowserException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NetworkError",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class NetworkError(ConnectionException):\n    \"\"\"Raised when a general network error occurs during browser communication.\"\"\"\n    message = 'A network error occurred'\nclass BrowserException(PydollException):\n    \"\"\"Base class for exceptions related to browser process management.\"\"\"\n    message = 'A browser error occurred'\nclass BrowserNotRunning(BrowserException):\n    \"\"\"Raised when attempting to interact with a browser that is not running.\"\"\"\n    message = 'The browser is not running'\nclass FailedToStartBrowser(BrowserException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "BrowserException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class BrowserException(PydollException):\n    \"\"\"Base class for exceptions related to browser process management.\"\"\"\n    message = 'A browser error occurred'\nclass BrowserNotRunning(BrowserException):\n    \"\"\"Raised when attempting to interact with a browser that is not running.\"\"\"\n    message = 'The browser is not running'\nclass FailedToStartBrowser(BrowserException):\n    \"\"\"Raised when the browser process cannot be started.\"\"\"\n    message = 'Failed to start the browser'\nclass UnsupportedOS(BrowserException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "BrowserNotRunning",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class BrowserNotRunning(BrowserException):\n    \"\"\"Raised when attempting to interact with a browser that is not running.\"\"\"\n    message = 'The browser is not running'\nclass FailedToStartBrowser(BrowserException):\n    \"\"\"Raised when the browser process cannot be started.\"\"\"\n    message = 'Failed to start the browser'\nclass UnsupportedOS(BrowserException):\n    \"\"\"Raised when attempting to run on an unsupported operating system.\"\"\"\n    message = 'Unsupported OS'\nclass NoValidTabFound(BrowserException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "FailedToStartBrowser",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class FailedToStartBrowser(BrowserException):\n    \"\"\"Raised when the browser process cannot be started.\"\"\"\n    message = 'Failed to start the browser'\nclass UnsupportedOS(BrowserException):\n    \"\"\"Raised when attempting to run on an unsupported operating system.\"\"\"\n    message = 'Unsupported OS'\nclass NoValidTabFound(BrowserException):\n    \"\"\"Raised when no valid browser tab can be found or created.\"\"\"\n    message = 'No valid attached tab found'\nclass ProtocolException(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "UnsupportedOS",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class UnsupportedOS(BrowserException):\n    \"\"\"Raised when attempting to run on an unsupported operating system.\"\"\"\n    message = 'Unsupported OS'\nclass NoValidTabFound(BrowserException):\n    \"\"\"Raised when no valid browser tab can be found or created.\"\"\"\n    message = 'No valid attached tab found'\nclass ProtocolException(PydollException):\n    \"\"\"Base class for exceptions related to CDP protocol communication.\"\"\"\n    message = 'A protocol error occurred'\nclass InvalidCommand(ProtocolException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NoValidTabFound",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class NoValidTabFound(BrowserException):\n    \"\"\"Raised when no valid browser tab can be found or created.\"\"\"\n    message = 'No valid attached tab found'\nclass ProtocolException(PydollException):\n    \"\"\"Base class for exceptions related to CDP protocol communication.\"\"\"\n    message = 'A protocol error occurred'\nclass InvalidCommand(ProtocolException):\n    \"\"\"Raised when an invalid command is sent to the browser.\"\"\"\n    message = 'The command provided is invalid'\nclass InvalidResponse(ProtocolException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ProtocolException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ProtocolException(PydollException):\n    \"\"\"Base class for exceptions related to CDP protocol communication.\"\"\"\n    message = 'A protocol error occurred'\nclass InvalidCommand(ProtocolException):\n    \"\"\"Raised when an invalid command is sent to the browser.\"\"\"\n    message = 'The command provided is invalid'\nclass InvalidResponse(ProtocolException):\n    \"\"\"Raised when an invalid response is received from the browser.\"\"\"\n    message = 'The response received is invalid'\nclass ResendCommandFailed(ProtocolException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidCommand",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class InvalidCommand(ProtocolException):\n    \"\"\"Raised when an invalid command is sent to the browser.\"\"\"\n    message = 'The command provided is invalid'\nclass InvalidResponse(ProtocolException):\n    \"\"\"Raised when an invalid response is received from the browser.\"\"\"\n    message = 'The response received is invalid'\nclass ResendCommandFailed(ProtocolException):\n    \"\"\"Raised when an attempt to resend a failed command fails.\"\"\"\n    message = 'Failed to resend the command'\nclass CommandExecutionTimeout(ProtocolException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidResponse",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class InvalidResponse(ProtocolException):\n    \"\"\"Raised when an invalid response is received from the browser.\"\"\"\n    message = 'The response received is invalid'\nclass ResendCommandFailed(ProtocolException):\n    \"\"\"Raised when an attempt to resend a failed command fails.\"\"\"\n    message = 'Failed to resend the command'\nclass CommandExecutionTimeout(ProtocolException):\n    \"\"\"Raised when a command execution times out.\"\"\"\n    message = 'The command execution timed out'\nclass InvalidCallback(ProtocolException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ResendCommandFailed",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ResendCommandFailed(ProtocolException):\n    \"\"\"Raised when an attempt to resend a failed command fails.\"\"\"\n    message = 'Failed to resend the command'\nclass CommandExecutionTimeout(ProtocolException):\n    \"\"\"Raised when a command execution times out.\"\"\"\n    message = 'The command execution timed out'\nclass InvalidCallback(ProtocolException):\n    \"\"\"Raised when an invalid callback is provided for an event.\"\"\"\n    message = 'The callback provided is invalid'\nclass EventNotSupported(ProtocolException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "CommandExecutionTimeout",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class CommandExecutionTimeout(ProtocolException):\n    \"\"\"Raised when a command execution times out.\"\"\"\n    message = 'The command execution timed out'\nclass InvalidCallback(ProtocolException):\n    \"\"\"Raised when an invalid callback is provided for an event.\"\"\"\n    message = 'The callback provided is invalid'\nclass EventNotSupported(ProtocolException):\n    \"\"\"Raised when an attempt is made to subscribe to an unsupported event.\"\"\"\n    message = 'The event is not supported'\nclass ElementException(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidCallback",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class InvalidCallback(ProtocolException):\n    \"\"\"Raised when an invalid callback is provided for an event.\"\"\"\n    message = 'The callback provided is invalid'\nclass EventNotSupported(ProtocolException):\n    \"\"\"Raised when an attempt is made to subscribe to an unsupported event.\"\"\"\n    message = 'The event is not supported'\nclass ElementException(PydollException):\n    \"\"\"Base class for exceptions related to element interactions.\"\"\"\n    message = 'An element interaction error occurred'\nclass ElementNotFound(ElementException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "EventNotSupported",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class EventNotSupported(ProtocolException):\n    \"\"\"Raised when an attempt is made to subscribe to an unsupported event.\"\"\"\n    message = 'The event is not supported'\nclass ElementException(PydollException):\n    \"\"\"Base class for exceptions related to element interactions.\"\"\"\n    message = 'An element interaction error occurred'\nclass ElementNotFound(ElementException):\n    \"\"\"Raised when an element cannot be found in the DOM.\"\"\"\n    message = 'The specified element was not found'\nclass ElementNotVisible(ElementException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ElementException(PydollException):\n    \"\"\"Base class for exceptions related to element interactions.\"\"\"\n    message = 'An element interaction error occurred'\nclass ElementNotFound(ElementException):\n    \"\"\"Raised when an element cannot be found in the DOM.\"\"\"\n    message = 'The specified element was not found'\nclass ElementNotVisible(ElementException):\n    \"\"\"Raised when attempting to interact with an element that is not visible.\"\"\"\n    message = 'The element is not visible'\nclass ElementNotInteractable(ElementException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotFound",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ElementNotFound(ElementException):\n    \"\"\"Raised when an element cannot be found in the DOM.\"\"\"\n    message = 'The specified element was not found'\nclass ElementNotVisible(ElementException):\n    \"\"\"Raised when attempting to interact with an element that is not visible.\"\"\"\n    message = 'The element is not visible'\nclass ElementNotInteractable(ElementException):\n    \"\"\"Raised when attempting to interact with an element that cannot receive interaction.\"\"\"\n    message = 'The element is not interactable'\nclass ClickIntercepted(ElementException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotVisible",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ElementNotVisible(ElementException):\n    \"\"\"Raised when attempting to interact with an element that is not visible.\"\"\"\n    message = 'The element is not visible'\nclass ElementNotInteractable(ElementException):\n    \"\"\"Raised when attempting to interact with an element that cannot receive interaction.\"\"\"\n    message = 'The element is not interactable'\nclass ClickIntercepted(ElementException):\n    \"\"\"Raised when a click operation is intercepted by another element.\"\"\"\n    message = 'The click was intercepted'\nclass ElementNotAFileInput(ElementException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotInteractable",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ElementNotInteractable(ElementException):\n    \"\"\"Raised when attempting to interact with an element that cannot receive interaction.\"\"\"\n    message = 'The element is not interactable'\nclass ClickIntercepted(ElementException):\n    \"\"\"Raised when a click operation is intercepted by another element.\"\"\"\n    message = 'The click was intercepted'\nclass ElementNotAFileInput(ElementException):\n    \"\"\"Raised when attempting to use file input methods on a non-file input element.\"\"\"\n    message = 'The element is not a file input'\nclass TimeoutException(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ClickIntercepted",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ClickIntercepted(ElementException):\n    \"\"\"Raised when a click operation is intercepted by another element.\"\"\"\n    message = 'The click was intercepted'\nclass ElementNotAFileInput(ElementException):\n    \"\"\"Raised when attempting to use file input methods on a non-file input element.\"\"\"\n    message = 'The element is not a file input'\nclass TimeoutException(PydollException):\n    \"\"\"Base class for exceptions related to timeouts.\"\"\"\n    message = 'A timeout occurred'\nclass PageLoadTimeout(TimeoutException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotAFileInput",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ElementNotAFileInput(ElementException):\n    \"\"\"Raised when attempting to use file input methods on a non-file input element.\"\"\"\n    message = 'The element is not a file input'\nclass TimeoutException(PydollException):\n    \"\"\"Base class for exceptions related to timeouts.\"\"\"\n    message = 'A timeout occurred'\nclass PageLoadTimeout(TimeoutException):\n    \"\"\"Raised when a page load operation times out.\"\"\"\n    message = 'Page load timed out'\nclass WaitElementTimeout(TimeoutException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class TimeoutException(PydollException):\n    \"\"\"Base class for exceptions related to timeouts.\"\"\"\n    message = 'A timeout occurred'\nclass PageLoadTimeout(TimeoutException):\n    \"\"\"Raised when a page load operation times out.\"\"\"\n    message = 'Page load timed out'\nclass WaitElementTimeout(TimeoutException):\n    \"\"\"Raised when waiting for an element times out.\"\"\"\n    message = 'Timed out waiting for element to appear'\nclass ConfigurationException(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "PageLoadTimeout",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class PageLoadTimeout(TimeoutException):\n    \"\"\"Raised when a page load operation times out.\"\"\"\n    message = 'Page load timed out'\nclass WaitElementTimeout(TimeoutException):\n    \"\"\"Raised when waiting for an element times out.\"\"\"\n    message = 'Timed out waiting for element to appear'\nclass ConfigurationException(PydollException):\n    \"\"\"Base class for exceptions related to configuration and options.\"\"\"\n    message = 'A configuration error occurred'\nclass InvalidOptionsObject(ConfigurationException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "WaitElementTimeout",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class WaitElementTimeout(TimeoutException):\n    \"\"\"Raised when waiting for an element times out.\"\"\"\n    message = 'Timed out waiting for element to appear'\nclass ConfigurationException(PydollException):\n    \"\"\"Base class for exceptions related to configuration and options.\"\"\"\n    message = 'A configuration error occurred'\nclass InvalidOptionsObject(ConfigurationException):\n    \"\"\"Raised when an invalid options object is provided.\"\"\"\n    message = 'The options object provided is invalid'\nclass InvalidBrowserPath(ConfigurationException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ConfigurationException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ConfigurationException(PydollException):\n    \"\"\"Base class for exceptions related to configuration and options.\"\"\"\n    message = 'A configuration error occurred'\nclass InvalidOptionsObject(ConfigurationException):\n    \"\"\"Raised when an invalid options object is provided.\"\"\"\n    message = 'The options object provided is invalid'\nclass InvalidBrowserPath(ConfigurationException):\n    \"\"\"Raised when an invalid browser executable path is provided.\"\"\"\n    message = 'The browser path provided is invalid'\nclass ArgumentAlreadyExistsInOptions(ConfigurationException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidOptionsObject",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class InvalidOptionsObject(ConfigurationException):\n    \"\"\"Raised when an invalid options object is provided.\"\"\"\n    message = 'The options object provided is invalid'\nclass InvalidBrowserPath(ConfigurationException):\n    \"\"\"Raised when an invalid browser executable path is provided.\"\"\"\n    message = 'The browser path provided is invalid'\nclass ArgumentAlreadyExistsInOptions(ConfigurationException):\n    \"\"\"Raised when attempting to add a duplicate argument to browser options.\"\"\"\n    message = 'The argument already exists in the options'\nclass InvalidFileExtension(ConfigurationException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidBrowserPath",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class InvalidBrowserPath(ConfigurationException):\n    \"\"\"Raised when an invalid browser executable path is provided.\"\"\"\n    message = 'The browser path provided is invalid'\nclass ArgumentAlreadyExistsInOptions(ConfigurationException):\n    \"\"\"Raised when attempting to add a duplicate argument to browser options.\"\"\"\n    message = 'The argument already exists in the options'\nclass InvalidFileExtension(ConfigurationException):\n    \"\"\"Raised when an unsupported file extension is provided.\"\"\"\n    message = 'The file extension provided is not supported'\nclass DialogException(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ArgumentAlreadyExistsInOptions",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ArgumentAlreadyExistsInOptions(ConfigurationException):\n    \"\"\"Raised when attempting to add a duplicate argument to browser options.\"\"\"\n    message = 'The argument already exists in the options'\nclass InvalidFileExtension(ConfigurationException):\n    \"\"\"Raised when an unsupported file extension is provided.\"\"\"\n    message = 'The file extension provided is not supported'\nclass DialogException(PydollException):\n    \"\"\"Base class for exceptions related to browser dialogs.\"\"\"\n    message = 'A dialog error occurred'\nclass NoDialogPresent(DialogException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidFileExtension",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class InvalidFileExtension(ConfigurationException):\n    \"\"\"Raised when an unsupported file extension is provided.\"\"\"\n    message = 'The file extension provided is not supported'\nclass DialogException(PydollException):\n    \"\"\"Base class for exceptions related to browser dialogs.\"\"\"\n    message = 'A dialog error occurred'\nclass NoDialogPresent(DialogException):\n    \"\"\"Raised when attempting to interact with a dialog that doesn't exist.\"\"\"\n    message = 'No dialog present on the page'\nclass NotAnIFrame(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "DialogException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class DialogException(PydollException):\n    \"\"\"Base class for exceptions related to browser dialogs.\"\"\"\n    message = 'A dialog error occurred'\nclass NoDialogPresent(DialogException):\n    \"\"\"Raised when attempting to interact with a dialog that doesn't exist.\"\"\"\n    message = 'No dialog present on the page'\nclass NotAnIFrame(PydollException):\n    \"\"\"Raised when an element is not an iframe.\"\"\"\n    message = 'The element is not an iframe'\nclass InvalidIFrame(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NoDialogPresent",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class NoDialogPresent(DialogException):\n    \"\"\"Raised when attempting to interact with a dialog that doesn't exist.\"\"\"\n    message = 'No dialog present on the page'\nclass NotAnIFrame(PydollException):\n    \"\"\"Raised when an element is not an iframe.\"\"\"\n    message = 'The element is not an iframe'\nclass InvalidIFrame(PydollException):\n    \"\"\"Raised when an iframe is not valid.\"\"\"\n    message = 'The iframe is not valid'\nclass IFrameNotFound(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAnIFrame",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class NotAnIFrame(PydollException):\n    \"\"\"Raised when an element is not an iframe.\"\"\"\n    message = 'The element is not an iframe'\nclass InvalidIFrame(PydollException):\n    \"\"\"Raised when an iframe is not valid.\"\"\"\n    message = 'The iframe is not valid'\nclass IFrameNotFound(PydollException):\n    \"\"\"Raised when an iframe is not found.\"\"\"\n    message = 'The iframe was not found'\nclass NetworkEventsNotEnabled(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidIFrame",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class InvalidIFrame(PydollException):\n    \"\"\"Raised when an iframe is not valid.\"\"\"\n    message = 'The iframe is not valid'\nclass IFrameNotFound(PydollException):\n    \"\"\"Raised when an iframe is not found.\"\"\"\n    message = 'The iframe was not found'\nclass NetworkEventsNotEnabled(PydollException):\n    \"\"\"Raised when network events are not enabled.\"\"\"\n    message = 'Network events not enabled'\nclass ScriptException(PydollException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "IFrameNotFound",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class IFrameNotFound(PydollException):\n    \"\"\"Raised when an iframe is not found.\"\"\"\n    message = 'The iframe was not found'\nclass NetworkEventsNotEnabled(PydollException):\n    \"\"\"Raised when network events are not enabled.\"\"\"\n    message = 'Network events not enabled'\nclass ScriptException(PydollException):\n    \"\"\"Base class for exceptions related to JavaScript execution.\"\"\"\n    message = 'A script execution error occurred'\nclass InvalidScriptWithElement(ScriptException):",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "NetworkEventsNotEnabled",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class NetworkEventsNotEnabled(PydollException):\n    \"\"\"Raised when network events are not enabled.\"\"\"\n    message = 'Network events not enabled'\nclass ScriptException(PydollException):\n    \"\"\"Base class for exceptions related to JavaScript execution.\"\"\"\n    message = 'A script execution error occurred'\nclass InvalidScriptWithElement(ScriptException):\n    \"\"\"Raised when a script contains 'argument' but no element is provided.\"\"\"\n    message = 'Script contains \"argument\" but no element was provided'",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "ScriptException",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class ScriptException(PydollException):\n    \"\"\"Base class for exceptions related to JavaScript execution.\"\"\"\n    message = 'A script execution error occurred'\nclass InvalidScriptWithElement(ScriptException):\n    \"\"\"Raised when a script contains 'argument' but no element is provided.\"\"\"\n    message = 'Script contains \"argument\" but no element was provided'",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidScriptWithElement",
        "kind": 6,
        "importPath": "pydoll.exceptions",
        "description": "pydoll.exceptions",
        "peekOfCode": "class InvalidScriptWithElement(ScriptException):\n    \"\"\"Raised when a script contains 'argument' but no element is provided.\"\"\"\n    message = 'Script contains \"argument\" but no element was provided'",
        "detail": "pydoll.exceptions",
        "documentation": {}
    },
    {
        "label": "TextExtractor",
        "kind": 6,
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "peekOfCode": "class TextExtractor(HTMLParser):\n    \"\"\"\n    HTML parser for text extraction.\n    Extracts visible text content from an HTML string, excluding the contents of\n    tags specified in _skip_tags.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._parts = []\n        self._skip = False",
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "extract_text_from_html",
        "kind": 2,
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "peekOfCode": "def extract_text_from_html(html: str, separator: str = '', strip: bool = False) -> str:\n    \"\"\"\n    Extracts visible text content from an HTML string.\n    Args:\n        html (str): The HTML string to extract text from.\n        separator (str, optional): String inserted between extracted text fragments. Defaults to ''.\n        strip (bool, optional): Whether to strip whitespace from text fragments. Defaults to False.\n    Returns:\n        str: The extracted visible text.\n    \"\"\"",
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "decode_base64_to_bytes",
        "kind": 2,
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "peekOfCode": "def decode_base64_to_bytes(image: str) -> bytes:\n    \"\"\"\n    Decodes a base64 image string to bytes.\n    Args:\n        image (str): The base64 image string to decode.\n    Returns:\n        bytes: The decoded image as bytes.\n    \"\"\"\n    return base64.b64decode(image.encode('utf-8'))\nasync def get_browser_ws_address(port: int) -> str:",
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "validate_browser_paths",
        "kind": 2,
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "peekOfCode": "def validate_browser_paths(paths: list[str]) -> str:\n    \"\"\"\n    Validates potential browser executable paths and returns the first valid one.\n    Checks a list of possible browser binary locations to find an existing,\n    executable browser. This is used by browser-specific subclasses to locate\n    the browser executable when no explicit binary path is provided.\n    Args:\n        paths: List of potential file paths to check for the browser executable.\n            These should be absolute paths appropriate for the current OS.\n    Returns:",
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "clean_script_for_analysis",
        "kind": 2,
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "peekOfCode": "def clean_script_for_analysis(script: str) -> str:\n    \"\"\"\n    Clean JavaScript code by removing comments and string literals.\n    This helps avoid false positives when analyzing script structure.\n    Args:\n        script: JavaScript code to clean.\n    Returns:\n        str: Cleaned script with comments and strings removed.\n    \"\"\"\n    # Remove line comments",
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "is_script_already_function",
        "kind": 2,
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "peekOfCode": "def is_script_already_function(script: str) -> bool:\n    \"\"\"\n    Check if a JavaScript script is already wrapped in a function.\n    Args:\n        script: JavaScript code to analyze.\n    Returns:\n        bool: True if script is already a function, False otherwise.\n    \"\"\"\n    cleaned_script = clean_script_for_analysis(script)\n    function_pattern = r'^\\s*function\\s*\\([^)]*\\)\\s*\\{'",
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "has_return_outside_function",
        "kind": 2,
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "peekOfCode": "def has_return_outside_function(script: str) -> bool:\n    \"\"\"\n    Check if a JavaScript script has return statements outside of functions.\n    Args:\n        script: JavaScript code to analyze.\n    Returns:\n        bool: True if script has return outside function, False otherwise.\n    \"\"\"\n    cleaned_script = clean_script_for_analysis(script)\n    # If already a function, no need to check",
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "pydoll.utils",
        "description": "pydoll.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TextExtractor(HTMLParser):\n    \"\"\"\n    HTML parser for text extraction.\n    Extracts visible text content from an HTML string, excluding the contents of\n    tags specified in _skip_tags.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._parts = []",
        "detail": "pydoll.utils",
        "documentation": {}
    },
    {
        "label": "ConcreteBrowser",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_base",
        "description": "tests.test_browser.test_browser_base",
        "peekOfCode": "class ConcreteBrowser(Browser):\n    def _get_default_binary_location(self) -> str:\n        return '/fake/path/to/browser'\n@pytest_asyncio.fixture\nasync def mock_browser():\n    with (\n        patch.multiple(\n            Browser,\n            _get_default_binary_location=MagicMock(\n                return_value='/fake/path/to/browser'",
        "detail": "tests.test_browser.test_browser_base",
        "documentation": {}
    },
    {
        "label": "test__is_valid_tab",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_base",
        "description": "tests.test_browser.test_browser_base",
        "peekOfCode": "def test__is_valid_tab(mock_browser):\n    result = mock_browser._is_valid_tab({\n        'type': 'page',\n        'url': 'chrome://newtab/',\n    })\n    assert result is True\ndef test__is_valid_tab_not_a_tab(mock_browser):\n    result = mock_browser._is_valid_tab({\n        'type': 'tab',\n        'url': 'chrome://newtab/',",
        "detail": "tests.test_browser.test_browser_base",
        "documentation": {}
    },
    {
        "label": "test__is_valid_tab_not_a_tab",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_base",
        "description": "tests.test_browser.test_browser_base",
        "peekOfCode": "def test__is_valid_tab_not_a_tab(mock_browser):\n    result = mock_browser._is_valid_tab({\n        'type': 'tab',\n        'url': 'chrome://newtab/',\n    })\n    assert result is False\n@pytest.mark.parametrize(\n    'os_name, expected_browser_paths, mock_return_value',\n    [\n        (",
        "detail": "tests.test_browser.test_browser_base",
        "documentation": {}
    },
    {
        "label": "test__get_default_binary_location",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_base",
        "description": "tests.test_browser.test_browser_base",
        "peekOfCode": "def test__get_default_binary_location(\n    mock_platform_system,\n    mock_validate_browser_paths,\n    os_name,\n    expected_browser_paths,\n    mock_return_value,\n):\n    mock_platform_system.return_value = os_name\n    mock_validate_browser_paths.return_value = mock_return_value\n    path = Chrome._get_default_binary_location()",
        "detail": "tests.test_browser.test_browser_base",
        "documentation": {}
    },
    {
        "label": "test__get_default_binary_location_unsupported_os",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_base",
        "description": "tests.test_browser.test_browser_base",
        "peekOfCode": "def test__get_default_binary_location_unsupported_os():\n    with patch('platform.system', return_value='SomethingElse'):\n        with pytest.raises(exceptions.UnsupportedOS, match='Unsupported OS: SomethingElse'):\n            Chrome._get_default_binary_location()\n@patch('platform.system')\ndef test__get_default_binary_location_throws_exception_if_os_not_supported(\n    mock_platform_system,\n):\n    mock_platform_system.return_value = 'FreeBSD'\n    with pytest.raises(exceptions.UnsupportedOS, match='Unsupported OS: FreeBSD'):",
        "detail": "tests.test_browser.test_browser_base",
        "documentation": {}
    },
    {
        "label": "test__get_default_binary_location_throws_exception_if_os_not_supported",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_base",
        "description": "tests.test_browser.test_browser_base",
        "peekOfCode": "def test__get_default_binary_location_throws_exception_if_os_not_supported(\n    mock_platform_system,\n):\n    mock_platform_system.return_value = 'FreeBSD'\n    with pytest.raises(exceptions.UnsupportedOS, match='Unsupported OS: FreeBSD'):\n        Chrome._get_default_binary_location()\n@pytest.mark.asyncio\nasync def test_create_browser_context(mock_browser):\n    mock_browser._execute_command = AsyncMock()\n    mock_browser._execute_command.return_value = {",
        "detail": "tests.test_browser.test_browser_base",
        "documentation": {}
    },
    {
        "label": "TestChromeInitialization",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_chrome",
        "description": "tests.test_browser.test_browser_chrome",
        "peekOfCode": "class TestChromeInitialization:\n    \"\"\"Tests for Chrome class initialization.\"\"\"\n    def test_chrome_initialization_default_options(self):\n        \"\"\"Test Chrome initialization with default options.\"\"\"\n        with patch.multiple(\n            Chrome,\n            _get_default_binary_location=MagicMock(return_value='/fake/chrome'),\n        ), patch(\n            'pydoll.browser.managers.browser_process_manager.BrowserProcessManager',\n            autospec=True,",
        "detail": "tests.test_browser.test_browser_chrome",
        "documentation": {}
    },
    {
        "label": "TestChromeDefaultBinaryLocation",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_chrome",
        "description": "tests.test_browser.test_browser_chrome",
        "peekOfCode": "class TestChromeDefaultBinaryLocation:\n    \"\"\"Tests for Chrome default binary location detection.\"\"\"\n    @pytest.mark.parametrize(\n        'os_name, expected_paths',\n        [\n            (\n                'Windows',\n                [\n                    r'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',\n                    r'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe',",
        "detail": "tests.test_browser.test_browser_chrome",
        "documentation": {}
    },
    {
        "label": "TestChromeOptionsManager",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_chrome",
        "description": "tests.test_browser.test_browser_chrome",
        "peekOfCode": "class TestChromeOptionsManager:\n    \"\"\"Tests for ChromiumOptionsManager integration.\"\"\"\n    def test_options_manager_creation(self):\n        \"\"\"Test options manager creation.\"\"\"\n        custom_options = ChromiumOptions()\n        custom_options.add_argument('--no-sandbox')\n        with patch.multiple(\n            Chrome,\n            _get_default_binary_location=MagicMock(return_value='/fake/chrome'),\n        ), patch(",
        "detail": "tests.test_browser.test_browser_chrome",
        "documentation": {}
    },
    {
        "label": "TestChromeInheritance",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_chrome",
        "description": "tests.test_browser.test_browser_chrome",
        "peekOfCode": "class TestChromeInheritance:\n    \"\"\"Tests to verify correct inheritance from Browser class.\"\"\"\n    def test_chrome_inherits_from_browser(self):\n        \"\"\"Test if Chrome correctly inherits from Browser.\"\"\"\n        from pydoll.browser.chromium.base import Browser\n        with patch.multiple(\n            Chrome,\n            _get_default_binary_location=MagicMock(return_value='/fake/chrome'),\n        ), patch(\n            'pydoll.browser.managers.browser_process_manager.BrowserProcessManager',",
        "detail": "tests.test_browser.test_browser_chrome",
        "documentation": {}
    },
    {
        "label": "TestChromeEdgeCases",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_chrome",
        "description": "tests.test_browser.test_browser_chrome",
        "peekOfCode": "class TestChromeEdgeCases:\n    \"\"\"Tests for edge cases and special situations.\"\"\"\n    def test_chrome_with_empty_options(self):\n        \"\"\"Test Chrome with empty options.\"\"\"\n        empty_options = ChromiumOptions()\n        with patch.multiple(\n            Chrome,\n            _get_default_binary_location=MagicMock(return_value='/fake/chrome'),\n        ), patch(\n            'pydoll.browser.managers.browser_process_manager.BrowserProcessManager',",
        "detail": "tests.test_browser.test_browser_chrome",
        "documentation": {}
    },
    {
        "label": "TestChromeIntegration",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_chrome",
        "description": "tests.test_browser.test_browser_chrome",
        "peekOfCode": "class TestChromeIntegration:\n    \"\"\"Integration tests to verify components working together.\"\"\"\n    def test_chrome_full_initialization_flow(self):\n        \"\"\"Test complete Chrome initialization flow.\"\"\"\n        custom_options = ChromiumOptions()\n        custom_options.add_argument('--disable-gpu')\n        custom_options.add_argument('--no-sandbox')\n        custom_options.binary_location = '/custom/chrome'\n        custom_port = 9876\n        with patch.multiple(",
        "detail": "tests.test_browser.test_browser_chrome",
        "documentation": {}
    },
    {
        "label": "TestEdgeInitialization",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_edge",
        "description": "tests.test_browser.test_browser_edge",
        "peekOfCode": "class TestEdgeInitialization:\n    \"\"\"Tests for Edge class initialization.\"\"\"\n    def test_edge_initialization_default_options(self):\n        \"\"\"Test Edge initialization with default options.\"\"\"\n        with patch.multiple(\n            Edge,\n            _get_default_binary_location=MagicMock(return_value='/fake/edge'),\n        ), patch(\n            'pydoll.browser.managers.browser_process_manager.BrowserProcessManager',\n            autospec=True,",
        "detail": "tests.test_browser.test_browser_edge",
        "documentation": {}
    },
    {
        "label": "TestEdgeDefaultBinaryLocation",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_edge",
        "description": "tests.test_browser.test_browser_edge",
        "peekOfCode": "class TestEdgeDefaultBinaryLocation:\n    \"\"\"Tests for Edge default binary location detection.\"\"\"\n    @pytest.mark.parametrize(\n        'os_name, expected_paths',\n        [\n            (\n                'Windows',\n                [\n                    r'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe',\n                    r'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe',",
        "detail": "tests.test_browser.test_browser_edge",
        "documentation": {}
    },
    {
        "label": "TestEdgeOptionsManager",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_edge",
        "description": "tests.test_browser.test_browser_edge",
        "peekOfCode": "class TestEdgeOptionsManager:\n    \"\"\"Tests for ChromiumOptionsManager integration.\"\"\"\n    def test_options_manager_creation(self):\n        \"\"\"Test options manager creation.\"\"\"\n        custom_options = ChromiumOptions()\n        custom_options.add_argument('--no-sandbox')\n        with patch.multiple(\n            Edge,\n            _get_default_binary_location=MagicMock(return_value='/fake/edge'),\n        ), patch(",
        "detail": "tests.test_browser.test_browser_edge",
        "documentation": {}
    },
    {
        "label": "TestEdgeInheritance",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_edge",
        "description": "tests.test_browser.test_browser_edge",
        "peekOfCode": "class TestEdgeInheritance:\n    \"\"\"Tests to verify correct inheritance from Browser class.\"\"\"\n    def test_edge_inherits_from_browser(self):\n        \"\"\"Test if Edge correctly inherits from Browser.\"\"\"\n        from pydoll.browser.chromium.base import Browser\n        with patch.multiple(\n            Edge,\n            _get_default_binary_location=MagicMock(return_value='/fake/edge'),\n        ), patch(\n            'pydoll.browser.managers.browser_process_manager.BrowserProcessManager',",
        "detail": "tests.test_browser.test_browser_edge",
        "documentation": {}
    },
    {
        "label": "TestEdgeEdgeCases",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_edge",
        "description": "tests.test_browser.test_browser_edge",
        "peekOfCode": "class TestEdgeEdgeCases:\n    \"\"\"Tests for edge cases and special situations.\"\"\"\n    def test_edge_with_empty_options(self):\n        \"\"\"Test Edge with empty options.\"\"\"\n        empty_options = ChromiumOptions()\n        with patch.multiple(\n            Edge,\n            _get_default_binary_location=MagicMock(return_value='/fake/edge'),\n        ), patch(\n            'pydoll.browser.managers.browser_process_manager.BrowserProcessManager',",
        "detail": "tests.test_browser.test_browser_edge",
        "documentation": {}
    },
    {
        "label": "TestEdgeIntegration",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_edge",
        "description": "tests.test_browser.test_browser_edge",
        "peekOfCode": "class TestEdgeIntegration:\n    \"\"\"Integration tests to verify components working together.\"\"\"\n    def test_edge_full_initialization_flow(self):\n        \"\"\"Test complete Edge initialization flow.\"\"\"\n        custom_options = ChromiumOptions()\n        custom_options.add_argument('--disable-gpu')\n        custom_options.add_argument('--no-sandbox')\n        custom_options.binary_location = '/custom/edge'\n        custom_port = 9876\n        with patch.multiple(",
        "detail": "tests.test_browser.test_browser_edge",
        "documentation": {}
    },
    {
        "label": "test_initial_arguments",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_options",
        "description": "tests.test_browser.test_browser_options",
        "peekOfCode": "def test_initial_arguments():\n    options = Options()\n    assert options.arguments == []\ndef test_initial_binary_location():\n    options = Options()\n    assert not options.binary_location\ndef test_set_binary_location():\n    options = Options()\n    options.binary_location = '/path/to/browser'\n    assert options.binary_location == '/path/to/browser'",
        "detail": "tests.test_browser.test_browser_options",
        "documentation": {}
    },
    {
        "label": "test_initial_binary_location",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_options",
        "description": "tests.test_browser.test_browser_options",
        "peekOfCode": "def test_initial_binary_location():\n    options = Options()\n    assert not options.binary_location\ndef test_set_binary_location():\n    options = Options()\n    options.binary_location = '/path/to/browser'\n    assert options.binary_location == '/path/to/browser'\ndef test_add_argument():\n    options = Options()\n    options.add_argument('--headless')",
        "detail": "tests.test_browser.test_browser_options",
        "documentation": {}
    },
    {
        "label": "test_set_binary_location",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_options",
        "description": "tests.test_browser.test_browser_options",
        "peekOfCode": "def test_set_binary_location():\n    options = Options()\n    options.binary_location = '/path/to/browser'\n    assert options.binary_location == '/path/to/browser'\ndef test_add_argument():\n    options = Options()\n    options.add_argument('--headless')\n    assert options.arguments == ['--headless']\ndef test_add_duplicate_argument():\n    options = Options()",
        "detail": "tests.test_browser.test_browser_options",
        "documentation": {}
    },
    {
        "label": "test_add_argument",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_options",
        "description": "tests.test_browser.test_browser_options",
        "peekOfCode": "def test_add_argument():\n    options = Options()\n    options.add_argument('--headless')\n    assert options.arguments == ['--headless']\ndef test_add_duplicate_argument():\n    options = Options()\n    options.add_argument('--headless')\n    with pytest.raises(\n        ArgumentAlreadyExistsInOptions, match='Argument already exists: --headless'\n    ):",
        "detail": "tests.test_browser.test_browser_options",
        "documentation": {}
    },
    {
        "label": "test_add_duplicate_argument",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_options",
        "description": "tests.test_browser.test_browser_options",
        "peekOfCode": "def test_add_duplicate_argument():\n    options = Options()\n    options.add_argument('--headless')\n    with pytest.raises(\n        ArgumentAlreadyExistsInOptions, match='Argument already exists: --headless'\n    ):\n        options.add_argument('--headless')\ndef test_add_multiple_arguments():\n    options = Options()\n    options.add_argument('--headless')",
        "detail": "tests.test_browser.test_browser_options",
        "documentation": {}
    },
    {
        "label": "test_add_multiple_arguments",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_options",
        "description": "tests.test_browser.test_browser_options",
        "peekOfCode": "def test_add_multiple_arguments():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    assert options.arguments == ['--headless', '--no-sandbox']",
        "detail": "tests.test_browser.test_browser_options",
        "documentation": {}
    },
    {
        "label": "TestTabInitialization",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabInitialization:\n    \"\"\"Test Tab initialization and basic properties.\"\"\"\n    def test_tab_initialization(self, tab, mock_browser):\n        \"\"\"Test basic Tab initialization.\"\"\"\n        assert tab._browser == mock_browser\n        assert tab._connection_port == 9222\n        assert tab._target_id.startswith('test-target-')  # Now using unique IDs\n        assert tab._browser_context_id == 'test-context-id'\n        assert not tab.page_events_enabled\n        assert not tab.network_events_enabled",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabProperties",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabProperties:\n    \"\"\"Test Tab async properties.\"\"\"\n    @pytest.mark.asyncio\n    async def test_current_url(self, tab):\n        \"\"\"Test current_url property.\"\"\"\n        tab._connection_handler.execute_command.return_value = {\n            'result': {'result': {'value': 'https://example.com'}}\n        }\n        url = await tab.current_url\n        assert url == 'https://example.com'",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabEventManagement",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabEventManagement:\n    \"\"\"Test Tab event enabling/disabling methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_enable_page_events(self, tab):\n        \"\"\"Test enabling page events.\"\"\"\n        await tab.enable_page_events()\n        assert tab.page_events_enabled is True\n        assert_mock_called_at_least_once(tab._connection_handler)\n    @pytest.mark.asyncio\n    async def test_enable_network_events(self, tab):",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabCookieManagement",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabCookieManagement:\n    \"\"\"Test Tab cookie management methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_get_cookies(self, tab):\n        \"\"\"Test getting cookies.\"\"\"\n        test_cookies = [{'name': 'test', 'value': 'value', 'domain': 'example.com'}]\n        tab._connection_handler.execute_command.return_value = {\n            'result': {'cookies': test_cookies}\n        }\n        cookies = await tab.get_cookies()",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabNavigation",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabNavigation:\n    \"\"\"Test Tab navigation methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_go_to_new_url(self, tab):\n        \"\"\"Test navigating to a new URL.\"\"\"\n        tab._connection_handler.execute_command.side_effect = [\n            {'result': {'result': {'value': 'https://old-url.com'}}},  # current_url\n            {'result': {'frameId': 'frame-id'}},  # navigate command\n            {'result': {'result': {'value': 'complete'}}},  # _wait_page_load\n        ]",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabScreenshotAndPDF",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabScreenshotAndPDF:\n    \"\"\"Test Tab screenshot and PDF methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_take_screenshot_to_file(self, tab, tmp_path):\n        \"\"\"Test taking screenshot and saving to file.\"\"\"\n        screenshot_data = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/wcAAgAB/edzE+oAAAAASUVORK5CYII='\n        tab._connection_handler.execute_command.return_value = {\n            'result': {'data': screenshot_data}\n        }\n        screenshot_path = tmp_path / 'screenshot.png'",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabDialogHandling",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabDialogHandling:\n    \"\"\"Test Tab dialog handling methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_has_dialog_true(self, tab):\n        \"\"\"Test has_dialog when dialog is present.\"\"\"\n        tab._connection_handler.dialog = {'params': {'type': 'alert', 'message': 'Test'}}\n        result = await tab.has_dialog()\n        assert result is True\n    @pytest.mark.asyncio\n    async def test_has_dialog_false(self, tab):",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabScriptExecution",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabScriptExecution:\n    \"\"\"Test Tab script execution methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_execute_script_simple(self, tab):\n        \"\"\"Test execute_script with simple JavaScript.\"\"\"\n        tab._connection_handler.execute_command.return_value = {\n            'result': {'result': {'value': 'Test Result'}}\n        }\n        result = await tab.execute_script('return \"Test Result\"')\n        assert_mock_called_at_least_once(tab._connection_handler)",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabEventCallbacks",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabEventCallbacks:\n    \"\"\"Test Tab event callback management.\"\"\"\n    @pytest.mark.asyncio\n    async def test_on_callback_registration(self, tab):\n        \"\"\"Test registering event callbacks.\"\"\"\n        callback_id = 123\n        tab._connection_handler.register_callback.return_value = callback_id\n        async def test_callback(event):\n            pass\n        result = await tab.on('Page.loadEventFired', test_callback)",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabFileChooser",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabFileChooser:\n    \"\"\"Test Tab file chooser functionality.\"\"\"\n    @pytest.mark.asyncio\n    async def test_expect_file_chooser_single_file(self, tab):\n        \"\"\"Test expect_file_chooser with single file.\"\"\"\n        tab._connection_handler.register_callback.return_value = 123\n        # Set initial state to False so methods get called\n        tab._page_events_enabled = False\n        tab._intercept_file_chooser_dialog_enabled = False\n        mock_enable_page_events = AsyncMock()",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabCloudflareBypass",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabCloudflareBypass:\n    \"\"\"Test Tab Cloudflare bypass functionality.\"\"\"\n    @pytest.mark.asyncio\n    async def test_enable_auto_solve_cloudflare_captcha(self, tab):\n        \"\"\"Test enabling auto-solve Cloudflare captcha.\"\"\"\n        callback_id = 999\n        tab._connection_handler.register_callback.return_value = callback_id\n        mock_enable_page_events = AsyncMock()\n        with patch.object(tab, 'enable_page_events', mock_enable_page_events):\n            await tab.enable_auto_solve_cloudflare_captcha()",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabFrameHandling",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabFrameHandling:\n    \"\"\"Test Tab iframe handling methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_get_frame_success(self, tab, mock_browser):\n        \"\"\"Test getting frame from iframe element.\"\"\"\n        mock_iframe_element = MagicMock()\n        mock_iframe_element.tag_name = 'iframe'\n        mock_iframe_element.get_attribute.return_value = 'https://example.com/iframe'\n        mock_iframe_element._object_id = 'iframe-object-id'\n        mock_browser.get_targets = AsyncMock(return_value=[",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabUtilityMethods",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabUtilityMethods:\n    \"\"\"Test Tab utility and helper methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_close(self, tab, mock_browser):\n        \"\"\"Test closing the tab.\"\"\"\n        with patch.object(tab, '_execute_command', AsyncMock()) as mock_execute:\n            await tab.close()\n            # Should call _execute_command with PageCommands.close()\n            mock_execute.assert_called_once()\n    @pytest.mark.asyncio",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabEdgeCases",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabEdgeCases:\n    \"\"\"Test Tab edge cases and error conditions.\"\"\"\n    @pytest.mark.asyncio\n    async def test_take_screenshot_invalid_extension(self, tab):\n        \"\"\"Test take_screenshot with invalid file extension.\"\"\"\n        with pytest.raises(InvalidFileExtension):\n            await tab.take_screenshot('screenshot.txt')\n    @pytest.mark.asyncio\n    async def test_print_to_pdf_with_invalid_path(self, tab):\n        \"\"\"Test print_to_pdf with invalid path handling.\"\"\"",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabNetworkMethods",
        "kind": 6,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "class TestTabNetworkMethods:\n    \"\"\"Test Tab network-related methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_get_network_response_body_success(self, tab):\n        \"\"\"Test get_network_response_body with network events enabled.\"\"\"\n        # Enable network events\n        tab._network_events_enabled = True\n        # Mock the response\n        expected_body = '<html><body>Response content</body></html>'\n        tab._connection_handler.execute_command.return_value = {",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "assert_mock_called_at_least_once",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "def assert_mock_called_at_least_once(mock_obj, method_name='execute_command'):\n    \"\"\"\n    Helper function to assert that a mock was called at least once.\n    This is more robust than assert_called_once() for singleton tests.\n    \"\"\"\n    mock_method = getattr(mock_obj, method_name)\n    mock_method.assert_called()\n    assert mock_method.call_count >= 1\n@pytest.fixture(autouse=True)\ndef cleanup_tab_registry():",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "cleanup_tab_registry",
        "kind": 2,
        "importPath": "tests.test_browser.test_browser_tab",
        "description": "tests.test_browser.test_browser_tab",
        "peekOfCode": "def cleanup_tab_registry():\n    \"\"\"Automatically clean up Tab singleton registry after each test.\"\"\"\n    yield\n    Tab._instances.clear()\nclass TestTabInitialization:\n    \"\"\"Test Tab initialization and basic properties.\"\"\"\n    def test_tab_initialization(self, tab, mock_browser):\n        \"\"\"Test basic Tab initialization.\"\"\"\n        assert tab._browser == mock_browser\n        assert tab._connection_port == 9222",
        "detail": "tests.test_browser.test_browser_tab",
        "documentation": {}
    },
    {
        "label": "TestTabSingleton",
        "kind": 6,
        "importPath": "tests.test_browser.test_tab_singleton",
        "description": "tests.test_browser.test_tab_singleton",
        "peekOfCode": "class TestTabSingleton:\n    \"\"\"Tests for Tab singleton behavior.\"\"\"\n    def setup_method(self):\n        \"\"\"Clear instance registry before each test.\"\"\"\n        Tab._instances.clear()\n    def teardown_method(self):\n        \"\"\"Clear instance registry after each test.\"\"\"\n        Tab._instances.clear()\n    def test_same_target_id_returns_same_instance(self):\n        \"\"\"Test that same target_id returns the same instance.\"\"\"",
        "detail": "tests.test_browser.test_tab_singleton",
        "documentation": {}
    },
    {
        "label": "test_get_version",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_get_version():\n    \"\"\"Test get_version command generation.\"\"\"\n    command = BrowserCommands.get_version()\n    assert command['method'] == BrowserMethod.GET_VERSION\n    assert 'params' not in command\ndef test_reset_permissions_without_context():\n    \"\"\"Test reset_permissions command without browser context.\"\"\"\n    command = BrowserCommands.reset_permissions()\n    assert command['method'] == BrowserMethod.RESET_PERMISSIONS\n    assert command['params'] == {}",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_reset_permissions_without_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_reset_permissions_without_context():\n    \"\"\"Test reset_permissions command without browser context.\"\"\"\n    command = BrowserCommands.reset_permissions()\n    assert command['method'] == BrowserMethod.RESET_PERMISSIONS\n    assert command['params'] == {}\ndef test_reset_permissions_with_context():\n    \"\"\"Test reset_permissions command with browser context.\"\"\"\n    browser_context_id = \"test-context-123\"\n    command = BrowserCommands.reset_permissions(browser_context_id=browser_context_id)\n    assert command['method'] == BrowserMethod.RESET_PERMISSIONS",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_reset_permissions_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_reset_permissions_with_context():\n    \"\"\"Test reset_permissions command with browser context.\"\"\"\n    browser_context_id = \"test-context-123\"\n    command = BrowserCommands.reset_permissions(browser_context_id=browser_context_id)\n    assert command['method'] == BrowserMethod.RESET_PERMISSIONS\n    assert command['params']['browserContextId'] == browser_context_id\ndef test_cancel_download_minimal():\n    \"\"\"Test cancel_download command with minimal parameters.\"\"\"\n    guid = \"download-guid-123\"\n    command = BrowserCommands.cancel_download(guid=guid)",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_cancel_download_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_cancel_download_minimal():\n    \"\"\"Test cancel_download command with minimal parameters.\"\"\"\n    guid = \"download-guid-123\"\n    command = BrowserCommands.cancel_download(guid=guid)\n    assert command['method'] == BrowserMethod.CANCEL_DOWNLOAD\n    assert command['params']['guid'] == guid\n    assert 'browserContextId' not in command['params']\ndef test_cancel_download_with_context():\n    \"\"\"Test cancel_download command with browser context.\"\"\"\n    guid = \"download-guid-456\"",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_cancel_download_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_cancel_download_with_context():\n    \"\"\"Test cancel_download command with browser context.\"\"\"\n    guid = \"download-guid-456\"\n    browser_context_id = \"test-context-456\"\n    command = BrowserCommands.cancel_download(\n        guid=guid, \n        browser_context_id=browser_context_id\n    )\n    assert command['method'] == BrowserMethod.CANCEL_DOWNLOAD\n    assert command['params']['guid'] == guid",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_crash",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_crash():\n    \"\"\"Test crash command generation.\"\"\"\n    command = BrowserCommands.crash()\n    assert command['method'] == BrowserMethod.CRASH\n    assert 'params' not in command\ndef test_crash_gpu_process():\n    \"\"\"Test crash_gpu_process command generation.\"\"\"\n    command = BrowserCommands.crash_gpu_process()\n    assert command['method'] == BrowserMethod.CRASH_GPU_PROCESS\n    assert 'params' not in command",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_crash_gpu_process",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_crash_gpu_process():\n    \"\"\"Test crash_gpu_process command generation.\"\"\"\n    command = BrowserCommands.crash_gpu_process()\n    assert command['method'] == BrowserMethod.CRASH_GPU_PROCESS\n    assert 'params' not in command\ndef test_set_download_behavior_minimal():\n    \"\"\"Test set_download_behavior with minimal parameters.\"\"\"\n    behavior = DownloadBehavior.ALLOW\n    command = BrowserCommands.set_download_behavior(behavior=behavior)\n    assert command['method'] == BrowserMethod.SET_DOWNLOAD_BEHAVIOR",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_set_download_behavior_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_set_download_behavior_minimal():\n    \"\"\"Test set_download_behavior with minimal parameters.\"\"\"\n    behavior = DownloadBehavior.ALLOW\n    command = BrowserCommands.set_download_behavior(behavior=behavior)\n    assert command['method'] == BrowserMethod.SET_DOWNLOAD_BEHAVIOR\n    assert command['params']['behavior'] == behavior\n    assert command['params']['eventsEnabled'] is True\n    assert 'downloadPath' not in command['params']\n    assert 'browserContextId' not in command['params']\ndef test_set_download_behavior_with_path():",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_set_download_behavior_with_path",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_set_download_behavior_with_path():\n    \"\"\"Test set_download_behavior with download path.\"\"\"\n    behavior = DownloadBehavior.ALLOW\n    download_path = \"/path/to/downloads\"\n    command = BrowserCommands.set_download_behavior(\n        behavior=behavior,\n        download_path=download_path\n    )\n    assert command['method'] == BrowserMethod.SET_DOWNLOAD_BEHAVIOR\n    assert command['params']['behavior'] == behavior",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_set_download_behavior_full_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_set_download_behavior_full_params():\n    \"\"\"Test set_download_behavior with all parameters.\"\"\"\n    behavior = DownloadBehavior.ALLOW_AND_NAME\n    download_path = \"/custom/download/path\"\n    browser_context_id = \"context-789\"\n    events_enabled = False\n    command = BrowserCommands.set_download_behavior(\n        behavior=behavior,\n        download_path=download_path,\n        browser_context_id=browser_context_id,",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_set_download_behavior_default_behavior",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_set_download_behavior_default_behavior():\n    \"\"\"Test set_download_behavior with DEFAULT behavior.\"\"\"\n    behavior = DownloadBehavior.DEFAULT\n    command = BrowserCommands.set_download_behavior(behavior=behavior)\n    assert command['method'] == BrowserMethod.SET_DOWNLOAD_BEHAVIOR\n    assert command['params']['behavior'] == behavior\ndef test_close():\n    \"\"\"Test close command generation.\"\"\"\n    command = BrowserCommands.close()\n    assert command['method'] == BrowserMethod.CLOSE",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_close",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_close():\n    \"\"\"Test close command generation.\"\"\"\n    command = BrowserCommands.close()\n    assert command['method'] == BrowserMethod.CLOSE\n    assert 'params' not in command\ndef test_get_window_for_target():\n    \"\"\"Test get_window_for_target command generation.\"\"\"\n    target_id = \"target-123\"\n    command = BrowserCommands.get_window_for_target(target_id=target_id)\n    assert command['method'] == BrowserMethod.GET_WINDOW_FOR_TARGET",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_get_window_for_target",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_get_window_for_target():\n    \"\"\"Test get_window_for_target command generation.\"\"\"\n    target_id = \"target-123\"\n    command = BrowserCommands.get_window_for_target(target_id=target_id)\n    assert command['method'] == BrowserMethod.GET_WINDOW_FOR_TARGET\n    assert command['params']['targetId'] == target_id\ndef test_set_window_bounds():\n    \"\"\"Test set_window_bounds command generation.\"\"\"\n    window_id = 42\n    bounds = {",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_set_window_bounds",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_set_window_bounds():\n    \"\"\"Test set_window_bounds command generation.\"\"\"\n    window_id = 42\n    bounds = {\n        'width': 1920,\n        'height': 1080,\n        'x': 100,\n        'y': 50,\n        'windowState': WindowState.NORMAL\n    }",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_set_window_bounds_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_set_window_bounds_minimal():\n    \"\"\"Test set_window_bounds with minimal bounds.\"\"\"\n    window_id = 1\n    bounds = {'windowState': WindowState.MAXIMIZED}\n    command = BrowserCommands.set_window_bounds(window_id=window_id, bounds=bounds)\n    assert command['method'] == BrowserMethod.SET_WINDOW_BOUNDS\n    assert command['params']['windowId'] == window_id\n    assert command['params']['bounds'] == bounds\ndef test_set_window_maximized():\n    \"\"\"Test set_window_maximized command generation.\"\"\"",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_set_window_maximized",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_set_window_maximized():\n    \"\"\"Test set_window_maximized command generation.\"\"\"\n    window_id = 5\n    command = BrowserCommands.set_window_maximized(window_id=window_id)\n    assert command['method'] == BrowserMethod.SET_WINDOW_BOUNDS\n    assert command['params']['windowId'] == window_id\n    assert command['params']['bounds']['windowState'] == WindowState.MAXIMIZED\ndef test_set_window_minimized():\n    \"\"\"Test set_window_minimized command generation.\"\"\"\n    window_id = 10",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_set_window_minimized",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_set_window_minimized():\n    \"\"\"Test set_window_minimized command generation.\"\"\"\n    window_id = 10\n    command = BrowserCommands.set_window_minimized(window_id=window_id)\n    assert command['method'] == BrowserMethod.SET_WINDOW_BOUNDS\n    assert command['params']['windowId'] == window_id\n    assert command['params']['bounds']['windowState'] == WindowState.MINIMIZED\ndef test_grant_permissions_minimal():\n    \"\"\"Test grant_permissions with minimal parameters.\"\"\"\n    permissions = [PermissionType.GEOLOCATION, PermissionType.NOTIFICATIONS]",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_grant_permissions_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_grant_permissions_minimal():\n    \"\"\"Test grant_permissions with minimal parameters.\"\"\"\n    permissions = [PermissionType.GEOLOCATION, PermissionType.NOTIFICATIONS]\n    command = BrowserCommands.grant_permissions(permissions=permissions)\n    assert command['method'] == BrowserMethod.GRANT_PERMISSIONS\n    assert command['params']['permissions'] == permissions\n    assert 'origin' not in command['params']\n    assert 'browserContextId' not in command['params']\ndef test_grant_permissions_with_origin():\n    \"\"\"Test grant_permissions with origin.\"\"\"",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_grant_permissions_with_origin",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_grant_permissions_with_origin():\n    \"\"\"Test grant_permissions with origin.\"\"\"\n    permissions = [PermissionType.DISPLAY_CAPTURE]\n    origin = \"https://example.com\"\n    command = BrowserCommands.grant_permissions(\n        permissions=permissions,\n        origin=origin\n    )\n    assert command['method'] == BrowserMethod.GRANT_PERMISSIONS\n    assert command['params']['permissions'] == permissions",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_grant_permissions_full_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_grant_permissions_full_params():\n    \"\"\"Test grant_permissions with all parameters.\"\"\"\n    permissions = [PermissionType.MIDI, PermissionType.CLIPBOARD_READ_WRITE]\n    origin = \"https://test.example.com\"\n    browser_context_id = \"context-permissions\"\n    command = BrowserCommands.grant_permissions(\n        permissions=permissions,\n        origin=origin,\n        browser_context_id=browser_context_id\n    )",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_grant_permissions_single_permission",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_grant_permissions_single_permission():\n    \"\"\"Test grant_permissions with single permission.\"\"\"\n    permissions = [PermissionType.PAYMENT_HANDLER]\n    command = BrowserCommands.grant_permissions(permissions=permissions)\n    assert command['method'] == BrowserMethod.GRANT_PERMISSIONS\n    assert command['params']['permissions'] == permissions\ndef test_grant_permissions_multiple_permissions():\n    \"\"\"Test grant_permissions with multiple permissions.\"\"\"\n    permissions = [\n        PermissionType.GEOLOCATION,",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_grant_permissions_multiple_permissions",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_grant_permissions_multiple_permissions():\n    \"\"\"Test grant_permissions with multiple permissions.\"\"\"\n    permissions = [\n        PermissionType.GEOLOCATION,\n        PermissionType.NOTIFICATIONS,\n        PermissionType.MIDI\n    ]\n    command = BrowserCommands.grant_permissions(permissions=permissions)\n    assert command['method'] == BrowserMethod.GRANT_PERMISSIONS\n    assert command['params']['permissions'] == permissions",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_grant_permissions_empty_list",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_grant_permissions_empty_list():\n    \"\"\"Test grant_permissions with empty permissions list.\"\"\"\n    permissions = []\n    command = BrowserCommands.grant_permissions(permissions=permissions)\n    assert command['method'] == BrowserMethod.GRANT_PERMISSIONS\n    assert command['params']['permissions'] == permissions\n# Edge cases and additional coverage tests\ndef test_window_bounds_with_all_states():\n    \"\"\"Test window bounds with all possible window states.\"\"\"\n    window_id = 1",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_window_bounds_with_all_states",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_window_bounds_with_all_states():\n    \"\"\"Test window bounds with all possible window states.\"\"\"\n    window_id = 1\n    # Test NORMAL state\n    bounds_normal = {'windowState': WindowState.NORMAL}\n    command_normal = BrowserCommands.set_window_bounds(window_id, bounds_normal)\n    assert command_normal['params']['bounds']['windowState'] == WindowState.NORMAL\n    # Test MAXIMIZED state\n    bounds_max = {'windowState': WindowState.MAXIMIZED}\n    command_max = BrowserCommands.set_window_bounds(window_id, bounds_max)",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_download_behaviors",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_download_behaviors():\n    \"\"\"Test all download behavior types.\"\"\"\n    # Test ALLOW\n    command_allow = BrowserCommands.set_download_behavior(DownloadBehavior.ALLOW)\n    assert command_allow['params']['behavior'] == DownloadBehavior.ALLOW\n    # Test ALLOW_AND_NAME\n    command_allow_name = BrowserCommands.set_download_behavior(DownloadBehavior.ALLOW_AND_NAME)\n    assert command_allow_name['params']['behavior'] == DownloadBehavior.ALLOW_AND_NAME\n    # Test DEFAULT\n    command_default = BrowserCommands.set_download_behavior(DownloadBehavior.DEFAULT)",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_events_enabled_variations",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_events_enabled_variations():\n    \"\"\"Test set_download_behavior with different events_enabled values.\"\"\"\n    behavior = DownloadBehavior.ALLOW\n    # Test with events_enabled=True (default)\n    command_true = BrowserCommands.set_download_behavior(behavior, events_enabled=True)\n    assert command_true['params']['eventsEnabled'] is True\n    # Test with events_enabled=False\n    command_false = BrowserCommands.set_download_behavior(behavior, events_enabled=False)\n    assert command_false['params'] == {'behavior': behavior, 'eventsEnabled': False}\ndef test_various_permission_types():",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "test_various_permission_types",
        "kind": 2,
        "importPath": "tests.test_commands.test_browser_commands",
        "description": "tests.test_commands.test_browser_commands",
        "peekOfCode": "def test_various_permission_types():\n    \"\"\"Test grant_permissions with various permission types.\"\"\"\n    # Test web-related permissions\n    web_permissions = [\n        PermissionType.GEOLOCATION,\n        PermissionType.NOTIFICATIONS,\n    ]\n    command_web = BrowserCommands.grant_permissions(web_permissions)\n    assert command_web['params']['permissions'] == web_permissions\n    # Test storage permissions",
        "detail": "tests.test_commands.test_browser_commands",
        "documentation": {}
    },
    {
        "label": "TestDomCommands",
        "kind": 6,
        "importPath": "tests.test_commands.test_dom_commands",
        "description": "tests.test_commands.test_dom_commands",
        "peekOfCode": "class TestDomCommands:\n    \"\"\"Tests for the DomCommands class.\"\"\"\n    def test_describe_node_with_node_id(self):\n        \"\"\"Test describe_node command with node_id.\"\"\"\n        result = DomCommands.describe_node(node_id=123)\n        assert result['method'] == DomMethod.DESCRIBE_NODE\n        assert result['params']['nodeId'] == 123\n    def test_describe_node_with_backend_node_id(self):\n        \"\"\"Test describe_node command with backend_node_id.\"\"\"\n        result = DomCommands.describe_node(backend_node_id=456)",
        "detail": "tests.test_commands.test_dom_commands",
        "documentation": {}
    },
    {
        "label": "TestFetchCommands",
        "kind": 6,
        "importPath": "tests.test_commands.test_fetch_commands",
        "description": "tests.test_commands.test_fetch_commands",
        "peekOfCode": "class TestFetchCommands:\n    \"\"\"Tests for the FetchCommands class.\"\"\"\n    def test_continue_request_minimal(self):\n        \"\"\"Test continue_request command with minimal parameters.\"\"\"\n        request_id = 'req123'\n        result = FetchCommands.continue_request(request_id=request_id)\n        assert result['method'] == FetchMethod.CONTINUE_REQUEST\n        assert result['params']['requestId'] == request_id\n    def test_continue_request_with_url(self):\n        \"\"\"Test continue_request command with URL.\"\"\"",
        "detail": "tests.test_commands.test_fetch_commands",
        "documentation": {}
    },
    {
        "label": "test_cancel_dragging",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_cancel_dragging():\n    \"\"\"Test cancel_dragging method generates correct command.\"\"\"\n    expected_command = {\n        'method': InputMethod.CANCEL_DRAGGING,\n    }\n    result = InputCommands.cancel_dragging()\n    assert result['method'] == expected_command['method']\n    assert 'params' not in result\ndef test_dispatch_key_event_minimal():\n    \"\"\"Test dispatch_key_event with minimal parameters.\"\"\"",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_key_event_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_key_event_minimal():\n    \"\"\"Test dispatch_key_event with minimal parameters.\"\"\"\n    expected_command = {\n        'method': InputMethod.DISPATCH_KEY_EVENT,\n        'params': {\n            'type': KeyEventType.KEY_DOWN,\n        },\n    }\n    result = InputCommands.dispatch_key_event(type=KeyEventType.KEY_DOWN)\n    assert result['method'] == expected_command['method']",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_key_event_with_modifiers",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_key_event_with_modifiers():\n    \"\"\"Test dispatch_key_event with modifiers.\"\"\"\n    result = InputCommands.dispatch_key_event(\n        type=KeyEventType.KEY_DOWN,\n        modifiers=KeyModifier.CTRL | KeyModifier.SHIFT,\n        text='A',\n    )\n    assert result['method'] == InputMethod.DISPATCH_KEY_EVENT\n    assert result['params']['type'] == KeyEventType.KEY_DOWN\n    assert result['params']['modifiers'] == KeyModifier.CTRL | KeyModifier.SHIFT",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_key_event_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_key_event_with_all_params():\n    \"\"\"Test dispatch_key_event with all parameters.\"\"\"\n    result = InputCommands.dispatch_key_event(\n        type=KeyEventType.CHAR,\n        modifiers=KeyModifier.ALT,\n        timestamp=123.456,\n        text='a',\n        unmodified_text='A',\n        key_identifier='U+0041',\n        code='KeyA',",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_mouse_event_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_mouse_event_minimal():\n    \"\"\"Test dispatch_mouse_event with minimal parameters.\"\"\"\n    result = InputCommands.dispatch_mouse_event(\n        type=MouseEventType.MOUSE_PRESSED,\n        x=100,\n        y=200,\n    )\n    assert result['method'] == InputMethod.DISPATCH_MOUSE_EVENT\n    assert result['params']['type'] == MouseEventType.MOUSE_PRESSED\n    assert result['params']['x'] == 100",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_mouse_event_with_button",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_mouse_event_with_button():\n    \"\"\"Test dispatch_mouse_event with button parameter.\"\"\"\n    result = InputCommands.dispatch_mouse_event(\n        type=MouseEventType.MOUSE_PRESSED,\n        x=100,\n        y=200,\n        button=MouseButton.LEFT,\n        click_count=1,\n    )\n    assert result['method'] == InputMethod.DISPATCH_MOUSE_EVENT",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_mouse_event_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_mouse_event_with_all_params():\n    \"\"\"Test dispatch_mouse_event with all parameters.\"\"\"\n    result = InputCommands.dispatch_mouse_event(\n        type=MouseEventType.MOUSE_MOVED,\n        x=150,\n        y=250,\n        modifiers=KeyModifier.CTRL,\n        timestamp=789.123,\n        button=MouseButton.RIGHT,\n        click_count=2,",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_touch_event_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_touch_event_minimal():\n    \"\"\"Test dispatch_touch_event with minimal parameters.\"\"\"\n    result = InputCommands.dispatch_touch_event(\n        type=TouchEventType.TOUCH_START,\n    )\n    assert result['method'] == InputMethod.DISPATCH_TOUCH_EVENT\n    assert result['params']['type'] == TouchEventType.TOUCH_START\ndef test_dispatch_touch_event_with_touch_points():\n    \"\"\"Test dispatch_touch_event with touch points.\"\"\"\n    touch_points = [",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_touch_event_with_touch_points",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_touch_event_with_touch_points():\n    \"\"\"Test dispatch_touch_event with touch points.\"\"\"\n    touch_points = [\n        {\n            'x': 100,\n            'y': 200,\n            'radiusX': 10,\n            'radiusY': 10,\n            'rotationAngle': 0,\n            'force': 1.0,",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_set_ignore_input_events",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_set_ignore_input_events():\n    \"\"\"Test set_ignore_input_events\"\"\"\n    result = InputCommands.set_ignore_input_events(enabled=True)\n    assert result['method'] == InputMethod.SET_IGNORE_INPUT_EVENTS\n    assert result['params']['enabled'] is True\ndef test_dispatch_drag_event_minimal():\n    \"\"\"Test dispatch_drag_event with minimal parameters.\"\"\"\n    result = InputCommands.dispatch_drag_event(\n        type=DragEventType.DRAG_ENTER,\n        x=100,",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_drag_event_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_drag_event_minimal():\n    \"\"\"Test dispatch_drag_event with minimal parameters.\"\"\"\n    result = InputCommands.dispatch_drag_event(\n        type=DragEventType.DRAG_ENTER,\n        x=100,\n        y=200,\n    )\n    assert result['method'] == InputMethod.DISPATCH_DRAG_EVENT\n    assert result['params']['type'] == DragEventType.DRAG_ENTER\n    assert result['params']['x'] == 100",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_dispatch_drag_event_with_data",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_dispatch_drag_event_with_data():\n    \"\"\"Test dispatch_drag_event with drag data.\"\"\"\n    drag_data = {\n        'items': [\n            {\n                'mimeType': 'text/plain',\n                'data': 'Hello World',\n            }\n        ],\n        'dragOperationsMask': 1,",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_emulate_touch_from_mouse_event_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_emulate_touch_from_mouse_event_minimal():\n    \"\"\"Test emulate_touch_from_mouse_event with minimal parameters.\"\"\"\n    result = InputCommands.emulate_touch_from_mouse_event(\n        type=MouseEventType.MOUSE_PRESSED,\n        x=100,\n        y=200,\n        button=MouseButton.LEFT,\n    )\n    assert result['method'] == InputMethod.EMULATE_TOUCH_FROM_MOUSE_EVENT\n    assert result['params']['type'] == MouseEventType.MOUSE_PRESSED",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_emulate_touch_from_mouse_event_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_emulate_touch_from_mouse_event_with_all_params():\n    \"\"\"Test emulate_touch_from_mouse_event with all parameters.\"\"\"\n    result = InputCommands.emulate_touch_from_mouse_event(\n        type=MouseEventType.MOUSE_MOVED,\n        x=150,\n        y=250,\n        button=MouseButton.RIGHT,\n        timestamp=123.456,\n        delta_x=10.0,\n        delta_y=15.0,",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_ime_set_composition",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_ime_set_composition():\n    \"\"\"Test ime_set_composition method.\"\"\"\n    result = InputCommands.ime_set_composition(\n        text='Hello',\n        selection_start=0,\n        selection_end=5,\n    )\n    assert result['method'] == InputMethod.IME_SET_COMPOSITION\n    assert result['params']['text'] == 'Hello'\n    assert result['params']['selectionStart'] == 0",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_ime_set_composition_with_replacement",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_ime_set_composition_with_replacement():\n    \"\"\"Test ime_set_composition with replacement parameters.\"\"\"\n    result = InputCommands.ime_set_composition(\n        text='World',\n        selection_start=0,\n        selection_end=5,\n        replacement_start=0,\n        replacement_end=5,\n    )\n    assert result['method'] == InputMethod.IME_SET_COMPOSITION",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_insert_text",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_insert_text():\n    \"\"\"Test insert_text method.\"\"\"\n    result = InputCommands.insert_text(text='Hello World')\n    assert result['method'] == InputMethod.INSERT_TEXT\n    assert result['params']['text'] == 'Hello World'\ndef test_set_intercept_drags_enabled():\n    \"\"\"Test set_intercept_drags with enabled=True.\"\"\"\n    result = InputCommands.set_intercept_drags(enabled=True)\n    assert result['method'] == InputMethod.SET_INTERCEPT_DRAGS\n    assert result['params']['enabled'] is True",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_set_intercept_drags_enabled",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_set_intercept_drags_enabled():\n    \"\"\"Test set_intercept_drags with enabled=True.\"\"\"\n    result = InputCommands.set_intercept_drags(enabled=True)\n    assert result['method'] == InputMethod.SET_INTERCEPT_DRAGS\n    assert result['params']['enabled'] is True\ndef test_set_intercept_drags_disabled():\n    \"\"\"Test set_intercept_drags with enabled=False.\"\"\"\n    result = InputCommands.set_intercept_drags(enabled=False)\n    assert result['method'] == InputMethod.SET_INTERCEPT_DRAGS\n    assert result['params']['enabled'] is False",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_set_intercept_drags_disabled",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_set_intercept_drags_disabled():\n    \"\"\"Test set_intercept_drags with enabled=False.\"\"\"\n    result = InputCommands.set_intercept_drags(enabled=False)\n    assert result['method'] == InputMethod.SET_INTERCEPT_DRAGS\n    assert result['params']['enabled'] is False\ndef test_synthesize_pinch_gesture_minimal():\n    \"\"\"Test synthesize_pinch_gesture with minimal parameters.\"\"\"\n    result = InputCommands.synthesize_pinch_gesture(\n        x=100,\n        y=200,",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_synthesize_pinch_gesture_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_synthesize_pinch_gesture_minimal():\n    \"\"\"Test synthesize_pinch_gesture with minimal parameters.\"\"\"\n    result = InputCommands.synthesize_pinch_gesture(\n        x=100,\n        y=200,\n        scale_factor=2.0,\n    )\n    assert result['method'] == InputMethod.SYNTHESIZE_PINCH_GESTURE\n    assert result['params']['x'] == 100\n    assert result['params']['y'] == 200",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_synthesize_pinch_gesture_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_synthesize_pinch_gesture_with_all_params():\n    \"\"\"Test synthesize_pinch_gesture with all parameters.\"\"\"\n    result = InputCommands.synthesize_pinch_gesture(\n        x=150,\n        y=250,\n        scale_factor=1.5,\n        relative_speed=100,\n        gesture_source_type=GestureSourceType.TOUCH,\n    )\n    assert result['method'] == InputMethod.SYNTHESIZE_PINCH_GESTURE",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_synthesize_scroll_gesture_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_synthesize_scroll_gesture_minimal():\n    \"\"\"Test synthesize_scroll_gesture with minimal parameters.\"\"\"\n    result = InputCommands.synthesize_scroll_gesture(\n        x=100,\n        y=200,\n    )\n    assert result['method'] == InputMethod.SYNTHESIZE_SCROLL_GESTURE\n    assert result['params']['x'] == 100\n    assert result['params']['y'] == 200\ndef test_synthesize_scroll_gesture_with_distance():",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_synthesize_scroll_gesture_with_distance",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_synthesize_scroll_gesture_with_distance():\n    \"\"\"Test synthesize_scroll_gesture with distance parameters.\"\"\"\n    result = InputCommands.synthesize_scroll_gesture(\n        x=100,\n        y=200,\n        x_distance=50.0,\n        y_distance=100.0,\n    )\n    assert result['method'] == InputMethod.SYNTHESIZE_SCROLL_GESTURE\n    assert result['params']['x'] == 100",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_synthesize_scroll_gesture_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_synthesize_scroll_gesture_with_all_params():\n    \"\"\"Test synthesize_scroll_gesture with all parameters.\"\"\"\n    result = InputCommands.synthesize_scroll_gesture(\n        x=150,\n        y=250,\n        x_distance=75.0,\n        y_distance=125.0,\n        x_overscroll=10.0,\n        y_overscroll=15.0,\n        prevent_fling=True,",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_synthesize_tap_gesture_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_synthesize_tap_gesture_minimal():\n    \"\"\"Test synthesize_tap_gesture with minimal parameters.\"\"\"\n    result = InputCommands.synthesize_tap_gesture(\n        x=100,\n        y=200,\n    )\n    assert result['method'] == InputMethod.SYNTHESIZE_TAP_GESTURE\n    assert result['params']['x'] == 100\n    assert result['params']['y'] == 200\ndef test_synthesize_tap_gesture_with_all_params():",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_synthesize_tap_gesture_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_synthesize_tap_gesture_with_all_params():\n    \"\"\"Test synthesize_tap_gesture with all parameters.\"\"\"\n    result = InputCommands.synthesize_tap_gesture(\n        x=150,\n        y=250,\n        duration=500,\n        tap_count=2,\n        gesture_source_type=GestureSourceType.TOUCH,\n    )\n    assert result['method'] == InputMethod.SYNTHESIZE_TAP_GESTURE",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_mouse_wheel_event",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_mouse_wheel_event():\n    \"\"\"Test mouse wheel event dispatch.\"\"\"\n    result = InputCommands.dispatch_mouse_event(\n        type=MouseEventType.MOUSE_WHEEL,\n        x=100,\n        y=200,\n        delta_x=10.0,\n        delta_y=-20.0,\n    )\n    assert result['method'] == InputMethod.DISPATCH_MOUSE_EVENT",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_key_event_with_location",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_key_event_with_location():\n    \"\"\"Test key event with location parameter.\"\"\"\n    result = InputCommands.dispatch_key_event(\n        type=KeyEventType.KEY_DOWN,\n        key='Shift',\n        location=KeyLocation.LEFT,\n    )\n    assert result['method'] == InputMethod.DISPATCH_KEY_EVENT\n    assert result['params']['type'] == KeyEventType.KEY_DOWN\n    assert result['params']['key'] == 'Shift'",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_touch_event_multiple_points",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_touch_event_multiple_points():\n    \"\"\"Test touch event with multiple touch points.\"\"\"\n    touch_points = [\n        {\n            'x': 100,\n            'y': 200,\n            'radiusX': 10,\n            'radiusY': 10,\n            'rotationAngle': 0,\n            'force': 1.0,",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_drag_event_cancel",
        "kind": 2,
        "importPath": "tests.test_commands.test_input_commands",
        "description": "tests.test_commands.test_input_commands",
        "peekOfCode": "def test_drag_event_cancel():\n    \"\"\"Test drag cancel event.\"\"\"\n    result = InputCommands.dispatch_drag_event(\n        type=DragEventType.DRAG_CANCEL,\n        x=100,\n        y=200,\n    )\n    assert result['method'] == InputMethod.DISPATCH_DRAG_EVENT\n    assert result['params']['type'] == DragEventType.DRAG_CANCEL\n    assert result['params']['x'] == 100",
        "detail": "tests.test_commands.test_input_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_browser_cache",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_clear_browser_cache():\n    \"\"\"Test clear_browser_cache method generates correct command.\"\"\"\n    result = NetworkCommands.clear_browser_cache()\n    assert result['method'] == NetworkMethod.CLEAR_BROWSER_CACHE\n    assert 'params' not in result\ndef test_clear_browser_cookies():\n    \"\"\"Test clear_browser_cookies method generates correct command.\"\"\"\n    result = NetworkCommands.clear_browser_cookies()\n    assert result['method'] == NetworkMethod.CLEAR_BROWSER_COOKIES\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_browser_cookies",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_clear_browser_cookies():\n    \"\"\"Test clear_browser_cookies method generates correct command.\"\"\"\n    result = NetworkCommands.clear_browser_cookies()\n    assert result['method'] == NetworkMethod.CLEAR_BROWSER_COOKIES\n    assert 'params' not in result\ndef test_delete_cookies_minimal():\n    \"\"\"Test delete_cookies with minimal parameters.\"\"\"\n    result = NetworkCommands.delete_cookies(name='test_cookie')\n    assert result['method'] == NetworkMethod.DELETE_COOKIES\n    assert result['params']['name'] == 'test_cookie'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_delete_cookies_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_delete_cookies_minimal():\n    \"\"\"Test delete_cookies with minimal parameters.\"\"\"\n    result = NetworkCommands.delete_cookies(name='test_cookie')\n    assert result['method'] == NetworkMethod.DELETE_COOKIES\n    assert result['params']['name'] == 'test_cookie'\ndef test_delete_cookies_with_url():\n    \"\"\"Test delete_cookies with URL parameter.\"\"\"\n    result = NetworkCommands.delete_cookies(\n        name='test_cookie',\n        url='https://example.com'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_delete_cookies_with_url",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_delete_cookies_with_url():\n    \"\"\"Test delete_cookies with URL parameter.\"\"\"\n    result = NetworkCommands.delete_cookies(\n        name='test_cookie',\n        url='https://example.com'\n    )\n    assert result['method'] == NetworkMethod.DELETE_COOKIES\n    assert result['params']['name'] == 'test_cookie'\n    assert result['params']['url'] == 'https://example.com'\ndef test_delete_cookies_with_all_params():",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_delete_cookies_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_delete_cookies_with_all_params():\n    \"\"\"Test delete_cookies with all parameters.\"\"\"\n    partition_key = {\n        'topLevelSite': 'https://example.com',\n        'hasCrossSiteAncestor': False\n    }\n    result = NetworkCommands.delete_cookies(\n        name='test_cookie',\n        url='https://example.com',\n        domain='example.com',",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_disable",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_disable():\n    \"\"\"Test disable method generates correct command.\"\"\"\n    result = NetworkCommands.disable()\n    assert result['method'] == NetworkMethod.DISABLE\n    assert 'params' not in result\ndef test_enable_minimal():\n    \"\"\"Test enable with minimal parameters.\"\"\"\n    result = NetworkCommands.enable()\n    assert result['method'] == NetworkMethod.ENABLE\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_enable_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_enable_minimal():\n    \"\"\"Test enable with minimal parameters.\"\"\"\n    result = NetworkCommands.enable()\n    assert result['method'] == NetworkMethod.ENABLE\n    assert result['params'] == {}\ndef test_enable_with_buffer_sizes():\n    \"\"\"Test enable with buffer size parameters.\"\"\"\n    result = NetworkCommands.enable(\n        max_total_buffer_size=1024000,\n        max_resource_buffer_size=512000,",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_enable_with_buffer_sizes",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_enable_with_buffer_sizes():\n    \"\"\"Test enable with buffer size parameters.\"\"\"\n    result = NetworkCommands.enable(\n        max_total_buffer_size=1024000,\n        max_resource_buffer_size=512000,\n        max_post_data_size=65536\n    )\n    assert result['method'] == NetworkMethod.ENABLE\n    assert result['params']['maxTotalBufferSize'] == 1024000\n    assert result['params']['maxResourceBufferSize'] == 512000",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_get_cookies_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_get_cookies_minimal():\n    \"\"\"Test get_cookies with minimal parameters.\"\"\"\n    result = NetworkCommands.get_cookies()\n    assert result['method'] == NetworkMethod.GET_COOKIES\n    assert result['params'] == {}\ndef test_get_cookies_with_urls():\n    \"\"\"Test get_cookies with URLs parameter.\"\"\"\n    urls = ['https://example.com', 'https://test.com']\n    result = NetworkCommands.get_cookies(urls=urls)\n    assert result['method'] == NetworkMethod.GET_COOKIES",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_get_cookies_with_urls",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_get_cookies_with_urls():\n    \"\"\"Test get_cookies with URLs parameter.\"\"\"\n    urls = ['https://example.com', 'https://test.com']\n    result = NetworkCommands.get_cookies(urls=urls)\n    assert result['method'] == NetworkMethod.GET_COOKIES\n    assert result['params']['urls'] == urls\ndef test_get_request_post_data():\n    \"\"\"Test get_request_post_data method.\"\"\"\n    result = NetworkCommands.get_request_post_data(request_id='12345')\n    assert result['method'] == NetworkMethod.GET_REQUEST_POST_DATA",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_get_request_post_data",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_get_request_post_data():\n    \"\"\"Test get_request_post_data method.\"\"\"\n    result = NetworkCommands.get_request_post_data(request_id='12345')\n    assert result['method'] == NetworkMethod.GET_REQUEST_POST_DATA\n    assert result['params']['requestId'] == '12345'\ndef test_get_response_body():\n    \"\"\"Test get_response_body method.\"\"\"\n    result = NetworkCommands.get_response_body(request_id='12345')\n    assert result['method'] == NetworkMethod.GET_RESPONSE_BODY\n    assert result['params']['requestId'] == '12345'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_get_response_body",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_get_response_body():\n    \"\"\"Test get_response_body method.\"\"\"\n    result = NetworkCommands.get_response_body(request_id='12345')\n    assert result['method'] == NetworkMethod.GET_RESPONSE_BODY\n    assert result['params']['requestId'] == '12345'\ndef test_set_cache_disabled_true():\n    \"\"\"Test set_cache_disabled with cache disabled.\"\"\"\n    result = NetworkCommands.set_cache_disabled(cache_disabled=True)\n    assert result['method'] == NetworkMethod.SET_CACHE_DISABLED\n    assert result['params']['cacheDisabled'] is True",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cache_disabled_true",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_cache_disabled_true():\n    \"\"\"Test set_cache_disabled with cache disabled.\"\"\"\n    result = NetworkCommands.set_cache_disabled(cache_disabled=True)\n    assert result['method'] == NetworkMethod.SET_CACHE_DISABLED\n    assert result['params']['cacheDisabled'] is True\ndef test_set_cache_disabled_false():\n    \"\"\"Test set_cache_disabled with cache enabled.\"\"\"\n    result = NetworkCommands.set_cache_disabled(cache_disabled=False)\n    assert result['method'] == NetworkMethod.SET_CACHE_DISABLED\n    assert result['params']['cacheDisabled'] is False",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cache_disabled_false",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_cache_disabled_false():\n    \"\"\"Test set_cache_disabled with cache enabled.\"\"\"\n    result = NetworkCommands.set_cache_disabled(cache_disabled=False)\n    assert result['method'] == NetworkMethod.SET_CACHE_DISABLED\n    assert result['params']['cacheDisabled'] is False\ndef test_set_cookie_minimal():\n    \"\"\"Test set_cookie with minimal parameters.\"\"\"\n    result = NetworkCommands.set_cookie(name='test', value='value')\n    assert result['method'] == NetworkMethod.SET_COOKIE\n    assert result['params']['name'] == 'test'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookie_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_cookie_minimal():\n    \"\"\"Test set_cookie with minimal parameters.\"\"\"\n    result = NetworkCommands.set_cookie(name='test', value='value')\n    assert result['method'] == NetworkMethod.SET_COOKIE\n    assert result['params']['name'] == 'test'\n    assert result['params']['value'] == 'value'\ndef test_set_cookie_with_url():\n    \"\"\"Test set_cookie with URL parameter.\"\"\"\n    result = NetworkCommands.set_cookie(\n        name='test',",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookie_with_url",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_cookie_with_url():\n    \"\"\"Test set_cookie with URL parameter.\"\"\"\n    result = NetworkCommands.set_cookie(\n        name='test',\n        value='value',\n        url='https://example.com'\n    )\n    assert result['method'] == NetworkMethod.SET_COOKIE\n    assert result['params']['name'] == 'test'\n    assert result['params']['value'] == 'value'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookie_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_cookie_with_all_params():\n    \"\"\"Test set_cookie with all parameters.\"\"\"\n    partition_key = {\n        'topLevelSite': 'https://example.com',\n        'hasCrossSiteAncestor': False\n    }\n    result = NetworkCommands.set_cookie(\n        name='test',\n        value='value',\n        url='https://example.com',",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookies",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_cookies():\n    \"\"\"Test set_cookies method.\"\"\"\n    cookies = [\n        {\n            'name': 'cookie1',\n            'value': 'value1',\n            'url': 'https://example.com'\n        },\n        {\n            'name': 'cookie2',",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_extra_http_headers",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_extra_http_headers():\n    \"\"\"Test set_extra_http_headers method.\"\"\"\n    headers = [\n        {'name': 'Authorization', 'value': 'Bearer token123'},\n        {'name': 'X-Custom-Header', 'value': 'custom-value'}\n    ]\n    result = NetworkCommands.set_extra_http_headers(headers=headers)\n    assert result['method'] == NetworkMethod.SET_EXTRA_HTTP_HEADERS\n    assert result['params']['headers'] == headers\ndef test_set_useragent_override_minimal():",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_useragent_override_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_useragent_override_minimal():\n    \"\"\"Test set_useragent_override with minimal parameters.\"\"\"\n    user_agent = 'Mozilla/5.0 (Custom Browser)'\n    result = NetworkCommands.set_useragent_override(user_agent=user_agent)\n    assert result['method'] == NetworkMethod.SET_USER_AGENT_OVERRIDE\n    assert result['params']['userAgent'] == user_agent\ndef test_set_useragent_override_with_all_params():\n    \"\"\"Test set_useragent_override with all parameters.\"\"\"\n    user_agent = 'Mozilla/5.0 (Custom Browser)'\n    accept_language = 'en-US,en;q=0.9'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_useragent_override_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_useragent_override_with_all_params():\n    \"\"\"Test set_useragent_override with all parameters.\"\"\"\n    user_agent = 'Mozilla/5.0 (Custom Browser)'\n    accept_language = 'en-US,en;q=0.9'\n    platform = 'Linux x86_64'\n    user_agent_metadata = {\n        'brands': [{'brand': 'Custom', 'version': '1.0'}],\n        'fullVersionList': [{'brand': 'Custom', 'version': '1.0.0'}],\n        'platform': 'Linux',\n        'platformVersion': '5.4.0',",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_accepted_encodings_override",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_clear_accepted_encodings_override():\n    \"\"\"Test clear_accepted_encodings_override method.\"\"\"\n    result = NetworkCommands.clear_accepted_encodings_override()\n    assert result['method'] == NetworkMethod.CLEAR_ACCEPTED_ENCODINGS_OVERRIDE\n    assert 'params' not in result\ndef test_enable_reporting_api():\n    \"\"\"Test enable_reporting_api method.\"\"\"\n    result = NetworkCommands.enable_reporting_api(enabled=True)\n    assert result['method'] == NetworkMethod.ENABLE_REPORTING_API\n    assert result['params']['enabled'] is True",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_enable_reporting_api",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_enable_reporting_api():\n    \"\"\"Test enable_reporting_api method.\"\"\"\n    result = NetworkCommands.enable_reporting_api(enabled=True)\n    assert result['method'] == NetworkMethod.ENABLE_REPORTING_API\n    assert result['params']['enabled'] is True\ndef test_search_in_response_body_minimal():\n    \"\"\"Test search_in_response_body with minimal parameters.\"\"\"\n    result = NetworkCommands.search_in_response_body(\n        request_id='12345',\n        query='test'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_search_in_response_body_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_search_in_response_body_minimal():\n    \"\"\"Test search_in_response_body with minimal parameters.\"\"\"\n    result = NetworkCommands.search_in_response_body(\n        request_id='12345',\n        query='test'\n    )\n    assert result['method'] == NetworkMethod.SEARCH_IN_RESPONSE_BODY\n    assert result['params']['requestId'] == '12345'\n    assert result['params']['query'] == 'test'\n    assert result['params']['caseSensitive'] is False",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_search_in_response_body_with_options",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_search_in_response_body_with_options():\n    \"\"\"Test search_in_response_body with all options.\"\"\"\n    result = NetworkCommands.search_in_response_body(\n        request_id='12345',\n        query='test.*pattern',\n        case_sensitive=True,\n        is_regex=True\n    )\n    assert result['method'] == NetworkMethod.SEARCH_IN_RESPONSE_BODY\n    assert result['params']['requestId'] == '12345'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_blocked_urls",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_blocked_urls():\n    \"\"\"Test set_blocked_urls method.\"\"\"\n    urls = ['https://ads.example.com', 'https://tracker.com']\n    result = NetworkCommands.set_blocked_urls(urls=urls)\n    assert result['method'] == NetworkMethod.SET_BLOCKED_URLS\n    assert result['params']['urls'] == urls\ndef test_set_bypass_service_worker():\n    \"\"\"Test set_bypass_service_worker method.\"\"\"\n    result = NetworkCommands.set_bypass_service_worker(bypass=True)\n    assert result['method'] == NetworkMethod.SET_BYPASS_SERVICE_WORKER",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_bypass_service_worker",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_bypass_service_worker():\n    \"\"\"Test set_bypass_service_worker method.\"\"\"\n    result = NetworkCommands.set_bypass_service_worker(bypass=True)\n    assert result['method'] == NetworkMethod.SET_BYPASS_SERVICE_WORKER\n    assert result['params']['bypass'] is True\ndef test_get_certificate():\n    \"\"\"Test get_certificate method.\"\"\"\n    result = NetworkCommands.get_certificate(origin='https://example.com')\n    assert result['method'] == NetworkMethod.GET_CERTIFICATE\n    assert result['params']['origin'] == 'https://example.com'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_get_certificate",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_get_certificate():\n    \"\"\"Test get_certificate method.\"\"\"\n    result = NetworkCommands.get_certificate(origin='https://example.com')\n    assert result['method'] == NetworkMethod.GET_CERTIFICATE\n    assert result['params']['origin'] == 'https://example.com'\ndef test_get_response_body_for_interception():\n    \"\"\"Test get_response_body_for_interception method.\"\"\"\n    result = NetworkCommands.get_response_body_for_interception(\n        interception_id='interception123'\n    )",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_get_response_body_for_interception",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_get_response_body_for_interception():\n    \"\"\"Test get_response_body_for_interception method.\"\"\"\n    result = NetworkCommands.get_response_body_for_interception(\n        interception_id='interception123'\n    )\n    assert result['method'] == NetworkMethod.GET_RESPONSE_BODY_FOR_INTERCEPTION\n    assert result['params']['interceptionId'] == 'interception123'\ndef test_set_accepted_encodings():\n    \"\"\"Test set_accepted_encodings method.\"\"\"\n    encodings = [ContentEncoding.GZIP, ContentEncoding.BR]",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_accepted_encodings",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_accepted_encodings():\n    \"\"\"Test set_accepted_encodings method.\"\"\"\n    encodings = [ContentEncoding.GZIP, ContentEncoding.BR]\n    result = NetworkCommands.set_accepted_encodings(encodings=encodings)\n    assert result['method'] == NetworkMethod.SET_ACCEPTED_ENCODINGS\n    assert result['params']['encodings'] == encodings\ndef test_set_attach_debug_stack():\n    \"\"\"Test set_attach_debug_stack method.\"\"\"\n    result = NetworkCommands.set_attach_debug_stack(enabled=True)\n    assert result['method'] == NetworkMethod.SET_ATTACH_DEBUG_STACK",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_attach_debug_stack",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_attach_debug_stack():\n    \"\"\"Test set_attach_debug_stack method.\"\"\"\n    result = NetworkCommands.set_attach_debug_stack(enabled=True)\n    assert result['method'] == NetworkMethod.SET_ATTACH_DEBUG_STACK\n    assert result['params']['enabled'] is True\ndef test_set_cookie_controls_minimal():\n    \"\"\"Test set_cookie_controls with minimal parameters.\"\"\"\n    result = NetworkCommands.set_cookie_controls(\n        enable_third_party_cookie_restriction=True\n    )",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookie_controls_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_cookie_controls_minimal():\n    \"\"\"Test set_cookie_controls with minimal parameters.\"\"\"\n    result = NetworkCommands.set_cookie_controls(\n        enable_third_party_cookie_restriction=True\n    )\n    assert result['method'] == NetworkMethod.SET_COOKIE_CONTROLS\n    assert result['params']['enableThirdPartyCookieRestriction'] is True\ndef test_set_cookie_controls_with_all_params():\n    \"\"\"Test set_cookie_controls with all parameters.\"\"\"\n    result = NetworkCommands.set_cookie_controls(",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookie_controls_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_set_cookie_controls_with_all_params():\n    \"\"\"Test set_cookie_controls with all parameters.\"\"\"\n    result = NetworkCommands.set_cookie_controls(\n        enable_third_party_cookie_restriction=True,\n        disable_third_party_cookie_metadata=False,\n        disable_third_party_cookie_heuristics=True\n    )\n    assert result['method'] == NetworkMethod.SET_COOKIE_CONTROLS\n    assert result['params']['enableThirdPartyCookieRestriction'] is True\n    assert result['params']['disableThirdPartyCookieMetadata'] is False",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_stream_resource_content",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_stream_resource_content():\n    \"\"\"Test stream_resource_content method.\"\"\"\n    result = NetworkCommands.stream_resource_content(request_id='12345')\n    assert result['method'] == NetworkMethod.STREAM_RESOURCE_CONTENT\n    assert result['params']['requestId'] == '12345'\ndef test_take_response_body_for_interception_as_stream():\n    \"\"\"Test take_response_body_for_interception_as_stream method.\"\"\"\n    result = NetworkCommands.take_response_body_for_interception_as_stream(\n        interception_id='interception123'\n    )",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_take_response_body_for_interception_as_stream",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_take_response_body_for_interception_as_stream():\n    \"\"\"Test take_response_body_for_interception_as_stream method.\"\"\"\n    result = NetworkCommands.take_response_body_for_interception_as_stream(\n        interception_id='interception123'\n    )\n    assert result['method'] == NetworkMethod.TAKE_RESPONSE_BODY_FOR_INTERCEPTION_AS_STREAM\n    assert result['params']['interceptionId'] == 'interception123'\ndef test_emulate_network_conditions_minimal():\n    \"\"\"Test emulate_network_conditions with minimal parameters.\"\"\"\n    result = NetworkCommands.emulate_network_conditions(",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_emulate_network_conditions_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_emulate_network_conditions_minimal():\n    \"\"\"Test emulate_network_conditions with minimal parameters.\"\"\"\n    result = NetworkCommands.emulate_network_conditions(\n        offline=False,\n        latency=100.0,\n        download_throughput=1000000.0,\n        upload_throughput=500000.0\n    )\n    assert result['method'] == NetworkMethod.EMULATE_NETWORK_CONDITIONS\n    assert result['params']['offline'] is False",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_emulate_network_conditions_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_emulate_network_conditions_with_all_params():\n    \"\"\"Test emulate_network_conditions with all parameters.\"\"\"\n    result = NetworkCommands.emulate_network_conditions(\n        offline=False,\n        latency=200.0,\n        download_throughput=2000000.0,\n        upload_throughput=1000000.0,\n        connection_type=ConnectionType.CELLULAR4G,\n        packet_loss=0.1,\n        packet_queue_length=100,",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_get_security_isolation_status_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_get_security_isolation_status_minimal():\n    \"\"\"Test get_security_isolation_status with minimal parameters.\"\"\"\n    result = NetworkCommands.get_security_isolation_status()\n    assert result['method'] == NetworkMethod.GET_SECURITY_ISOLATION_STATUS\n    assert result['params'] == {}\ndef test_get_security_isolation_status_with_frame_id():\n    \"\"\"Test get_security_isolation_status with frame ID.\"\"\"\n    result = NetworkCommands.get_security_isolation_status(frame_id='frame123')\n    assert result['method'] == NetworkMethod.GET_SECURITY_ISOLATION_STATUS\n    assert result['params']['frameId'] == 'frame123'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_get_security_isolation_status_with_frame_id",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_get_security_isolation_status_with_frame_id():\n    \"\"\"Test get_security_isolation_status with frame ID.\"\"\"\n    result = NetworkCommands.get_security_isolation_status(frame_id='frame123')\n    assert result['method'] == NetworkMethod.GET_SECURITY_ISOLATION_STATUS\n    assert result['params']['frameId'] == 'frame123'\ndef test_load_network_resource():\n    \"\"\"Test load_network_resource method.\"\"\"\n    options = {\n        'disableCache': True,\n        'includeCredentials': False",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_load_network_resource",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_load_network_resource():\n    \"\"\"Test load_network_resource method.\"\"\"\n    options = {\n        'disableCache': True,\n        'includeCredentials': False\n    }\n    result = NetworkCommands.load_network_resource(\n        url='https://example.com/resource',\n        options=options\n    )",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_load_network_resource_with_frame_id",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_load_network_resource_with_frame_id():\n    \"\"\"Test load_network_resource with frame ID.\"\"\"\n    options = {\n        'disableCache': False,\n        'includeCredentials': True\n    }\n    result = NetworkCommands.load_network_resource(\n        url='https://example.com/resource',\n        options=options,\n        frame_id='frame123'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_replay_xhr",
        "kind": 2,
        "importPath": "tests.test_commands.test_network_commands",
        "description": "tests.test_commands.test_network_commands",
        "peekOfCode": "def test_replay_xhr():\n    \"\"\"Test replay_xhr method.\"\"\"\n    result = NetworkCommands.replay_xhr(request_id='12345')\n    assert result['method'] == NetworkMethod.REPLAY_XHR\n    assert result['params']['requestId'] == '12345'",
        "detail": "tests.test_commands.test_network_commands",
        "documentation": {}
    },
    {
        "label": "test_add_script_to_evaluate_on_new_document_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_add_script_to_evaluate_on_new_document_minimal():\n    \"\"\"Test add_script_to_evaluate_on_new_document with minimal parameters.\"\"\"\n    result = PageCommands.add_script_to_evaluate_on_new_document(\n        source='console.log(\"Hello World\");'\n    )\n    assert result['method'] == PageMethod.ADD_SCRIPT_TO_EVALUATE_ON_NEW_DOCUMENT\n    assert result['params']['source'] == 'console.log(\"Hello World\");'\ndef test_add_script_to_evaluate_on_new_document_with_all_params():\n    \"\"\"Test add_script_to_evaluate_on_new_document with all parameters.\"\"\"\n    result = PageCommands.add_script_to_evaluate_on_new_document(",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_add_script_to_evaluate_on_new_document_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_add_script_to_evaluate_on_new_document_with_all_params():\n    \"\"\"Test add_script_to_evaluate_on_new_document with all parameters.\"\"\"\n    result = PageCommands.add_script_to_evaluate_on_new_document(\n        source='console.log(\"Test\");',\n        world_name='test_world',\n        include_command_line_api=True,\n        run_immediately=False\n    )\n    assert result['method'] == PageMethod.ADD_SCRIPT_TO_EVALUATE_ON_NEW_DOCUMENT\n    assert result['params']['source'] == 'console.log(\"Test\");'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_bring_to_front",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_bring_to_front():\n    \"\"\"Test bring_to_front method generates correct command.\"\"\"\n    result = PageCommands.bring_to_front()\n    assert result['method'] == PageMethod.BRING_TO_FRONT\n    assert 'params' not in result\ndef test_capture_screenshot_minimal():\n    \"\"\"Test capture_screenshot with minimal parameters.\"\"\"\n    result = PageCommands.capture_screenshot()\n    assert result['method'] == PageMethod.CAPTURE_SCREENSHOT\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_capture_screenshot_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_capture_screenshot_minimal():\n    \"\"\"Test capture_screenshot with minimal parameters.\"\"\"\n    result = PageCommands.capture_screenshot()\n    assert result['method'] == PageMethod.CAPTURE_SCREENSHOT\n    assert result['params'] == {}\ndef test_capture_screenshot_with_format_and_quality():\n    \"\"\"Test capture_screenshot with format and quality.\"\"\"\n    result = PageCommands.capture_screenshot(\n        format=ScreenshotFormat.JPEG,\n        quality=80",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_capture_screenshot_with_format_and_quality",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_capture_screenshot_with_format_and_quality():\n    \"\"\"Test capture_screenshot with format and quality.\"\"\"\n    result = PageCommands.capture_screenshot(\n        format=ScreenshotFormat.JPEG,\n        quality=80\n    )\n    assert result['method'] == PageMethod.CAPTURE_SCREENSHOT\n    assert result['params']['format'] == ScreenshotFormat.JPEG\n    assert result['params']['quality'] == 80\ndef test_capture_screenshot_with_clip():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_capture_screenshot_with_clip",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_capture_screenshot_with_clip():\n    \"\"\"Test capture_screenshot with clip viewport.\"\"\"\n    clip = {\n        'x': 10,\n        'y': 20,\n        'width': 100,\n        'height': 200,\n        'scale': 1.0\n    }\n    result = PageCommands.capture_screenshot(",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_capture_screenshot_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_capture_screenshot_with_all_params():\n    \"\"\"Test capture_screenshot with all parameters.\"\"\"\n    clip = {\n        'x': 0,\n        'y': 0,\n        'width': 1920,\n        'height': 1080,\n        'scale': 1.0\n    }\n    result = PageCommands.capture_screenshot(",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_close",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_close():\n    \"\"\"Test close method generates correct command.\"\"\"\n    result = PageCommands.close()\n    assert result['method'] == PageMethod.CLOSE\n    assert 'params' not in result\ndef test_create_isolated_world_minimal():\n    \"\"\"Test create_isolated_world with minimal parameters.\"\"\"\n    result = PageCommands.create_isolated_world(frame_id='frame123')\n    assert result['method'] == PageMethod.CREATE_ISOLATED_WORLD\n    assert result['params']['frameId'] == 'frame123'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_create_isolated_world_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_create_isolated_world_minimal():\n    \"\"\"Test create_isolated_world with minimal parameters.\"\"\"\n    result = PageCommands.create_isolated_world(frame_id='frame123')\n    assert result['method'] == PageMethod.CREATE_ISOLATED_WORLD\n    assert result['params']['frameId'] == 'frame123'\ndef test_create_isolated_world_with_all_params():\n    \"\"\"Test create_isolated_world with all parameters.\"\"\"\n    result = PageCommands.create_isolated_world(\n        frame_id='frame123',\n        world_name='test_world',",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_create_isolated_world_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_create_isolated_world_with_all_params():\n    \"\"\"Test create_isolated_world with all parameters.\"\"\"\n    result = PageCommands.create_isolated_world(\n        frame_id='frame123',\n        world_name='test_world',\n        grant_universal_access=True\n    )\n    assert result['method'] == PageMethod.CREATE_ISOLATED_WORLD\n    assert result['params']['frameId'] == 'frame123'\n    assert result['params']['worldName'] == 'test_world'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_disable",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_disable():\n    \"\"\"Test disable method generates correct command.\"\"\"\n    result = PageCommands.disable()\n    assert result['method'] == PageMethod.DISABLE\n    assert 'params' not in result\ndef test_enable_minimal():\n    \"\"\"Test enable with minimal parameters.\"\"\"\n    result = PageCommands.enable()\n    assert result['method'] == PageMethod.ENABLE\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_enable_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_enable_minimal():\n    \"\"\"Test enable with minimal parameters.\"\"\"\n    result = PageCommands.enable()\n    assert result['method'] == PageMethod.ENABLE\n    assert result['params'] == {}\ndef test_enable_with_file_chooser():\n    \"\"\"Test enable with file chooser event enabled.\"\"\"\n    result = PageCommands.enable(enable_file_chooser_opened_event=True)\n    assert result['method'] == PageMethod.ENABLE\n    assert result['params']['enableFileChooserOpenedEvent'] is True",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_enable_with_file_chooser",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_enable_with_file_chooser():\n    \"\"\"Test enable with file chooser event enabled.\"\"\"\n    result = PageCommands.enable(enable_file_chooser_opened_event=True)\n    assert result['method'] == PageMethod.ENABLE\n    assert result['params']['enableFileChooserOpenedEvent'] is True\ndef test_get_app_manifest_minimal():\n    \"\"\"Test get_app_manifest with minimal parameters.\"\"\"\n    result = PageCommands.get_app_manifest()\n    assert result['method'] == PageMethod.GET_APP_MANIFEST\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_app_manifest_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_app_manifest_minimal():\n    \"\"\"Test get_app_manifest with minimal parameters.\"\"\"\n    result = PageCommands.get_app_manifest()\n    assert result['method'] == PageMethod.GET_APP_MANIFEST\n    assert result['params'] == {}\ndef test_get_app_manifest_with_id():\n    \"\"\"Test get_app_manifest with manifest ID.\"\"\"\n    result = PageCommands.get_app_manifest(manifest_id='manifest123')\n    assert result['method'] == PageMethod.GET_APP_MANIFEST\n    assert result['params']['manifestId'] == 'manifest123'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_app_manifest_with_id",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_app_manifest_with_id():\n    \"\"\"Test get_app_manifest with manifest ID.\"\"\"\n    result = PageCommands.get_app_manifest(manifest_id='manifest123')\n    assert result['method'] == PageMethod.GET_APP_MANIFEST\n    assert result['params']['manifestId'] == 'manifest123'\ndef test_get_frame_tree():\n    \"\"\"Test get_frame_tree method generates correct command.\"\"\"\n    result = PageCommands.get_frame_tree()\n    assert result['method'] == PageMethod.GET_FRAME_TREE\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_frame_tree",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_frame_tree():\n    \"\"\"Test get_frame_tree method generates correct command.\"\"\"\n    result = PageCommands.get_frame_tree()\n    assert result['method'] == PageMethod.GET_FRAME_TREE\n    assert 'params' not in result\ndef test_get_layout_metrics():\n    \"\"\"Test get_layout_metrics method generates correct command.\"\"\"\n    result = PageCommands.get_layout_metrics()\n    assert result['method'] == PageMethod.GET_LAYOUT_METRICS\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_layout_metrics",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_layout_metrics():\n    \"\"\"Test get_layout_metrics method generates correct command.\"\"\"\n    result = PageCommands.get_layout_metrics()\n    assert result['method'] == PageMethod.GET_LAYOUT_METRICS\n    assert 'params' not in result\ndef test_get_navigation_history():\n    \"\"\"Test get_navigation_history method generates correct command.\"\"\"\n    result = PageCommands.get_navigation_history()\n    assert result['method'] == PageMethod.GET_NAVIGATION_HISTORY\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_navigation_history",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_navigation_history():\n    \"\"\"Test get_navigation_history method generates correct command.\"\"\"\n    result = PageCommands.get_navigation_history()\n    assert result['method'] == PageMethod.GET_NAVIGATION_HISTORY\n    assert 'params' not in result\ndef test_handle_javascript_dialog_accept():\n    \"\"\"Test handle_javascript_dialog with accept.\"\"\"\n    result = PageCommands.handle_javascript_dialog(accept=True)\n    assert result['method'] == PageMethod.HANDLE_JAVASCRIPT_DIALOG\n    assert result['params']['accept'] is True",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_handle_javascript_dialog_accept",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_handle_javascript_dialog_accept():\n    \"\"\"Test handle_javascript_dialog with accept.\"\"\"\n    result = PageCommands.handle_javascript_dialog(accept=True)\n    assert result['method'] == PageMethod.HANDLE_JAVASCRIPT_DIALOG\n    assert result['params']['accept'] is True\ndef test_handle_javascript_dialog_with_prompt():\n    \"\"\"Test handle_javascript_dialog with prompt text.\"\"\"\n    result = PageCommands.handle_javascript_dialog(\n        accept=True,\n        prompt_text='test input'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_handle_javascript_dialog_with_prompt",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_handle_javascript_dialog_with_prompt():\n    \"\"\"Test handle_javascript_dialog with prompt text.\"\"\"\n    result = PageCommands.handle_javascript_dialog(\n        accept=True,\n        prompt_text='test input'\n    )\n    assert result['method'] == PageMethod.HANDLE_JAVASCRIPT_DIALOG\n    assert result['params']['accept'] is True\n    assert result['params']['promptText'] == 'test input'\ndef test_navigate_minimal():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_navigate_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_navigate_minimal():\n    \"\"\"Test navigate with minimal parameters.\"\"\"\n    result = PageCommands.navigate(url='https://example.com')\n    assert result['method'] == PageMethod.NAVIGATE\n    assert result['params']['url'] == 'https://example.com'\ndef test_navigate_with_all_params():\n    \"\"\"Test navigate with all parameters.\"\"\"\n    result = PageCommands.navigate(\n        url='https://example.com',\n        referrer='https://google.com',",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_navigate_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_navigate_with_all_params():\n    \"\"\"Test navigate with all parameters.\"\"\"\n    result = PageCommands.navigate(\n        url='https://example.com',\n        referrer='https://google.com',\n        transition_type=TransitionType.LINK,\n        frame_id='frame123',\n        referrer_policy=ReferrerPolicy.STRICT_ORIGIN\n    )\n    assert result['method'] == PageMethod.NAVIGATE",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_navigate_to_history_entry",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_navigate_to_history_entry():\n    \"\"\"Test navigate_to_history_entry method.\"\"\"\n    result = PageCommands.navigate_to_history_entry(entry_id=5)\n    assert result['method'] == PageMethod.NAVIGATE_TO_HISTORY_ENTRY\n    assert result['params']['entryId'] == 5\ndef test_print_to_pdf_minimal():\n    \"\"\"Test print_to_pdf with minimal parameters.\"\"\"\n    result = PageCommands.print_to_pdf()\n    assert result['method'] == PageMethod.PRINT_TO_PDF\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_print_to_pdf_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_print_to_pdf_minimal():\n    \"\"\"Test print_to_pdf with minimal parameters.\"\"\"\n    result = PageCommands.print_to_pdf()\n    assert result['method'] == PageMethod.PRINT_TO_PDF\n    assert result['params'] == {}\ndef test_print_to_pdf_with_basic_params():\n    \"\"\"Test print_to_pdf with basic parameters.\"\"\"\n    result = PageCommands.print_to_pdf(\n        landscape=True,\n        scale=1.5,",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_print_to_pdf_with_basic_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_print_to_pdf_with_basic_params():\n    \"\"\"Test print_to_pdf with basic parameters.\"\"\"\n    result = PageCommands.print_to_pdf(\n        landscape=True,\n        scale=1.5,\n        paper_width=8.5,\n        paper_height=11.0\n    )\n    assert result['method'] == PageMethod.PRINT_TO_PDF\n    assert result['params']['landscape'] is True",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_print_to_pdf_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_print_to_pdf_with_all_params():\n    \"\"\"Test print_to_pdf with all parameters.\"\"\"\n    result = PageCommands.print_to_pdf(\n        landscape=False,\n        display_header_footer=True,\n        print_background=True,\n        scale=1.0,\n        paper_width=8.5,\n        paper_height=11.0,\n        margin_top=0.5,",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_reload_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_reload_minimal():\n    \"\"\"Test reload with minimal parameters.\"\"\"\n    result = PageCommands.reload()\n    assert result['method'] == PageMethod.RELOAD\n    assert result['params'] == {}\ndef test_reload_with_all_params():\n    \"\"\"Test reload with all parameters.\"\"\"\n    result = PageCommands.reload(\n        ignore_cache=True,\n        script_to_evaluate_on_load='console.log(\"reloaded\");',",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_reload_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_reload_with_all_params():\n    \"\"\"Test reload with all parameters.\"\"\"\n    result = PageCommands.reload(\n        ignore_cache=True,\n        script_to_evaluate_on_load='console.log(\"reloaded\");',\n        loader_id='loader123'\n    )\n    assert result['method'] == PageMethod.RELOAD\n    assert result['params']['ignoreCache'] is True\n    assert result['params']['scriptToEvaluateOnLoad'] == 'console.log(\"reloaded\");'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_reset_navigation_history",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_reset_navigation_history():\n    \"\"\"Test reset_navigation_history method generates correct command.\"\"\"\n    result = PageCommands.reset_navigation_history()\n    assert result['method'] == PageMethod.RESET_NAVIGATION_HISTORY\n    assert 'params' not in result\ndef test_remove_script_to_evaluate_on_new_document():\n    \"\"\"Test remove_script_to_evaluate_on_new_document method.\"\"\"\n    result = PageCommands.remove_script_to_evaluate_on_new_document(\n        identifier='script123'\n    )",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_remove_script_to_evaluate_on_new_document",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_remove_script_to_evaluate_on_new_document():\n    \"\"\"Test remove_script_to_evaluate_on_new_document method.\"\"\"\n    result = PageCommands.remove_script_to_evaluate_on_new_document(\n        identifier='script123'\n    )\n    assert result['method'] == PageMethod.REMOVE_SCRIPT_TO_EVALUATE_ON_NEW_DOCUMENT\n    assert result['params']['identifier'] == 'script123'\ndef test_set_bypass_csp():\n    \"\"\"Test set_bypass_csp method.\"\"\"\n    result = PageCommands.set_bypass_csp(enabled=True)",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_bypass_csp",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_bypass_csp():\n    \"\"\"Test set_bypass_csp method.\"\"\"\n    result = PageCommands.set_bypass_csp(enabled=True)\n    assert result['method'] == PageMethod.SET_BYPASS_CSP\n    assert result['params']['enabled'] is True\ndef test_set_document_content():\n    \"\"\"Test set_document_content method.\"\"\"\n    result = PageCommands.set_document_content(\n        frame_id='frame123',\n        html='<html><body>Test</body></html>'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_document_content",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_document_content():\n    \"\"\"Test set_document_content method.\"\"\"\n    result = PageCommands.set_document_content(\n        frame_id='frame123',\n        html='<html><body>Test</body></html>'\n    )\n    assert result['method'] == PageMethod.SET_DOCUMENT_CONTENT\n    assert result['params']['frameId'] == 'frame123'\n    assert result['params']['html'] == '<html><body>Test</body></html>'\ndef test_set_intercept_file_chooser_dialog():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_intercept_file_chooser_dialog",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_intercept_file_chooser_dialog():\n    \"\"\"Test set_intercept_file_chooser_dialog method.\"\"\"\n    result = PageCommands.set_intercept_file_chooser_dialog(enabled=True)\n    assert result['method'] == PageMethod.SET_INTERCEPT_FILE_CHOOSER_DIALOG\n    assert result['params']['enabled'] is True\ndef test_set_lifecycle_events_enabled():\n    \"\"\"Test set_lifecycle_events_enabled method.\"\"\"\n    result = PageCommands.set_lifecycle_events_enabled(enabled=True)\n    assert result['method'] == PageMethod.SET_LIFECYCLE_EVENTS_ENABLED\n    assert result['params']['enabled'] is True",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_lifecycle_events_enabled",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_lifecycle_events_enabled():\n    \"\"\"Test set_lifecycle_events_enabled method.\"\"\"\n    result = PageCommands.set_lifecycle_events_enabled(enabled=True)\n    assert result['method'] == PageMethod.SET_LIFECYCLE_EVENTS_ENABLED\n    assert result['params']['enabled'] is True\ndef test_stop_loading():\n    \"\"\"Test stop_loading method generates correct command.\"\"\"\n    result = PageCommands.stop_loading()\n    assert result['method'] == PageMethod.STOP_LOADING\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_stop_loading",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_stop_loading():\n    \"\"\"Test stop_loading method generates correct command.\"\"\"\n    result = PageCommands.stop_loading()\n    assert result['method'] == PageMethod.STOP_LOADING\n    assert 'params' not in result\ndef test_add_compilation_cache():\n    \"\"\"Test add_compilation_cache method.\"\"\"\n    result = PageCommands.add_compilation_cache(\n        url='https://example.com/script.js',\n        data='compiled_data_here'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_add_compilation_cache",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_add_compilation_cache():\n    \"\"\"Test add_compilation_cache method.\"\"\"\n    result = PageCommands.add_compilation_cache(\n        url='https://example.com/script.js',\n        data='compiled_data_here'\n    )\n    assert result['method'] == PageMethod.ADD_COMPILATION_CACHE\n    assert result['params']['url'] == 'https://example.com/script.js'\n    assert result['params']['data'] == 'compiled_data_here'\ndef test_capture_snapshot():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_capture_snapshot",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_capture_snapshot():\n    \"\"\"Test capture_snapshot method.\"\"\"\n    result = PageCommands.capture_snapshot(format='mhtml')\n    assert result['method'] == PageMethod.CAPTURE_SNAPSHOT\n    assert result['params']['format'] == 'mhtml'\ndef test_clear_compilation_cache():\n    \"\"\"Test clear_compilation_cache method generates correct command.\"\"\"\n    result = PageCommands.clear_compilation_cache()\n    assert result['method'] == PageMethod.CLEAR_COMPILATION_CACHE\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_compilation_cache",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_clear_compilation_cache():\n    \"\"\"Test clear_compilation_cache method generates correct command.\"\"\"\n    result = PageCommands.clear_compilation_cache()\n    assert result['method'] == PageMethod.CLEAR_COMPILATION_CACHE\n    assert 'params' not in result\ndef test_crash():\n    \"\"\"Test crash method generates correct command.\"\"\"\n    result = PageCommands.crash()\n    assert result['method'] == PageMethod.CRASH\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_crash",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_crash():\n    \"\"\"Test crash method generates correct command.\"\"\"\n    result = PageCommands.crash()\n    assert result['method'] == PageMethod.CRASH\n    assert 'params' not in result\ndef test_generate_test_report_minimal():\n    \"\"\"Test generate_test_report with minimal parameters.\"\"\"\n    result = PageCommands.generate_test_report(message='Test message')\n    assert result['method'] == PageMethod.GENERATE_TEST_REPORT\n    assert result['params']['message'] == 'Test message'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_generate_test_report_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_generate_test_report_minimal():\n    \"\"\"Test generate_test_report with minimal parameters.\"\"\"\n    result = PageCommands.generate_test_report(message='Test message')\n    assert result['method'] == PageMethod.GENERATE_TEST_REPORT\n    assert result['params']['message'] == 'Test message'\ndef test_generate_test_report_with_group():\n    \"\"\"Test generate_test_report with group parameter.\"\"\"\n    result = PageCommands.generate_test_report(\n        message='Test message',\n        group='test_group'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_generate_test_report_with_group",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_generate_test_report_with_group():\n    \"\"\"Test generate_test_report with group parameter.\"\"\"\n    result = PageCommands.generate_test_report(\n        message='Test message',\n        group='test_group'\n    )\n    assert result['method'] == PageMethod.GENERATE_TEST_REPORT\n    assert result['params']['message'] == 'Test message'\n    assert result['params']['group'] == 'test_group'\ndef test_get_ad_script_ancestry_ids():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_ad_script_ancestry_ids",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_ad_script_ancestry_ids():\n    \"\"\"Test get_ad_script_ancestry_ids method.\"\"\"\n    result = PageCommands.get_ad_script_ancestry_ids(frame_id='frame123')\n    assert result['method'] == PageMethod.GET_AD_SCRIPT_ANCESTRY_IDS\n    assert result['params']['frameId'] == 'frame123'\ndef test_get_app_id_minimal():\n    \"\"\"Test get_app_id with minimal parameters.\"\"\"\n    result = PageCommands.get_app_id()\n    assert result['method'] == PageMethod.GET_APP_ID\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_app_id_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_app_id_minimal():\n    \"\"\"Test get_app_id with minimal parameters.\"\"\"\n    result = PageCommands.get_app_id()\n    assert result['method'] == PageMethod.GET_APP_ID\n    assert result['params'] == {}\ndef test_get_app_id_with_params():\n    \"\"\"Test get_app_id with parameters.\"\"\"\n    result = PageCommands.get_app_id(\n        app_id='app123',\n        recommended_id='rec456'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_app_id_with_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_app_id_with_params():\n    \"\"\"Test get_app_id with parameters.\"\"\"\n    result = PageCommands.get_app_id(\n        app_id='app123',\n        recommended_id='rec456'\n    )\n    assert result['method'] == PageMethod.GET_APP_ID\n    assert result['params']['appId'] == 'app123'\n    assert result['params']['recommendedId'] == 'rec456'\ndef test_get_installability_errors():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_installability_errors",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_installability_errors():\n    \"\"\"Test get_installability_errors method generates correct command.\"\"\"\n    result = PageCommands.get_installability_errors()\n    assert result['method'] == PageMethod.GET_INSTALLABILITY_ERRORS\n    assert 'params' not in result\ndef test_get_origin_trials():\n    \"\"\"Test get_origin_trials method.\"\"\"\n    result = PageCommands.get_origin_trials(frame_id='frame123')\n    assert result['method'] == PageMethod.GET_ORIGIN_TRIALS\n    assert result['params']['frameId'] == 'frame123'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_origin_trials",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_origin_trials():\n    \"\"\"Test get_origin_trials method.\"\"\"\n    result = PageCommands.get_origin_trials(frame_id='frame123')\n    assert result['method'] == PageMethod.GET_ORIGIN_TRIALS\n    assert result['params']['frameId'] == 'frame123'\ndef test_get_permissions_policy_state():\n    \"\"\"Test get_permissions_policy_state method.\"\"\"\n    result = PageCommands.get_permissions_policy_state(frame_id='frame123')\n    assert result['method'] == PageMethod.GET_PERMISSIONS_POLICY_STATE\n    assert result['params']['frameId'] == 'frame123'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_permissions_policy_state",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_permissions_policy_state():\n    \"\"\"Test get_permissions_policy_state method.\"\"\"\n    result = PageCommands.get_permissions_policy_state(frame_id='frame123')\n    assert result['method'] == PageMethod.GET_PERMISSIONS_POLICY_STATE\n    assert result['params']['frameId'] == 'frame123'\ndef test_get_resource_content():\n    \"\"\"Test get_resource_content method.\"\"\"\n    result = PageCommands.get_resource_content(\n        frame_id='frame123',\n        url='https://example.com/resource.js'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_resource_content",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_resource_content():\n    \"\"\"Test get_resource_content method.\"\"\"\n    result = PageCommands.get_resource_content(\n        frame_id='frame123',\n        url='https://example.com/resource.js'\n    )\n    assert result['method'] == PageMethod.GET_RESOURCE_CONTENT\n    assert result['params']['frameId'] == 'frame123'\n    assert result['params']['url'] == 'https://example.com/resource.js'\ndef test_get_resource_tree():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_get_resource_tree",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_get_resource_tree():\n    \"\"\"Test get_resource_tree method generates correct command.\"\"\"\n    result = PageCommands.get_resource_tree()\n    assert result['method'] == PageMethod.GET_RESOURCE_TREE\n    assert 'params' not in result\ndef test_produce_compilation_cache():\n    \"\"\"Test produce_compilation_cache method.\"\"\"\n    scripts = [\n        {'url': 'https://example.com/script1.js', 'eager': True},\n        {'url': 'https://example.com/script2.js', 'eager': False}",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_produce_compilation_cache",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_produce_compilation_cache():\n    \"\"\"Test produce_compilation_cache method.\"\"\"\n    scripts = [\n        {'url': 'https://example.com/script1.js', 'eager': True},\n        {'url': 'https://example.com/script2.js', 'eager': False}\n    ]\n    result = PageCommands.produce_compilation_cache(scripts=scripts)\n    assert result['method'] == PageMethod.PRODUCE_COMPILATION_CACHE\n    assert result['params']['scripts'] == scripts\ndef test_screencast_frame_ack():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_screencast_frame_ack",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_screencast_frame_ack():\n    \"\"\"Test screencast_frame_ack method.\"\"\"\n    result = PageCommands.screencast_frame_ack(session_id='session123')\n    assert result['method'] == PageMethod.SCREENCAST_FRAME_ACK\n    assert result['params']['sessionId'] == 'session123'\ndef test_search_in_resource_minimal():\n    \"\"\"Test search_in_resource with minimal parameters.\"\"\"\n    result = PageCommands.search_in_resource(\n        frame_id='frame123',\n        url='https://example.com/resource.js',",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_search_in_resource_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_search_in_resource_minimal():\n    \"\"\"Test search_in_resource with minimal parameters.\"\"\"\n    result = PageCommands.search_in_resource(\n        frame_id='frame123',\n        url='https://example.com/resource.js',\n        query='function'\n    )\n    assert result['method'] == PageMethod.SEARCH_IN_RESOURCE\n    assert result['params']['frameId'] == 'frame123'\n    assert result['params']['url'] == 'https://example.com/resource.js'",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_search_in_resource_with_options",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_search_in_resource_with_options():\n    \"\"\"Test search_in_resource with all options.\"\"\"\n    result = PageCommands.search_in_resource(\n        frame_id='frame123',\n        url='https://example.com/resource.js',\n        query='function.*test',\n        case_sensitive=True,\n        is_regex=True\n    )\n    assert result['method'] == PageMethod.SEARCH_IN_RESOURCE",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_ad_blocking_enabled",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_ad_blocking_enabled():\n    \"\"\"Test set_ad_blocking_enabled method.\"\"\"\n    result = PageCommands.set_ad_blocking_enabled(enabled=True)\n    assert result['method'] == PageMethod.SET_AD_BLOCKING_ENABLED\n    assert result['params']['enabled'] is True\ndef test_set_font_families():\n    \"\"\"Test set_font_families method.\"\"\"\n    font_families = {\n        'standard': 'Arial',\n        'serif': 'Times New Roman',",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_font_families",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_font_families():\n    \"\"\"Test set_font_families method.\"\"\"\n    font_families = {\n        'standard': 'Arial',\n        'serif': 'Times New Roman',\n        'sansSerif': 'Helvetica',\n        'cursive': 'Comic Sans MS',\n        'fantasy': 'Impact',\n        'math': 'Latin Modern Math'\n    }",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_font_sizes",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_font_sizes():\n    \"\"\"Test set_font_sizes method.\"\"\"\n    font_sizes = {\n        'standard': 16,\n        'fixed': 14\n    }\n    result = PageCommands.set_font_sizes(font_sizes=font_sizes)\n    assert result['method'] == PageMethod.SET_FONT_SIZES\n    assert result['params']['fontSizes'] == font_sizes\ndef test_set_prerendering_allowed():",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_prerendering_allowed",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_prerendering_allowed():\n    \"\"\"Test set_prerendering_allowed method.\"\"\"\n    result = PageCommands.set_prerendering_allowed(allowed=True)\n    assert result['method'] == PageMethod.SET_PRERENDERING_ALLOWED\n    assert result['params']['allowed'] == True\ndef test_set_rph_registration_mode():\n    \"\"\"Test set_rph_registration_mode method.\"\"\"\n    from pydoll.protocol.page.params import AutoResponseMode\n    result = PageCommands.set_rph_registration_mode(mode=AutoResponseMode.AUTO_ACCEPT)\n    assert result['method'] == PageMethod.SET_RPH_REGISTRATION_MODE",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_rph_registration_mode",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_rph_registration_mode():\n    \"\"\"Test set_rph_registration_mode method.\"\"\"\n    from pydoll.protocol.page.params import AutoResponseMode\n    result = PageCommands.set_rph_registration_mode(mode=AutoResponseMode.AUTO_ACCEPT)\n    assert result['method'] == PageMethod.SET_RPH_REGISTRATION_MODE\n    assert result['params']['mode'] == AutoResponseMode.AUTO_ACCEPT\ndef test_set_spc_transaction_mode():\n    \"\"\"Test set_spc_transaction_mode method.\"\"\"\n    from pydoll.protocol.page.params import AutoResponseMode\n    result = PageCommands.set_spc_transaction_mode(mode=AutoResponseMode.AUTO_REJECT)",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_spc_transaction_mode",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_spc_transaction_mode():\n    \"\"\"Test set_spc_transaction_mode method.\"\"\"\n    from pydoll.protocol.page.params import AutoResponseMode\n    result = PageCommands.set_spc_transaction_mode(mode=AutoResponseMode.AUTO_REJECT)\n    assert result['method'] == PageMethod.SET_SPC_TRANSACTION_MODE\n    assert result['params']['mode'] == AutoResponseMode.AUTO_REJECT\ndef test_set_web_lifecycle_state():\n    \"\"\"Test set_web_lifecycle_state method.\"\"\"\n    result = PageCommands.set_web_lifecycle_state(state=WebLifecycleState.FROZEN)\n    assert result['method'] == PageMethod.SET_WEB_LIFECYCLE_STATE",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_set_web_lifecycle_state",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_set_web_lifecycle_state():\n    \"\"\"Test set_web_lifecycle_state method.\"\"\"\n    result = PageCommands.set_web_lifecycle_state(state=WebLifecycleState.FROZEN)\n    assert result['method'] == PageMethod.SET_WEB_LIFECYCLE_STATE\n    assert result['params']['state'] == WebLifecycleState.FROZEN\ndef test_start_screencast_minimal():\n    \"\"\"Test start_screencast with minimal parameters.\"\"\"\n    result = PageCommands.start_screencast(format=ScreencastFormat.JPEG)\n    assert result['method'] == PageMethod.START_SCREENCAST\n    assert result['params']['format'] == ScreencastFormat.JPEG",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_start_screencast_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_start_screencast_minimal():\n    \"\"\"Test start_screencast with minimal parameters.\"\"\"\n    result = PageCommands.start_screencast(format=ScreencastFormat.JPEG)\n    assert result['method'] == PageMethod.START_SCREENCAST\n    assert result['params']['format'] == ScreencastFormat.JPEG\ndef test_start_screencast_with_all_params():\n    \"\"\"Test start_screencast with all parameters.\"\"\"\n    result = PageCommands.start_screencast(\n        format=ScreencastFormat.PNG,\n        quality=80,",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_start_screencast_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_start_screencast_with_all_params():\n    \"\"\"Test start_screencast with all parameters.\"\"\"\n    result = PageCommands.start_screencast(\n        format=ScreencastFormat.PNG,\n        quality=80,\n        max_width=1920,\n        max_height=1080,\n        every_nth_frame=2\n    )\n    assert result['method'] == PageMethod.START_SCREENCAST",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_stop_screencast",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_stop_screencast():\n    \"\"\"Test stop_screencast method generates correct command.\"\"\"\n    result = PageCommands.stop_screencast()\n    assert result['method'] == PageMethod.STOP_SCREENCAST\n    assert 'params' not in result\ndef test_wait_for_debugger():\n    \"\"\"Test wait_for_debugger method generates correct command.\"\"\"\n    result = PageCommands.wait_for_debugger()\n    assert result['method'] == PageMethod.WAIT_FOR_DEBUGGER\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_wait_for_debugger",
        "kind": 2,
        "importPath": "tests.test_commands.test_page_commands",
        "description": "tests.test_commands.test_page_commands",
        "peekOfCode": "def test_wait_for_debugger():\n    \"\"\"Test wait_for_debugger method generates correct command.\"\"\"\n    result = PageCommands.wait_for_debugger()\n    assert result['method'] == PageMethod.WAIT_FOR_DEBUGGER\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_page_commands",
        "documentation": {}
    },
    {
        "label": "test_add_binding_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_add_binding_minimal():\n    \"\"\"Test add_binding with minimal parameters.\"\"\"\n    result = RuntimeCommands.add_binding(name='testBinding')\n    assert result['method'] == RuntimeMethod.ADD_BINDING\n    assert result['params']['name'] == 'testBinding'\ndef test_add_binding_with_context():\n    \"\"\"Test add_binding with execution context name.\"\"\"\n    result = RuntimeCommands.add_binding(\n        name='testBinding',\n        execution_context_name='main'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_add_binding_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_add_binding_with_context():\n    \"\"\"Test add_binding with execution context name.\"\"\"\n    result = RuntimeCommands.add_binding(\n        name='testBinding',\n        execution_context_name='main'\n    )\n    assert result['method'] == RuntimeMethod.ADD_BINDING\n    assert result['params']['name'] == 'testBinding'\n    assert result['params']['executionContextName'] == 'main'\ndef test_await_promise_minimal():",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_await_promise_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_await_promise_minimal():\n    \"\"\"Test await_promise with minimal parameters.\"\"\"\n    result = RuntimeCommands.await_promise(promise_object_id='promise123')\n    assert result['method'] == RuntimeMethod.AWAIT_PROMISE\n    assert result['params']['promiseObjectId'] == 'promise123'\ndef test_await_promise_with_all_params():\n    \"\"\"Test await_promise with all parameters.\"\"\"\n    result = RuntimeCommands.await_promise(\n        promise_object_id='promise123',\n        return_by_value=True,",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_await_promise_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_await_promise_with_all_params():\n    \"\"\"Test await_promise with all parameters.\"\"\"\n    result = RuntimeCommands.await_promise(\n        promise_object_id='promise123',\n        return_by_value=True,\n        generate_preview=False\n    )\n    assert result['method'] == RuntimeMethod.AWAIT_PROMISE\n    assert result['params']['promiseObjectId'] == 'promise123'\n    assert result['params']['returnByValue'] is True",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_call_function_on_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_call_function_on_minimal():\n    \"\"\"Test call_function_on with minimal parameters.\"\"\"\n    result = RuntimeCommands.call_function_on(\n        function_declaration='function() { return this.value; }'\n    )\n    assert result['method'] == RuntimeMethod.CALL_FUNCTION_ON\n    assert result['params']['functionDeclaration'] == 'function() { return this.value; }'\ndef test_call_function_on_with_object_id():\n    \"\"\"Test call_function_on with object ID.\"\"\"\n    result = RuntimeCommands.call_function_on(",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_call_function_on_with_object_id",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_call_function_on_with_object_id():\n    \"\"\"Test call_function_on with object ID.\"\"\"\n    result = RuntimeCommands.call_function_on(\n        function_declaration='function() { return this.value; }',\n        object_id='obj123'\n    )\n    assert result['method'] == RuntimeMethod.CALL_FUNCTION_ON\n    assert result['params']['functionDeclaration'] == 'function() { return this.value; }'\n    assert result['params']['objectId'] == 'obj123'\ndef test_call_function_on_with_all_params():",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_call_function_on_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_call_function_on_with_all_params():\n    \"\"\"Test call_function_on with all parameters.\"\"\"\n    arguments = [\n        {'value': 42},\n        {'value': 'test string'}\n    ]\n    serialization_options = {\n        'serialization': 'deep',\n        'maxDepth': 5\n    }",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_compile_script_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_compile_script_minimal():\n    \"\"\"Test compile_script with minimal parameters.\"\"\"\n    result = RuntimeCommands.compile_script(expression='2 + 2')\n    assert result['method'] == RuntimeMethod.COMPILE_SCRIPT\n    assert result['params']['expression'] == '2 + 2'\ndef test_compile_script_with_all_params():\n    \"\"\"Test compile_script with all parameters.\"\"\"\n    result = RuntimeCommands.compile_script(\n        expression='function test() { return 42; }',\n        source_url='https://example.com/script.js',",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_compile_script_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_compile_script_with_all_params():\n    \"\"\"Test compile_script with all parameters.\"\"\"\n    result = RuntimeCommands.compile_script(\n        expression='function test() { return 42; }',\n        source_url='https://example.com/script.js',\n        persist_script=True,\n        execution_context_id='ctx123'\n    )\n    assert result['method'] == RuntimeMethod.COMPILE_SCRIPT\n    assert result['params']['expression'] == 'function test() { return 42; }'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_disable",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_disable():\n    \"\"\"Test disable method generates correct command.\"\"\"\n    result = RuntimeCommands.disable()\n    assert result['method'] == RuntimeMethod.DISABLE\n    assert 'params' not in result\ndef test_enable():\n    \"\"\"Test enable method generates correct command.\"\"\"\n    result = RuntimeCommands.enable()\n    assert result['method'] == RuntimeMethod.ENABLE\n    assert 'params' not in result",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_enable",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_enable():\n    \"\"\"Test enable method generates correct command.\"\"\"\n    result = RuntimeCommands.enable()\n    assert result['method'] == RuntimeMethod.ENABLE\n    assert 'params' not in result\ndef test_evaluate_minimal():\n    \"\"\"Test evaluate with minimal parameters.\"\"\"\n    result = RuntimeCommands.evaluate(expression='2 + 2')\n    assert result['method'] == RuntimeMethod.EVALUATE\n    assert result['params']['expression'] == '2 + 2'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_evaluate_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_evaluate_minimal():\n    \"\"\"Test evaluate with minimal parameters.\"\"\"\n    result = RuntimeCommands.evaluate(expression='2 + 2')\n    assert result['method'] == RuntimeMethod.EVALUATE\n    assert result['params']['expression'] == '2 + 2'\ndef test_evaluate_with_basic_params():\n    \"\"\"Test evaluate with basic parameters.\"\"\"\n    result = RuntimeCommands.evaluate(\n        expression='document.title',\n        return_by_value=True,",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_evaluate_with_basic_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_evaluate_with_basic_params():\n    \"\"\"Test evaluate with basic parameters.\"\"\"\n    result = RuntimeCommands.evaluate(\n        expression='document.title',\n        return_by_value=True,\n        silent=False\n    )\n    assert result['method'] == RuntimeMethod.EVALUATE\n    assert result['params']['expression'] == 'document.title'\n    assert result['params']['returnByValue'] is True",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_evaluate_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_evaluate_with_all_params():\n    \"\"\"Test evaluate with all parameters.\"\"\"\n    serialization_options = {\n        'serialization': 'json',\n        'maxDepth': 3\n    }\n    result = RuntimeCommands.evaluate(\n        expression='window.location.href',\n        object_group='testGroup',\n        include_command_line_api=True,",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_get_properties_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_get_properties_minimal():\n    \"\"\"Test get_properties with minimal parameters.\"\"\"\n    result = RuntimeCommands.get_properties(object_id='obj123')\n    assert result['method'] == RuntimeMethod.GET_PROPERTIES\n    assert result['params']['objectId'] == 'obj123'\ndef test_get_properties_with_all_params():\n    \"\"\"Test get_properties with all parameters.\"\"\"\n    result = RuntimeCommands.get_properties(\n        object_id='obj123',\n        own_properties=True,",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_get_properties_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_get_properties_with_all_params():\n    \"\"\"Test get_properties with all parameters.\"\"\"\n    result = RuntimeCommands.get_properties(\n        object_id='obj123',\n        own_properties=True,\n        accessor_properties_only=False,\n        generate_preview=True,\n        non_indexed_properties_only=False\n    )\n    assert result['method'] == RuntimeMethod.GET_PROPERTIES",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_global_lexical_scope_names_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_global_lexical_scope_names_minimal():\n    \"\"\"Test global_lexical_scope_names with minimal parameters.\"\"\"\n    result = RuntimeCommands.global_lexical_scope_names()\n    assert result['method'] == RuntimeMethod.GLOBAL_LEXICAL_SCOPE_NAMES\n    assert result['params'] == {}\ndef test_global_lexical_scope_names_with_context():\n    \"\"\"Test global_lexical_scope_names with execution context ID.\"\"\"\n    result = RuntimeCommands.global_lexical_scope_names(\n        execution_context_id='ctx123'\n    )",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_global_lexical_scope_names_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_global_lexical_scope_names_with_context():\n    \"\"\"Test global_lexical_scope_names with execution context ID.\"\"\"\n    result = RuntimeCommands.global_lexical_scope_names(\n        execution_context_id='ctx123'\n    )\n    assert result['method'] == RuntimeMethod.GLOBAL_LEXICAL_SCOPE_NAMES\n    assert result['params']['executionContextId'] == 'ctx123'\ndef test_query_objects_minimal():\n    \"\"\"Test query_objects with minimal parameters.\"\"\"\n    result = RuntimeCommands.query_objects(prototype_object_id='proto123')",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_query_objects_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_query_objects_minimal():\n    \"\"\"Test query_objects with minimal parameters.\"\"\"\n    result = RuntimeCommands.query_objects(prototype_object_id='proto123')\n    assert result['method'] == RuntimeMethod.QUERY_OBJECTS\n    assert result['params']['prototypeObjectId'] == 'proto123'\ndef test_query_objects_with_group():\n    \"\"\"Test query_objects with object group.\"\"\"\n    result = RuntimeCommands.query_objects(\n        prototype_object_id='proto123',\n        object_group='testGroup'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_query_objects_with_group",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_query_objects_with_group():\n    \"\"\"Test query_objects with object group.\"\"\"\n    result = RuntimeCommands.query_objects(\n        prototype_object_id='proto123',\n        object_group='testGroup'\n    )\n    assert result['method'] == RuntimeMethod.QUERY_OBJECTS\n    assert result['params']['prototypeObjectId'] == 'proto123'\n    assert result['params']['objectGroup'] == 'testGroup'\ndef test_release_object():",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_release_object",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_release_object():\n    \"\"\"Test release_object method.\"\"\"\n    result = RuntimeCommands.release_object(object_id='obj123')\n    assert result['method'] == RuntimeMethod.RELEASE_OBJECT\n    assert result['params']['objectId'] == 'obj123'\ndef test_release_object_group():\n    \"\"\"Test release_object_group method.\"\"\"\n    result = RuntimeCommands.release_object_group(object_group='testGroup')\n    assert result['method'] == RuntimeMethod.RELEASE_OBJECT_GROUP\n    assert result['params']['objectGroup'] == 'testGroup'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_release_object_group",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_release_object_group():\n    \"\"\"Test release_object_group method.\"\"\"\n    result = RuntimeCommands.release_object_group(object_group='testGroup')\n    assert result['method'] == RuntimeMethod.RELEASE_OBJECT_GROUP\n    assert result['params']['objectGroup'] == 'testGroup'\ndef test_remove_binding():\n    \"\"\"Test remove_binding method.\"\"\"\n    result = RuntimeCommands.remove_binding(name='testBinding')\n    assert result['method'] == RuntimeMethod.REMOVE_BINDING\n    assert result['params']['name'] == 'testBinding'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_remove_binding",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_remove_binding():\n    \"\"\"Test remove_binding method.\"\"\"\n    result = RuntimeCommands.remove_binding(name='testBinding')\n    assert result['method'] == RuntimeMethod.REMOVE_BINDING\n    assert result['params']['name'] == 'testBinding'\ndef test_run_script_minimal():\n    \"\"\"Test run_script with minimal parameters.\"\"\"\n    result = RuntimeCommands.run_script(script_id='script123')\n    assert result['method'] == RuntimeMethod.RUN_SCRIPT\n    assert result['params']['scriptId'] == 'script123'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_run_script_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_run_script_minimal():\n    \"\"\"Test run_script with minimal parameters.\"\"\"\n    result = RuntimeCommands.run_script(script_id='script123')\n    assert result['method'] == RuntimeMethod.RUN_SCRIPT\n    assert result['params']['scriptId'] == 'script123'\ndef test_run_script_with_all_params():\n    \"\"\"Test run_script with all parameters.\"\"\"\n    result = RuntimeCommands.run_script(\n        script_id='script123',\n        execution_context_id='ctx456',",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_run_script_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_run_script_with_all_params():\n    \"\"\"Test run_script with all parameters.\"\"\"\n    result = RuntimeCommands.run_script(\n        script_id='script123',\n        execution_context_id='ctx456',\n        object_group='testGroup',\n        silent=True,\n        include_command_line_api=False,\n        return_by_value=True,\n        generate_preview=False,",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_set_async_call_stack_depth",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_set_async_call_stack_depth():\n    \"\"\"Test set_async_call_stack_depth method.\"\"\"\n    result = RuntimeCommands.set_async_call_stack_depth(max_depth=10)\n    assert result['method'] == RuntimeMethod.SET_ASYNC_CALL_STACK_DEPTH\n    assert result['params']['maxDepth'] == 10\ndef test_set_custom_object_formatter_enabled():\n    \"\"\"Test set_custom_object_formatter_enabled method.\"\"\"\n    result = RuntimeCommands.set_custom_object_formatter_enabled(enabled=True)\n    assert result['method'] == RuntimeMethod.SET_CUSTOM_OBJECT_FORMATTER_ENABLED\n    assert result['params']['enabled'] is True",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_set_custom_object_formatter_enabled",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_set_custom_object_formatter_enabled():\n    \"\"\"Test set_custom_object_formatter_enabled method.\"\"\"\n    result = RuntimeCommands.set_custom_object_formatter_enabled(enabled=True)\n    assert result['method'] == RuntimeMethod.SET_CUSTOM_OBJECT_FORMATTER_ENABLED\n    assert result['params']['enabled'] is True\ndef test_set_max_call_stack_size_to_capture():\n    \"\"\"Test set_max_call_stack_size_to_capture method.\"\"\"\n    result = RuntimeCommands.set_max_call_stack_size_to_capture(size=100)\n    assert result['method'] == RuntimeMethod.SET_MAX_CALL_STACK_SIZE_TO_CAPTURE\n    assert result['params']['size'] == 100",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_set_max_call_stack_size_to_capture",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_set_max_call_stack_size_to_capture():\n    \"\"\"Test set_max_call_stack_size_to_capture method.\"\"\"\n    result = RuntimeCommands.set_max_call_stack_size_to_capture(size=100)\n    assert result['method'] == RuntimeMethod.SET_MAX_CALL_STACK_SIZE_TO_CAPTURE\n    assert result['params']['size'] == 100\ndef test_evaluate_simple_expression():\n    \"\"\"Test evaluate with a simple mathematical expression.\"\"\"\n    result = RuntimeCommands.evaluate(expression='Math.PI * 2')\n    assert result['method'] == RuntimeMethod.EVALUATE\n    assert result['params']['expression'] == 'Math.PI * 2'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_evaluate_simple_expression",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_evaluate_simple_expression():\n    \"\"\"Test evaluate with a simple mathematical expression.\"\"\"\n    result = RuntimeCommands.evaluate(expression='Math.PI * 2')\n    assert result['method'] == RuntimeMethod.EVALUATE\n    assert result['params']['expression'] == 'Math.PI * 2'\ndef test_call_function_on_with_arguments():\n    \"\"\"Test call_function_on with function arguments.\"\"\"\n    arguments = [\n        {'value': 10},\n        {'value': 20}",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_call_function_on_with_arguments",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_call_function_on_with_arguments():\n    \"\"\"Test call_function_on with function arguments.\"\"\"\n    arguments = [\n        {'value': 10},\n        {'value': 20}\n    ]\n    result = RuntimeCommands.call_function_on(\n        function_declaration='function(a, b) { return a * b; }',\n        object_id='obj123',\n        arguments=arguments,",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_get_properties_own_only",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_get_properties_own_only():\n    \"\"\"Test get_properties with own properties only.\"\"\"\n    result = RuntimeCommands.get_properties(\n        object_id='obj123',\n        own_properties=True,\n        generate_preview=False\n    )\n    assert result['method'] == RuntimeMethod.GET_PROPERTIES\n    assert result['params']['objectId'] == 'obj123'\n    assert result['params']['ownProperties'] is True",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_evaluate_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_evaluate_with_context():\n    \"\"\"Test evaluate with specific execution context.\"\"\"\n    result = RuntimeCommands.evaluate(\n        expression='this.document.title',\n        context_id='ctx123',\n        include_command_line_api=True\n    )\n    assert result['method'] == RuntimeMethod.EVALUATE\n    assert result['params']['expression'] == 'this.document.title'\n    assert result['params']['contextId'] == 'ctx123'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_compile_script_with_source_url",
        "kind": 2,
        "importPath": "tests.test_commands.test_runtime_commands",
        "description": "tests.test_commands.test_runtime_commands",
        "peekOfCode": "def test_compile_script_with_source_url():\n    \"\"\"Test compile_script with source URL.\"\"\"\n    result = RuntimeCommands.compile_script(\n        expression='const x = 42; console.log(x);',\n        source_url='test://script.js',\n        persist_script=False\n    )\n    assert result['method'] == RuntimeMethod.COMPILE_SCRIPT\n    assert result['params']['expression'] == 'const x = 42; console.log(x);'\n    assert result['params']['sourceURL'] == 'test://script.js'",
        "detail": "tests.test_commands.test_runtime_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_cookies_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_clear_cookies_minimal():\n    \"\"\"Test clear_cookies with minimal parameters.\"\"\"\n    result = StorageCommands.clear_cookies()\n    assert result['method'] == StorageMethod.CLEAR_COOKIES\n    assert result['params'] == {}\ndef test_clear_cookies_with_context():\n    \"\"\"Test clear_cookies with browser context ID.\"\"\"\n    result = StorageCommands.clear_cookies(browser_context_id='context123')\n    assert result['method'] == StorageMethod.CLEAR_COOKIES\n    assert result['params']['browserContextId'] == 'context123'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_cookies_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_clear_cookies_with_context():\n    \"\"\"Test clear_cookies with browser context ID.\"\"\"\n    result = StorageCommands.clear_cookies(browser_context_id='context123')\n    assert result['method'] == StorageMethod.CLEAR_COOKIES\n    assert result['params']['browserContextId'] == 'context123'\ndef test_clear_data_for_origin():\n    \"\"\"Test clear_data_for_origin method.\"\"\"\n    result = StorageCommands.clear_data_for_origin(\n        origin='https://example.com',\n        storage_types='cookies,local_storage'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_data_for_origin",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_clear_data_for_origin():\n    \"\"\"Test clear_data_for_origin method.\"\"\"\n    result = StorageCommands.clear_data_for_origin(\n        origin='https://example.com',\n        storage_types='cookies,local_storage'\n    )\n    assert result['method'] == StorageMethod.CLEAR_DATA_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://example.com'\n    assert result['params']['storageTypes'] == 'cookies,local_storage'\ndef test_clear_data_for_storage_key():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_data_for_storage_key",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_clear_data_for_storage_key():\n    \"\"\"Test clear_data_for_storage_key method.\"\"\"\n    result = StorageCommands.clear_data_for_storage_key(\n        storage_key='storage_key_123',\n        storage_types='indexeddb,cache_storage'\n    )\n    assert result['method'] == StorageMethod.CLEAR_DATA_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'storage_key_123'\n    assert result['params']['storageTypes'] == 'indexeddb,cache_storage'\ndef test_get_cookies_minimal():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_cookies_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_cookies_minimal():\n    \"\"\"Test get_cookies with minimal parameters.\"\"\"\n    result = StorageCommands.get_cookies()\n    assert result['method'] == StorageMethod.GET_COOKIES\n    assert result['params'] == {}\ndef test_get_cookies_with_context():\n    \"\"\"Test get_cookies with browser context ID.\"\"\"\n    result = StorageCommands.get_cookies(browser_context_id='context456')\n    assert result['method'] == StorageMethod.GET_COOKIES\n    assert result['params']['browserContextId'] == 'context456'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_cookies_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_cookies_with_context():\n    \"\"\"Test get_cookies with browser context ID.\"\"\"\n    result = StorageCommands.get_cookies(browser_context_id='context456')\n    assert result['method'] == StorageMethod.GET_COOKIES\n    assert result['params']['browserContextId'] == 'context456'\ndef test_get_storage_key_for_frame():\n    \"\"\"Test get_storage_key_for_frame method.\"\"\"\n    result = StorageCommands.get_storage_key_for_frame(frame_id='frame123')\n    assert result['method'] == StorageMethod.GET_STORAGE_KEY_FOR_FRAME\n    assert result['params']['frameId'] == 'frame123'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_storage_key_for_frame",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_storage_key_for_frame():\n    \"\"\"Test get_storage_key_for_frame method.\"\"\"\n    result = StorageCommands.get_storage_key_for_frame(frame_id='frame123')\n    assert result['method'] == StorageMethod.GET_STORAGE_KEY_FOR_FRAME\n    assert result['params']['frameId'] == 'frame123'\ndef test_get_usage_and_quota():\n    \"\"\"Test get_usage_and_quota method.\"\"\"\n    result = StorageCommands.get_usage_and_quota(origin='https://example.com')\n    assert result['method'] == StorageMethod.GET_USAGE_AND_QUOTA\n    assert result['params']['origin'] == 'https://example.com'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_usage_and_quota",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_usage_and_quota():\n    \"\"\"Test get_usage_and_quota method.\"\"\"\n    result = StorageCommands.get_usage_and_quota(origin='https://example.com')\n    assert result['method'] == StorageMethod.GET_USAGE_AND_QUOTA\n    assert result['params']['origin'] == 'https://example.com'\ndef test_set_cookies_minimal():\n    \"\"\"Test set_cookies with minimal parameters.\"\"\"\n    cookies = [\n        {'name': 'cookie1', 'value': 'value1', 'domain': 'example.com'},\n        {'name': 'cookie2', 'value': 'value2', 'domain': 'example.com'}",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookies_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_cookies_minimal():\n    \"\"\"Test set_cookies with minimal parameters.\"\"\"\n    cookies = [\n        {'name': 'cookie1', 'value': 'value1', 'domain': 'example.com'},\n        {'name': 'cookie2', 'value': 'value2', 'domain': 'example.com'}\n    ]\n    result = StorageCommands.set_cookies(cookies=cookies)\n    assert result['method'] == StorageMethod.SET_COOKIES\n    assert result['params']['cookies'] == cookies\ndef test_set_cookies_with_context():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookies_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_cookies_with_context():\n    \"\"\"Test set_cookies with browser context ID.\"\"\"\n    cookies = [{'name': 'test', 'value': 'value', 'domain': 'test.com'}]\n    result = StorageCommands.set_cookies(\n        cookies=cookies,\n        browser_context_id='context789'\n    )\n    assert result['method'] == StorageMethod.SET_COOKIES\n    assert result['params']['cookies'] == cookies\n    assert result['params']['browserContextId'] == 'context789'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_protected_audience_k_anonymity",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_protected_audience_k_anonymity():\n    \"\"\"Test set_protected_audience_k_anonymity method.\"\"\"\n    hashes = ['hash1', 'hash2', 'hash3']\n    result = StorageCommands.set_protected_audience_k_anonymity(\n        owner='https://example.com',\n        name='test_group',\n        hashes=hashes\n    )\n    assert result['method'] == StorageMethod.SET_PROTECTED_AUDIENCE_K_ANONYMITY\n    assert result['params']['owner'] == 'https://example.com'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_track_cache_storage_for_origin",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_track_cache_storage_for_origin():\n    \"\"\"Test track_cache_storage_for_origin method.\"\"\"\n    result = StorageCommands.track_cache_storage_for_origin(origin='https://example.com')\n    assert result['method'] == StorageMethod.TRACK_CACHE_STORAGE_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://example.com'\ndef test_track_cache_storage_for_storage_key():\n    \"\"\"Test track_cache_storage_for_storage_key method.\"\"\"\n    result = StorageCommands.track_cache_storage_for_storage_key(storage_key='key123')\n    assert result['method'] == StorageMethod.TRACK_CACHE_STORAGE_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'key123'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_track_cache_storage_for_storage_key",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_track_cache_storage_for_storage_key():\n    \"\"\"Test track_cache_storage_for_storage_key method.\"\"\"\n    result = StorageCommands.track_cache_storage_for_storage_key(storage_key='key123')\n    assert result['method'] == StorageMethod.TRACK_CACHE_STORAGE_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'key123'\ndef test_track_indexed_db_for_origin():\n    \"\"\"Test track_indexed_db_for_origin method.\"\"\"\n    result = StorageCommands.track_indexed_db_for_origin(origin='https://test.com')\n    assert result['method'] == StorageMethod.TRACK_INDEXED_DB_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://test.com'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_track_indexed_db_for_origin",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_track_indexed_db_for_origin():\n    \"\"\"Test track_indexed_db_for_origin method.\"\"\"\n    result = StorageCommands.track_indexed_db_for_origin(origin='https://test.com')\n    assert result['method'] == StorageMethod.TRACK_INDEXED_DB_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://test.com'\ndef test_track_indexed_db_for_storage_key():\n    \"\"\"Test track_indexed_db_for_storage_key method.\"\"\"\n    result = StorageCommands.track_indexed_db_for_storage_key(storage_key='key456')\n    assert result['method'] == StorageMethod.TRACK_INDEXED_DB_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'key456'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_track_indexed_db_for_storage_key",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_track_indexed_db_for_storage_key():\n    \"\"\"Test track_indexed_db_for_storage_key method.\"\"\"\n    result = StorageCommands.track_indexed_db_for_storage_key(storage_key='key456')\n    assert result['method'] == StorageMethod.TRACK_INDEXED_DB_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'key456'\ndef test_untrack_cache_storage_for_origin():\n    \"\"\"Test untrack_cache_storage_for_origin method.\"\"\"\n    result = StorageCommands.untrack_cache_storage_for_origin(origin='https://example.org')\n    assert result['method'] == StorageMethod.UNTRACK_CACHE_STORAGE_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://example.org'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_untrack_cache_storage_for_origin",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_untrack_cache_storage_for_origin():\n    \"\"\"Test untrack_cache_storage_for_origin method.\"\"\"\n    result = StorageCommands.untrack_cache_storage_for_origin(origin='https://example.org')\n    assert result['method'] == StorageMethod.UNTRACK_CACHE_STORAGE_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://example.org'\ndef test_untrack_cache_storage_for_storage_key():\n    \"\"\"Test untrack_cache_storage_for_storage_key method.\"\"\"\n    result = StorageCommands.untrack_cache_storage_for_storage_key(storage_key='key789')\n    assert result['method'] == StorageMethod.UNTRACK_CACHE_STORAGE_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'key789'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_untrack_cache_storage_for_storage_key",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_untrack_cache_storage_for_storage_key():\n    \"\"\"Test untrack_cache_storage_for_storage_key method.\"\"\"\n    result = StorageCommands.untrack_cache_storage_for_storage_key(storage_key='key789')\n    assert result['method'] == StorageMethod.UNTRACK_CACHE_STORAGE_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'key789'\ndef test_untrack_indexed_db_for_origin():\n    \"\"\"Test untrack_indexed_db_for_origin method.\"\"\"\n    result = StorageCommands.untrack_indexed_db_for_origin(origin='https://test.org')\n    assert result['method'] == StorageMethod.UNTRACK_INDEXED_DB_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://test.org'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_untrack_indexed_db_for_origin",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_untrack_indexed_db_for_origin():\n    \"\"\"Test untrack_indexed_db_for_origin method.\"\"\"\n    result = StorageCommands.untrack_indexed_db_for_origin(origin='https://test.org')\n    assert result['method'] == StorageMethod.UNTRACK_INDEXED_DB_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://test.org'\ndef test_untrack_indexed_db_for_storage_key():\n    \"\"\"Test untrack_indexed_db_for_storage_key method.\"\"\"\n    result = StorageCommands.untrack_indexed_db_for_storage_key(storage_key='key000')\n    assert result['method'] == StorageMethod.UNTRACK_INDEXED_DB_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'key000'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_untrack_indexed_db_for_storage_key",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_untrack_indexed_db_for_storage_key():\n    \"\"\"Test untrack_indexed_db_for_storage_key method.\"\"\"\n    result = StorageCommands.untrack_indexed_db_for_storage_key(storage_key='key000')\n    assert result['method'] == StorageMethod.UNTRACK_INDEXED_DB_FOR_STORAGE_KEY\n    assert result['params']['storageKey'] == 'key000'\ndef test_clear_shared_storage_entries():\n    \"\"\"Test clear_shared_storage_entries method.\"\"\"\n    result = StorageCommands.clear_shared_storage_entries(owner_origin='https://owner.com')\n    assert result['method'] == StorageMethod.CLEAR_SHARED_STORAGE_ENTRIES\n    assert result['params']['ownerOrigin'] == 'https://owner.com'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_shared_storage_entries",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_clear_shared_storage_entries():\n    \"\"\"Test clear_shared_storage_entries method.\"\"\"\n    result = StorageCommands.clear_shared_storage_entries(owner_origin='https://owner.com')\n    assert result['method'] == StorageMethod.CLEAR_SHARED_STORAGE_ENTRIES\n    assert result['params']['ownerOrigin'] == 'https://owner.com'\ndef test_clear_trust_tokens():\n    \"\"\"Test clear_trust_tokens method.\"\"\"\n    result = StorageCommands.clear_trust_tokens(issuer_origin='https://issuer.com')\n    assert result['method'] == StorageMethod.CLEAR_TRUST_TOKENS\n    assert result['params']['issuerOrigin'] == 'https://issuer.com'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_trust_tokens",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_clear_trust_tokens():\n    \"\"\"Test clear_trust_tokens method.\"\"\"\n    result = StorageCommands.clear_trust_tokens(issuer_origin='https://issuer.com')\n    assert result['method'] == StorageMethod.CLEAR_TRUST_TOKENS\n    assert result['params']['issuerOrigin'] == 'https://issuer.com'\ndef test_delete_shared_storage_entry():\n    \"\"\"Test delete_shared_storage_entry method.\"\"\"\n    result = StorageCommands.delete_shared_storage_entry(\n        owner_origin='https://owner.com',\n        key='test_key'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_delete_shared_storage_entry",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_delete_shared_storage_entry():\n    \"\"\"Test delete_shared_storage_entry method.\"\"\"\n    result = StorageCommands.delete_shared_storage_entry(\n        owner_origin='https://owner.com',\n        key='test_key'\n    )\n    assert result['method'] == StorageMethod.DELETE_SHARED_STORAGE_ENTRY\n    assert result['params']['ownerOrigin'] == 'https://owner.com'\n    assert result['params']['key'] == 'test_key'\ndef test_delete_storage_bucket():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_delete_storage_bucket",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_delete_storage_bucket():\n    \"\"\"Test delete_storage_bucket method.\"\"\"\n    bucket = {\n        'storageKey': 'key123',\n        'name': 'test_bucket'\n    }\n    result = StorageCommands.delete_storage_bucket(bucket=bucket)\n    assert result['method'] == StorageMethod.DELETE_STORAGE_BUCKET\n    assert result['params']['bucket'] == bucket\ndef test_get_affected_urls_for_third_party_cookie_metadata():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_affected_urls_for_third_party_cookie_metadata",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_affected_urls_for_third_party_cookie_metadata():\n    \"\"\"Test get_affected_urls_for_third_party_cookie_metadata method.\"\"\"\n    third_party_urls = ['https://third1.com', 'https://third2.com']\n    result = StorageCommands.get_affected_urls_for_third_party_cookie_metadata(\n        first_party_url='https://first.com',\n        third_party_urls=third_party_urls\n    )\n    assert result['method'] == StorageMethod.GET_AFFECTED_URLS_FOR_THIRD_PARTY_COOKIE_METADATA\n    assert result['params']['firstPartyUrl'] == 'https://first.com'\n    assert result['params']['thirdPartyUrls'] == third_party_urls",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_interest_group_details",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_interest_group_details():\n    \"\"\"Test get_interest_group_details method.\"\"\"\n    result = StorageCommands.get_interest_group_details(\n        owner_origin='https://owner.com',\n        name='interest_group_1'\n    )\n    assert result['method'] == StorageMethod.GET_INTEREST_GROUP_DETAILS\n    assert result['params']['ownerOrigin'] == 'https://owner.com'\n    assert result['params']['name'] == 'interest_group_1'\ndef test_get_related_website_sets():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_related_website_sets",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_related_website_sets():\n    \"\"\"Test get_related_website_sets method.\"\"\"\n    sets = [\n        {\n            'primarySites': ['https://primary.com'],\n            'associatedSites': ['https://associated.com']\n        }\n    ]\n    result = StorageCommands.get_related_website_sets(sets=sets)\n    assert result['method'] == StorageMethod.GET_RELATED_WEBSITE_SETS",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_shared_storage_entries",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_shared_storage_entries():\n    \"\"\"Test get_shared_storage_entries method.\"\"\"\n    result = StorageCommands.get_shared_storage_entries(owner_origin='https://shared.com')\n    assert result['method'] == StorageMethod.GET_SHARED_STORAGE_ENTRIES\n    assert result['params']['ownerOrigin'] == 'https://shared.com'\ndef test_get_shared_storage_metadata():\n    \"\"\"Test get_shared_storage_metadata method.\"\"\"\n    result = StorageCommands.get_shared_storage_metadata(owner_origin='https://metadata.com')\n    assert result['method'] == StorageMethod.GET_SHARED_STORAGE_METADATA\n    assert result['params']['ownerOrigin'] == 'https://metadata.com'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_shared_storage_metadata",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_shared_storage_metadata():\n    \"\"\"Test get_shared_storage_metadata method.\"\"\"\n    result = StorageCommands.get_shared_storage_metadata(owner_origin='https://metadata.com')\n    assert result['method'] == StorageMethod.GET_SHARED_STORAGE_METADATA\n    assert result['params']['ownerOrigin'] == 'https://metadata.com'\ndef test_get_trust_tokens():\n    \"\"\"Test get_trust_tokens method.\"\"\"\n    result = StorageCommands.get_trust_tokens()\n    assert result['method'] == StorageMethod.GET_TRUST_TOKENS\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_get_trust_tokens",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_get_trust_tokens():\n    \"\"\"Test get_trust_tokens method.\"\"\"\n    result = StorageCommands.get_trust_tokens()\n    assert result['method'] == StorageMethod.GET_TRUST_TOKENS\n    assert result['params'] == {}\ndef test_override_quota_for_origin_minimal():\n    \"\"\"Test override_quota_for_origin with minimal parameters.\"\"\"\n    result = StorageCommands.override_quota_for_origin(origin='https://quota.com')\n    assert result['method'] == StorageMethod.OVERRIDE_QUOTA_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://quota.com'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_override_quota_for_origin_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_override_quota_for_origin_minimal():\n    \"\"\"Test override_quota_for_origin with minimal parameters.\"\"\"\n    result = StorageCommands.override_quota_for_origin(origin='https://quota.com')\n    assert result['method'] == StorageMethod.OVERRIDE_QUOTA_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://quota.com'\ndef test_override_quota_for_origin_with_size():\n    \"\"\"Test override_quota_for_origin with quota size.\"\"\"\n    result = StorageCommands.override_quota_for_origin(\n        origin='https://quota.com',\n        quota_size=1024000.0",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_override_quota_for_origin_with_size",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_override_quota_for_origin_with_size():\n    \"\"\"Test override_quota_for_origin with quota size.\"\"\"\n    result = StorageCommands.override_quota_for_origin(\n        origin='https://quota.com',\n        quota_size=1024000.0\n    )\n    assert result['method'] == StorageMethod.OVERRIDE_QUOTA_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://quota.com'\n    assert result['params']['quotaSize'] == 1024000.0\ndef test_reset_shared_storage_budget():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_reset_shared_storage_budget",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_reset_shared_storage_budget():\n    \"\"\"Test reset_shared_storage_budget method.\"\"\"\n    result = StorageCommands.reset_shared_storage_budget(owner_origin='https://budget.com')\n    assert result['method'] == StorageMethod.RESET_SHARED_STORAGE_BUDGET\n    assert result['params']['ownerOrigin'] == 'https://budget.com'\ndef test_run_bounce_tracking_mitigations():\n    \"\"\"Test run_bounce_tracking_mitigations method.\"\"\"\n    result = StorageCommands.run_bounce_tracking_mitigations()\n    assert result['method'] == StorageMethod.RUN_BOUNCE_TRACKING_MITIGATIONS\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_run_bounce_tracking_mitigations",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_run_bounce_tracking_mitigations():\n    \"\"\"Test run_bounce_tracking_mitigations method.\"\"\"\n    result = StorageCommands.run_bounce_tracking_mitigations()\n    assert result['method'] == StorageMethod.RUN_BOUNCE_TRACKING_MITIGATIONS\n    assert result['params'] == {}\ndef test_send_pending_attribution_reports():\n    \"\"\"Test send_pending_attribution_reports method.\"\"\"\n    result = StorageCommands.send_pending_attribution_reports()\n    assert result['method'] == StorageMethod.SEND_PENDING_ATTRIBUTION_REPORTS\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_send_pending_attribution_reports",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_send_pending_attribution_reports():\n    \"\"\"Test send_pending_attribution_reports method.\"\"\"\n    result = StorageCommands.send_pending_attribution_reports()\n    assert result['method'] == StorageMethod.SEND_PENDING_ATTRIBUTION_REPORTS\n    assert result['params'] == {}\ndef test_set_attribution_reporting_local_testing_mode():\n    \"\"\"Test set_attribution_reporting_local_testing_mode method.\"\"\"\n    result = StorageCommands.set_attribution_reporting_local_testing_mode(enable=True)\n    assert result['method'] == StorageMethod.SET_ATTRIBUTION_REPORTING_LOCAL_TESTING_MODE\n    assert result['params']['enable'] is True",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_attribution_reporting_local_testing_mode",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_attribution_reporting_local_testing_mode():\n    \"\"\"Test set_attribution_reporting_local_testing_mode method.\"\"\"\n    result = StorageCommands.set_attribution_reporting_local_testing_mode(enable=True)\n    assert result['method'] == StorageMethod.SET_ATTRIBUTION_REPORTING_LOCAL_TESTING_MODE\n    assert result['params']['enable'] is True\ndef test_set_attribution_reporting_tracking():\n    \"\"\"Test set_attribution_reporting_tracking method.\"\"\"\n    result = StorageCommands.set_attribution_reporting_tracking(enable=False)\n    assert result['method'] == StorageMethod.SET_ATTRIBUTION_REPORTING_TRACKING\n    assert result['params']['enable'] is False",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_attribution_reporting_tracking",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_attribution_reporting_tracking():\n    \"\"\"Test set_attribution_reporting_tracking method.\"\"\"\n    result = StorageCommands.set_attribution_reporting_tracking(enable=False)\n    assert result['method'] == StorageMethod.SET_ATTRIBUTION_REPORTING_TRACKING\n    assert result['params']['enable'] is False\ndef test_set_interest_group_auction_tracking():\n    \"\"\"Test set_interest_group_auction_tracking method.\"\"\"\n    result = StorageCommands.set_interest_group_auction_tracking(enable=True)\n    assert result['method'] == StorageMethod.SET_INTEREST_GROUP_AUCTION_TRACKING\n    assert result['params']['enable'] is True",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_interest_group_auction_tracking",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_interest_group_auction_tracking():\n    \"\"\"Test set_interest_group_auction_tracking method.\"\"\"\n    result = StorageCommands.set_interest_group_auction_tracking(enable=True)\n    assert result['method'] == StorageMethod.SET_INTEREST_GROUP_AUCTION_TRACKING\n    assert result['params']['enable'] is True\ndef test_set_interest_group_tracking():\n    \"\"\"Test set_interest_group_tracking method.\"\"\"\n    result = StorageCommands.set_interest_group_tracking(enable=False)\n    assert result['method'] == StorageMethod.SET_INTEREST_GROUP_TRACKING\n    assert result['params']['enable'] is False",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_interest_group_tracking",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_interest_group_tracking():\n    \"\"\"Test set_interest_group_tracking method.\"\"\"\n    result = StorageCommands.set_interest_group_tracking(enable=False)\n    assert result['method'] == StorageMethod.SET_INTEREST_GROUP_TRACKING\n    assert result['params']['enable'] is False\ndef test_set_shared_storage_entry_minimal():\n    \"\"\"Test set_shared_storage_entry with minimal parameters.\"\"\"\n    result = StorageCommands.set_shared_storage_entry(\n        owner_origin='https://storage.com',\n        key='test_key',",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_shared_storage_entry_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_shared_storage_entry_minimal():\n    \"\"\"Test set_shared_storage_entry with minimal parameters.\"\"\"\n    result = StorageCommands.set_shared_storage_entry(\n        owner_origin='https://storage.com',\n        key='test_key',\n        value='test_value'\n    )\n    assert result['method'] == StorageMethod.SET_SHARED_STORAGE_ENTRY\n    assert result['params']['ownerOrigin'] == 'https://storage.com'\n    assert result['params']['key'] == 'test_key'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_shared_storage_entry_with_ignore",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_shared_storage_entry_with_ignore():\n    \"\"\"Test set_shared_storage_entry with ignore_if_present parameter.\"\"\"\n    result = StorageCommands.set_shared_storage_entry(\n        owner_origin='https://storage.com',\n        key='test_key',\n        value='test_value',\n        ignore_if_present=True\n    )\n    assert result['method'] == StorageMethod.SET_SHARED_STORAGE_ENTRY\n    assert result['params']['ownerOrigin'] == 'https://storage.com'",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_shared_storage_tracking",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_shared_storage_tracking():\n    \"\"\"Test set_shared_storage_tracking method.\"\"\"\n    result = StorageCommands.set_shared_storage_tracking(enable=True)\n    assert result['method'] == StorageMethod.SET_SHARED_STORAGE_TRACKING\n    assert result['params']['enable'] is True\ndef test_set_storage_bucket_tracking():\n    \"\"\"Test set_storage_bucket_tracking method.\"\"\"\n    result = StorageCommands.set_storage_bucket_tracking(\n        storage_key='bucket_key_123',\n        enable=False",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_storage_bucket_tracking",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_storage_bucket_tracking():\n    \"\"\"Test set_storage_bucket_tracking method.\"\"\"\n    result = StorageCommands.set_storage_bucket_tracking(\n        storage_key='bucket_key_123',\n        enable=False\n    )\n    assert result['method'] == StorageMethod.SET_STORAGE_BUCKET_TRACKING\n    assert result['params']['storageKey'] == 'bucket_key_123'\n    assert result['params']['enable'] is False\ndef test_clear_data_for_origin_all_types():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_clear_data_for_origin_all_types",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_clear_data_for_origin_all_types():\n    \"\"\"Test clear_data_for_origin with all storage types.\"\"\"\n    result = StorageCommands.clear_data_for_origin(\n        origin='https://example.com',\n        storage_types='all'\n    )\n    assert result['method'] == StorageMethod.CLEAR_DATA_FOR_ORIGIN\n    assert result['params']['origin'] == 'https://example.com'\n    assert result['params']['storageTypes'] == 'all'\ndef test_set_cookies_complex():",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_set_cookies_complex",
        "kind": 2,
        "importPath": "tests.test_commands.test_storage_commands",
        "description": "tests.test_commands.test_storage_commands",
        "peekOfCode": "def test_set_cookies_complex():\n    \"\"\"Test set_cookies with complex cookie parameters.\"\"\"\n    cookies = [\n        {\n            'name': 'session_id',\n            'value': 'abc123',\n            'domain': 'example.com',\n            'path': '/',\n            'secure': True,\n            'httpOnly': True,",
        "detail": "tests.test_commands.test_storage_commands",
        "documentation": {}
    },
    {
        "label": "test_activate_target",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_activate_target():\n    \"\"\"Test activate_target method.\"\"\"\n    result = TargetCommands.activate_target(target_id='target123')\n    assert result['method'] == TargetMethod.ACTIVATE_TARGET\n    assert result['params']['targetId'] == 'target123'\ndef test_attach_to_target_minimal():\n    \"\"\"Test attach_to_target with minimal parameters.\"\"\"\n    result = TargetCommands.attach_to_target(target_id='target456')\n    assert result['method'] == TargetMethod.ATTACH_TO_TARGET\n    assert result['params']['targetId'] == 'target456'",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_attach_to_target_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_attach_to_target_minimal():\n    \"\"\"Test attach_to_target with minimal parameters.\"\"\"\n    result = TargetCommands.attach_to_target(target_id='target456')\n    assert result['method'] == TargetMethod.ATTACH_TO_TARGET\n    assert result['params']['targetId'] == 'target456'\ndef test_attach_to_target_with_flatten():\n    \"\"\"Test attach_to_target with flatten parameter.\"\"\"\n    result = TargetCommands.attach_to_target(target_id='target456', flatten=True)\n    assert result['method'] == TargetMethod.ATTACH_TO_TARGET\n    assert result['params']['targetId'] == 'target456'",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_attach_to_target_with_flatten",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_attach_to_target_with_flatten():\n    \"\"\"Test attach_to_target with flatten parameter.\"\"\"\n    result = TargetCommands.attach_to_target(target_id='target456', flatten=True)\n    assert result['method'] == TargetMethod.ATTACH_TO_TARGET\n    assert result['params']['targetId'] == 'target456'\n    assert result['params']['flatten'] is True\ndef test_close_target():\n    \"\"\"Test close_target method.\"\"\"\n    result = TargetCommands.close_target(target_id='target789')\n    assert result['method'] == TargetMethod.CLOSE_TARGET",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_close_target",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_close_target():\n    \"\"\"Test close_target method.\"\"\"\n    result = TargetCommands.close_target(target_id='target789')\n    assert result['method'] == TargetMethod.CLOSE_TARGET\n    assert result['params']['targetId'] == 'target789'\ndef test_create_browser_context_minimal():\n    \"\"\"Test create_browser_context with minimal parameters.\"\"\"\n    result = TargetCommands.create_browser_context()\n    assert result['method'] == TargetMethod.CREATE_BROWSER_CONTEXT\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_browser_context_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_browser_context_minimal():\n    \"\"\"Test create_browser_context with minimal parameters.\"\"\"\n    result = TargetCommands.create_browser_context()\n    assert result['method'] == TargetMethod.CREATE_BROWSER_CONTEXT\n    assert result['params'] == {}\ndef test_create_browser_context_with_all_params():\n    \"\"\"Test create_browser_context with all parameters.\"\"\"\n    origins = ['https://example.com', 'https://test.com']\n    result = TargetCommands.create_browser_context(\n        dispose_on_detach=True,",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_browser_context_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_browser_context_with_all_params():\n    \"\"\"Test create_browser_context with all parameters.\"\"\"\n    origins = ['https://example.com', 'https://test.com']\n    result = TargetCommands.create_browser_context(\n        dispose_on_detach=True,\n        proxy_server='socks5://192.168.1.100:1080',\n        proxy_bypass_list='*.example.com,localhost',\n        origins_with_universal_network_access=origins\n    )\n    assert result['method'] == TargetMethod.CREATE_BROWSER_CONTEXT",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_minimal():\n    \"\"\"Test create_target with minimal parameters.\"\"\"\n    result = TargetCommands.create_target(url='https://example.com')\n    assert result['method'] == TargetMethod.CREATE_TARGET\n    assert result['params']['url'] == 'https://example.com'\ndef test_create_target_with_position_and_size():\n    \"\"\"Test create_target with position and size parameters.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://test.com',\n        left=100,",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_with_position_and_size",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_with_position_and_size():\n    \"\"\"Test create_target with position and size parameters.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://test.com',\n        left=100,\n        top=200,\n        width=800,\n        height=600\n    )\n    assert result['method'] == TargetMethod.CREATE_TARGET",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_with_window_state",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_with_window_state():\n    \"\"\"Test create_target with window state.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://example.com',\n        window_state=WindowState.MAXIMIZED\n    )\n    assert result['method'] == TargetMethod.CREATE_TARGET\n    assert result['params']['url'] == 'https://example.com'\n    assert result['params']['windowState'] == WindowState.MAXIMIZED\ndef test_create_target_with_all_params():",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_with_all_params():\n    \"\"\"Test create_target with all parameters.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://full-test.com',\n        left=50,\n        top=100,\n        width=1200,\n        height=800,\n        window_state=WindowState.NORMAL,\n        browser_context_id='context123',",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_detach_from_target_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_detach_from_target_minimal():\n    \"\"\"Test detach_from_target with minimal parameters.\"\"\"\n    result = TargetCommands.detach_from_target()\n    assert result['method'] == TargetMethod.DETACH_FROM_TARGET\n    assert result['params'] == {}\ndef test_detach_from_target_with_session():\n    \"\"\"Test detach_from_target with session ID.\"\"\"\n    result = TargetCommands.detach_from_target(session_id='session123')\n    assert result['method'] == TargetMethod.DETACH_FROM_TARGET\n    assert result['params']['sessionId'] == 'session123'",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_detach_from_target_with_session",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_detach_from_target_with_session():\n    \"\"\"Test detach_from_target with session ID.\"\"\"\n    result = TargetCommands.detach_from_target(session_id='session123')\n    assert result['method'] == TargetMethod.DETACH_FROM_TARGET\n    assert result['params']['sessionId'] == 'session123'\ndef test_dispose_browser_context():\n    \"\"\"Test dispose_browser_context method.\"\"\"\n    result = TargetCommands.dispose_browser_context(browser_context_id='context456')\n    assert result['method'] == TargetMethod.DISPOSE_BROWSER_CONTEXT\n    assert result['params']['browserContextId'] == 'context456'",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_dispose_browser_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_dispose_browser_context():\n    \"\"\"Test dispose_browser_context method.\"\"\"\n    result = TargetCommands.dispose_browser_context(browser_context_id='context456')\n    assert result['method'] == TargetMethod.DISPOSE_BROWSER_CONTEXT\n    assert result['params']['browserContextId'] == 'context456'\ndef test_get_browser_contexts():\n    \"\"\"Test get_browser_contexts method.\"\"\"\n    result = TargetCommands.get_browser_contexts()\n    assert result['method'] == TargetMethod.GET_BROWSER_CONTEXTS\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_get_browser_contexts",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_get_browser_contexts():\n    \"\"\"Test get_browser_contexts method.\"\"\"\n    result = TargetCommands.get_browser_contexts()\n    assert result['method'] == TargetMethod.GET_BROWSER_CONTEXTS\n    assert result['params'] == {}\ndef test_get_targets_minimal():\n    \"\"\"Test get_targets with minimal parameters.\"\"\"\n    result = TargetCommands.get_targets()\n    assert result['method'] == TargetMethod.GET_TARGETS\n    assert result['params'] == {}",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_get_targets_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_get_targets_minimal():\n    \"\"\"Test get_targets with minimal parameters.\"\"\"\n    result = TargetCommands.get_targets()\n    assert result['method'] == TargetMethod.GET_TARGETS\n    assert result['params'] == {}\ndef test_get_targets_with_filter():\n    \"\"\"Test get_targets with filter parameter.\"\"\"\n    filter_list = [{'type': 'page'}, {'type': 'worker'}]\n    result = TargetCommands.get_targets(filter=filter_list)\n    assert result['method'] == TargetMethod.GET_TARGETS",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_get_targets_with_filter",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_get_targets_with_filter():\n    \"\"\"Test get_targets with filter parameter.\"\"\"\n    filter_list = [{'type': 'page'}, {'type': 'worker'}]\n    result = TargetCommands.get_targets(filter=filter_list)\n    assert result['method'] == TargetMethod.GET_TARGETS\n    assert result['params']['filter'] == filter_list\ndef test_set_auto_attach_minimal():\n    \"\"\"Test set_auto_attach with minimal parameters.\"\"\"\n    result = TargetCommands.set_auto_attach(auto_attach=True)\n    assert result['method'] == TargetMethod.SET_AUTO_ATTACH",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_set_auto_attach_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_set_auto_attach_minimal():\n    \"\"\"Test set_auto_attach with minimal parameters.\"\"\"\n    result = TargetCommands.set_auto_attach(auto_attach=True)\n    assert result['method'] == TargetMethod.SET_AUTO_ATTACH\n    assert result['params']['autoAttach'] is True\ndef test_set_auto_attach_with_all_params():\n    \"\"\"Test set_auto_attach with all parameters.\"\"\"\n    filter_list = [{'type': 'page'}]\n    result = TargetCommands.set_auto_attach(\n        auto_attach=False,",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_set_auto_attach_with_all_params",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_set_auto_attach_with_all_params():\n    \"\"\"Test set_auto_attach with all parameters.\"\"\"\n    filter_list = [{'type': 'page'}]\n    result = TargetCommands.set_auto_attach(\n        auto_attach=False,\n        wait_for_debugger_on_start=True,\n        flatten=False,\n        filter=filter_list\n    )\n    assert result['method'] == TargetMethod.SET_AUTO_ATTACH",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_set_discover_targets_minimal",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_set_discover_targets_minimal():\n    \"\"\"Test set_discover_targets with minimal parameters.\"\"\"\n    result = TargetCommands.set_discover_targets(discover=True)\n    assert result['method'] == TargetMethod.SET_DISCOVER_TARGETS\n    assert result['params']['discover'] is True\ndef test_set_discover_targets_with_filter():\n    \"\"\"Test set_discover_targets with filter parameter.\"\"\"\n    filter_list = [{'type': 'service_worker'}]\n    result = TargetCommands.set_discover_targets(discover=False, filter=filter_list)\n    assert result['method'] == TargetMethod.SET_DISCOVER_TARGETS",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_set_discover_targets_with_filter",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_set_discover_targets_with_filter():\n    \"\"\"Test set_discover_targets with filter parameter.\"\"\"\n    filter_list = [{'type': 'service_worker'}]\n    result = TargetCommands.set_discover_targets(discover=False, filter=filter_list)\n    assert result['method'] == TargetMethod.SET_DISCOVER_TARGETS\n    assert result['params']['discover'] is False\n    assert result['params']['filter'] == filter_list\ndef test_attach_to_browser_target():\n    \"\"\"Test attach_to_browser_target method.\"\"\"\n    result = TargetCommands.attach_to_browser_target(session_id='browser_session123')",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_attach_to_browser_target",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_attach_to_browser_target():\n    \"\"\"Test attach_to_browser_target method.\"\"\"\n    result = TargetCommands.attach_to_browser_target(session_id='browser_session123')\n    assert result['method'] == TargetMethod.ATTACH_TO_BROWSER_TARGET\n    assert result['params']['sessionId'] == 'browser_session123'\ndef test_get_target_info():\n    \"\"\"Test get_target_info method.\"\"\"\n    result = TargetCommands.get_target_info(target_id='info_target123')\n    assert result['method'] == TargetMethod.GET_TARGET_INFO\n    assert result['params']['targetId'] == 'info_target123'",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_get_target_info",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_get_target_info():\n    \"\"\"Test get_target_info method.\"\"\"\n    result = TargetCommands.get_target_info(target_id='info_target123')\n    assert result['method'] == TargetMethod.GET_TARGET_INFO\n    assert result['params']['targetId'] == 'info_target123'\ndef test_set_remote_locations():\n    \"\"\"Test set_remote_locations method.\"\"\"\n    locations = [\n        {\n            'host': 'remote1.example.com',",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_set_remote_locations",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_set_remote_locations():\n    \"\"\"Test set_remote_locations method.\"\"\"\n    locations = [\n        {\n            'host': 'remote1.example.com',\n            'port': 9222\n        },\n        {\n            'host': 'remote2.example.com',\n            'port': 9223",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_about_blank",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_about_blank():\n    \"\"\"Test create_target with about:blank URL.\"\"\"\n    result = TargetCommands.create_target(url='')\n    assert result['method'] == TargetMethod.CREATE_TARGET\n    assert result['params']['url'] == ''\ndef test_create_target_new_window():\n    \"\"\"Test create_target with new window option.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://newwindow.com',\n        new_window=True,",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_new_window",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_new_window():\n    \"\"\"Test create_target with new window option.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://newwindow.com',\n        new_window=True,\n        width=1024,\n        height=768\n    )\n    assert result['method'] == TargetMethod.CREATE_TARGET\n    assert result['params']['url'] == 'https://newwindow.com'",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_background",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_background():\n    \"\"\"Test create_target with background option.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://background.com',\n        background=True\n    )\n    assert result['method'] == TargetMethod.CREATE_TARGET\n    assert result['params']['url'] == 'https://background.com'\n    assert result['params']['background'] is True\ndef test_create_target_for_tab():",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_for_tab",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_for_tab():\n    \"\"\"Test create_target with for_tab option.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://tab.com',\n        for_tab=True\n    )\n    assert result['method'] == TargetMethod.CREATE_TARGET\n    assert result['params']['url'] == 'https://tab.com'\n    assert result['params']['forTab'] is True\ndef test_create_target_hidden():",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_hidden",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_hidden():\n    \"\"\"Test create_target with hidden option.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://hidden.com',\n        hidden=True\n    )\n    assert result['method'] == TargetMethod.CREATE_TARGET\n    assert result['params']['url'] == 'https://hidden.com'\n    assert result['params']['hidden'] is True\ndef test_create_browser_context_with_proxy():",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_browser_context_with_proxy",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_browser_context_with_proxy():\n    \"\"\"Test create_browser_context with proxy configuration.\"\"\"\n    result = TargetCommands.create_browser_context(\n        proxy_server='http://proxy.example.com:8080',\n        proxy_bypass_list='localhost,127.0.0.1'\n    )\n    assert result['method'] == TargetMethod.CREATE_BROWSER_CONTEXT\n    assert result['params']['proxyServer'] == 'http://proxy.example.com:8080'\n    assert result['params']['proxyBypassList'] == 'localhost,127.0.0.1'\ndef test_create_target_with_context():",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_create_target_with_context",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_create_target_with_context():\n    \"\"\"Test create_target with browser context.\"\"\"\n    result = TargetCommands.create_target(\n        url='https://context-test.com',\n        browser_context_id='isolated_context'\n    )\n    assert result['method'] == TargetMethod.CREATE_TARGET\n    assert result['params']['url'] == 'https://context-test.com'\n    assert result['params']['browserContextId'] == 'isolated_context'\ndef test_set_auto_attach_disabled():",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "test_set_auto_attach_disabled",
        "kind": 2,
        "importPath": "tests.test_commands.test_target_commands",
        "description": "tests.test_commands.test_target_commands",
        "peekOfCode": "def test_set_auto_attach_disabled():\n    \"\"\"Test set_auto_attach with auto attach disabled.\"\"\"\n    result = TargetCommands.set_auto_attach(\n        auto_attach=False,\n        wait_for_debugger_on_start=False\n    )\n    assert result['method'] == TargetMethod.SET_AUTO_ATTACH\n    assert result['params']['autoAttach'] is False\n    assert result['params']['waitForDebuggerOnStart'] is False",
        "detail": "tests.test_commands.test_target_commands",
        "documentation": {}
    },
    {
        "label": "proxy_options",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def proxy_options():\n    return Options()\n@pytest.fixture\ndef temp_manager():\n    mock_dir = MagicMock()\n    mock_dir.name = '/fake/temp/dir'\n    return TempDirectoryManager(temp_dir_factory=lambda: mock_dir)\n@pytest.fixture\ndef process_manager():\n    mock_creator = Mock(return_value=MagicMock())",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "temp_manager",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def temp_manager():\n    mock_dir = MagicMock()\n    mock_dir.name = '/fake/temp/dir'\n    return TempDirectoryManager(temp_dir_factory=lambda: mock_dir)\n@pytest.fixture\ndef process_manager():\n    mock_creator = Mock(return_value=MagicMock())\n    return BrowserProcessManager(process_creator=mock_creator)\n@pytest.fixture\ndef chromium_options_manager(proxy_options):",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "process_manager",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def process_manager():\n    mock_creator = Mock(return_value=MagicMock())\n    return BrowserProcessManager(process_creator=mock_creator)\n@pytest.fixture\ndef chromium_options_manager(proxy_options):\n    options_manager = ChromiumOptionsManager(proxy_options)\n    return options_manager\ndef test_proxy_manager_no_proxy(proxy_options):\n    manager = ProxyManager(proxy_options)\n    result = manager.get_proxy_credentials()",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "chromium_options_manager",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def chromium_options_manager(proxy_options):\n    options_manager = ChromiumOptionsManager(proxy_options)\n    return options_manager\ndef test_proxy_manager_no_proxy(proxy_options):\n    manager = ProxyManager(proxy_options)\n    result = manager.get_proxy_credentials()\n    assert result[0] is False\n    assert result[1] == (None, None)\ndef test_proxy_manager_with_credentials(proxy_options):\n    proxy_options.add_argument('--proxy-server=user:pass@example.com')",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_proxy_manager_no_proxy",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_proxy_manager_no_proxy(proxy_options):\n    manager = ProxyManager(proxy_options)\n    result = manager.get_proxy_credentials()\n    assert result[0] is False\n    assert result[1] == (None, None)\ndef test_proxy_manager_with_credentials(proxy_options):\n    proxy_options.add_argument('--proxy-server=user:pass@example.com')\n    manager = ProxyManager(proxy_options)\n    result = manager.get_proxy_credentials()\n    assert result[0] is True",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_proxy_manager_with_credentials",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_proxy_manager_with_credentials(proxy_options):\n    proxy_options.add_argument('--proxy-server=user:pass@example.com')\n    manager = ProxyManager(proxy_options)\n    result = manager.get_proxy_credentials()\n    assert result[0] is True\n    assert result[1] == ('user', 'pass')\n    assert proxy_options.arguments == ['--proxy-server=example.com']\ndef test_proxy_manager_invalid_credentials_format(proxy_options):\n    proxy_options.add_argument('--proxy-server=invalidformat@example.com')\n    manager = ProxyManager(proxy_options)",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_proxy_manager_invalid_credentials_format",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_proxy_manager_invalid_credentials_format(proxy_options):\n    proxy_options.add_argument('--proxy-server=invalidformat@example.com')\n    manager = ProxyManager(proxy_options)\n    result = manager.get_proxy_credentials()\n    assert result[0] is False\n    assert result[1] == (None, None)\n    assert proxy_options.arguments == [\n        '--proxy-server=invalidformat@example.com'\n    ]\ndef test_proxy_manager_invalid_proxy_format(proxy_options):",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_proxy_manager_invalid_proxy_format",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_proxy_manager_invalid_proxy_format(proxy_options):\n    proxy_options.add_argument('--proxy-server=invalidformat')\n    manager = ProxyManager(proxy_options)\n    result = manager.get_proxy_credentials()\n    assert result[0] is False\n    assert result[1] == (None, None)\ndef test_start_browser_process(process_manager):\n    binary = '/fake/path/browser'\n    port = 9222\n    args = ['--test-arg']",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_start_browser_process",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_start_browser_process(process_manager):\n    binary = '/fake/path/browser'\n    port = 9222\n    args = ['--test-arg']\n    process_manager.start_browser_process(binary, port, args)\n    expected_command = [binary, f'--remote-debugging-port={port}', *args]\n    process_manager._process_creator.assert_called_once_with(expected_command)\n    assert process_manager._process is not None\ndef test_stop_process(process_manager):\n    mock_process = MagicMock()",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_stop_process",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_stop_process(process_manager):\n    mock_process = MagicMock()\n    process_manager._process = mock_process\n    process_manager.stop_process()\n    mock_process.terminate.assert_called_once()\ndef test_create_temp_dir(temp_manager):\n    temp_dir = temp_manager.create_temp_dir()\n    assert len(temp_manager._temp_dirs) == 1\n    assert temp_dir.name == '/fake/temp/dir'\ndef test_cleanup_temp_dirs(temp_manager):",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_create_temp_dir",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_create_temp_dir(temp_manager):\n    temp_dir = temp_manager.create_temp_dir()\n    assert len(temp_manager._temp_dirs) == 1\n    assert temp_dir.name == '/fake/temp/dir'\ndef test_cleanup_temp_dirs(temp_manager):\n    mock_dir1 = MagicMock()\n    mock_dir2 = MagicMock()\n    temp_manager._temp_dirs = [mock_dir1, mock_dir2]\n    with patch('shutil.rmtree') as mock_rmtree:\n        temp_manager.cleanup()",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_cleanup_temp_dirs",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_cleanup_temp_dirs(temp_manager):\n    mock_dir1 = MagicMock()\n    mock_dir2 = MagicMock()\n    temp_manager._temp_dirs = [mock_dir1, mock_dir2]\n    with patch('shutil.rmtree') as mock_rmtree:\n        temp_manager.cleanup()\n        assert mock_rmtree.call_count == 2\n        mock_rmtree.assert_any_call(mock_dir1.name, onerror=ANY)\n        mock_rmtree.assert_any_call(mock_dir2.name, onerror=ANY)\ndef test_retry_process_file(temp_manager):",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_retry_process_file",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_retry_process_file(temp_manager):\n    mock_func = Mock()\n    # retry success\n    success_at = 5\n    mock_func.side_effect = [PermissionError] * (success_at - 1) + [None]\n    temp_manager.retry_process_file(mock_func, \"/test/path\", retry_times=success_at)\n    assert mock_func.call_count == success_at\n    # exceed max retries\n    mock_func.reset_mock()\n    mock_func.side_effect = PermissionError",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_handle_cleanup_error",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_handle_cleanup_error(temp_manager):\n    func_mock = Mock()\n    # matched permission error\n    temp_manager.retry_process_file = Mock()\n    path = \"/tmp/CrashpadMetrics-active.pma\"\n    temp_manager.handle_cleanup_error(func_mock, path, (PermissionError, PermissionError(), None))\n    temp_manager.retry_process_file.assert_called_once_with(func_mock, path)\n    # matched permission error\n    temp_manager.retry_process_file = Mock()\n    temp_manager.retry_process_file.side_effect = PermissionError",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_initialize_options_with_none",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_initialize_options_with_none(chromium_options_manager):\n    result = chromium_options_manager.initialize_options()\n    assert isinstance(result, Options)\n    assert result.arguments == ['--no-first-run', '--no-default-browser-check']\ndef test_initialize_options_with_valid_options():\n    options = Options()\n    options.add_argument('--test')\n    chromium_options_manager = ChromiumOptionsManager(options)\n    result = chromium_options_manager.initialize_options()\n    assert result is options",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_initialize_options_with_valid_options",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_initialize_options_with_valid_options():\n    options = Options()\n    options.add_argument('--test')\n    chromium_options_manager = ChromiumOptionsManager(options)\n    result = chromium_options_manager.initialize_options()\n    assert result is options\n    assert '--test' in result.arguments\ndef test_initialize_options_with_invalid_type():\n    chromium_options_manager = ChromiumOptionsManager('invalid options object')\n    with pytest.raises(InvalidOptionsObject):",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_initialize_options_with_invalid_type",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_initialize_options_with_invalid_type():\n    chromium_options_manager = ChromiumOptionsManager('invalid options object')\n    with pytest.raises(InvalidOptionsObject):\n        chromium_options_manager.initialize_options()\ndef test_add_default_arguments():\n    options = Options()\n    chromium_options_manager = ChromiumOptionsManager(options)\n    chromium_options_manager.add_default_arguments()\n    assert '--no-first-run' in options.arguments\n    assert '--no-default-browser-check' in options.arguments",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_add_default_arguments",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_add_default_arguments():\n    options = Options()\n    chromium_options_manager = ChromiumOptionsManager(options)\n    chromium_options_manager.add_default_arguments()\n    assert '--no-first-run' in options.arguments\n    assert '--no-default-browser-check' in options.arguments\ndef test_initialize_options_creates_new_instance():\n    manager = ChromiumOptionsManager(None)\n    result = manager.initialize_options()\n    assert isinstance(result, Options)",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_initialize_options_creates_new_instance",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_initialize_options_creates_new_instance():\n    manager = ChromiumOptionsManager(None)\n    result = manager.initialize_options()\n    assert isinstance(result, Options)\n    assert '--no-first-run' in result.arguments\n    assert '--no-default-browser-check' in result.arguments\ndef test_initialize_options_preserves_custom_arguments():\n    options = Options()\n    options.add_argument('--custom-flag')\n    manager = ChromiumOptionsManager(options)",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "test_initialize_options_preserves_custom_arguments",
        "kind": 2,
        "importPath": "tests.test_managers.test_browser_managers",
        "description": "tests.test_managers.test_browser_managers",
        "peekOfCode": "def test_initialize_options_preserves_custom_arguments():\n    options = Options()\n    options.add_argument('--custom-flag')\n    manager = ChromiumOptionsManager(options)\n    result = manager.initialize_options()\n    assert '--custom-flag' in result.arguments\n    assert '--no-first-run' in result.arguments\n    assert '--no-default-browser-check' in result.arguments",
        "detail": "tests.test_managers.test_browser_managers",
        "documentation": {}
    },
    {
        "label": "commands_manager",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def commands_manager():\n    \"\"\"Retorna uma instância fresca de CommandManager para os testes.\"\"\"\n    return CommandsManager()\n@pytest.fixture\ndef events_manager():\n    \"\"\"Retorna uma instância fresca de EventsManager para os testes.\"\"\"\n    return EventsManager()\ndef test_create_command_future(commands_manager):\n    test_command = {'method': 'TestMethod'}\n    future_result = commands_manager.create_command_future(test_command)",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "events_manager",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def events_manager():\n    \"\"\"Retorna uma instância fresca de EventsManager para os testes.\"\"\"\n    return EventsManager()\ndef test_create_command_future(commands_manager):\n    test_command = {'method': 'TestMethod'}\n    future_result = commands_manager.create_command_future(test_command)\n    # Verifica se o ID foi atribuído corretamente\n    assert test_command['id'] == 1, 'The first command ID should be 1'\n    # Verifica se o future foi armazenado no dicionário de pendentes\n    assert 1 in commands_manager._pending_commands",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test_create_command_future",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def test_create_command_future(commands_manager):\n    test_command = {'method': 'TestMethod'}\n    future_result = commands_manager.create_command_future(test_command)\n    # Verifica se o ID foi atribuído corretamente\n    assert test_command['id'] == 1, 'The first command ID should be 1'\n    # Verifica se o future foi armazenado no dicionário de pendentes\n    assert 1 in commands_manager._pending_commands\n    assert commands_manager._pending_commands[1] is future_result\n    # Cria um segundo comando e verifica o incremento do ID\n    second_command = {'method': 'SecondMethod'}",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test_resolve_command",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def test_resolve_command(commands_manager):\n    test_command = {'method': 'TestMethod'}\n    future_result = commands_manager.create_command_future(test_command)\n    result_payload = '{\"result\": \"success\"}'\n    # O future não deve estar concluído antes da resolução\n    assert not future_result.done(), (\n        'The future should not be completed before resolution'\n    )\n    # Resolve o comando e verifica o resultado\n    commands_manager.resolve_command(1, result_payload)",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test_resolve_unknown_command",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def test_resolve_unknown_command(commands_manager):\n    test_command = {'method': 'TestMethod'}\n    future_result = commands_manager.create_command_future(test_command)\n    # Tenta resolver um ID inexistente; o future original deve permanecer pendente\n    commands_manager.resolve_command(999, '{\"result\": \"ignored\"}')\n    assert not future_result.done(), (\n        'The future should not be completed after resolving an unknown command'\n    )\ndef test_remove_pending_command(commands_manager):\n    test_command = {'method': 'TestMethod'}",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test_remove_pending_command",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def test_remove_pending_command(commands_manager):\n    test_command = {'method': 'TestMethod'}\n    _ = commands_manager.create_command_future(test_command)\n    # Remove o comando pendente e verifica se ele foi removido\n    commands_manager.remove_pending_command(1)\n    assert 1 not in commands_manager._pending_commands, (\n        'The pending command should be removed'\n    )\n    commands_manager.remove_pending_command(1)\ndef test_register_callback_success(events_manager):",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test_register_callback_success",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def test_register_callback_success(events_manager):\n    dummy_callback = lambda event: event\n    callback_id = events_manager.register_callback('TestEvent', dummy_callback)\n    assert callback_id == 1, 'The first callback ID should be 1'\n    assert callback_id in events_manager._event_callbacks, (\n        'The callback must be registered'\n    )\n    callback_info = events_manager._event_callbacks[callback_id]\n    assert callback_info['temporary'] is False, (\n        'The temporary flag should be False by default'",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test_remove_existing_callback",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def test_remove_existing_callback(events_manager):\n    dummy_callback = lambda event: event\n    callback_id = events_manager.register_callback('TestEvent', dummy_callback)\n    removal_result = events_manager.remove_callback(callback_id)\n    assert removal_result is True, (\n        'The removal of a existing callback should be successful'\n    )\n    assert callback_id not in events_manager._event_callbacks, (\n        'The callback should be removed'\n    )",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test_remove_nonexistent_callback",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def test_remove_nonexistent_callback(events_manager):\n    removal_result = events_manager.remove_callback(999)\n    assert removal_result is False, (\n        'The removal of a nonexistent callback should return False'\n    )\ndef test_clear_callbacks(events_manager):\n    dummy_callback = lambda event: event\n    events_manager.register_callback('EventA', dummy_callback)\n    events_manager.register_callback('EventB', dummy_callback)\n    events_manager.clear_callbacks()",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test_clear_callbacks",
        "kind": 2,
        "importPath": "tests.test_managers.test_connection_managers",
        "description": "tests.test_managers.test_connection_managers",
        "peekOfCode": "def test_clear_callbacks(events_manager):\n    dummy_callback = lambda event: event\n    events_manager.register_callback('EventA', dummy_callback)\n    events_manager.register_callback('EventB', dummy_callback)\n    events_manager.clear_callbacks()\n    assert len(events_manager._event_callbacks) == 0, (\n        'All callbacks should be cleared'\n    )\n@pytest.mark.asyncio\nasync def test_process_event_updates_network_logs(events_manager):",
        "detail": "tests.test_managers.test_connection_managers",
        "documentation": {}
    },
    {
        "label": "test__repr__",
        "kind": 2,
        "importPath": "tests.test_connection_handler",
        "description": "tests.test_connection_handler",
        "peekOfCode": "def test__repr__(connection_handler):\n    result = connection_handler.__repr__()\n    assert result == 'ConnectionHandler(port=9222)'\ndef test__str__(connection_handler):\n    result = connection_handler.__str__()\n    assert result == 'ConnectionHandler(port=9222)'",
        "detail": "tests.test_connection_handler",
        "documentation": {}
    },
    {
        "label": "test__str__",
        "kind": 2,
        "importPath": "tests.test_connection_handler",
        "description": "tests.test_connection_handler",
        "peekOfCode": "def test__str__(connection_handler):\n    result = connection_handler.__str__()\n    assert result == 'ConnectionHandler(port=9222)'",
        "detail": "tests.test_connection_handler",
        "documentation": {}
    },
    {
        "label": "test_browser_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_browser_events():\n    \"\"\"Test all BrowserEvent enum values.\"\"\"\n    assert BrowserEvent.DOWNLOAD_PROGRESS == 'Browser.downloadProgress'\n    assert BrowserEvent.DOWNLOAD_WILL_BEGIN == 'Browser.downloadWillBegin'\ndef test_dom_events():\n    \"\"\"Test all DomEvent enum values.\"\"\"\n    assert DomEvent.ATTRIBUTE_MODIFIED == 'DOM.attributeModified'\n    assert DomEvent.ATTRIBUTE_REMOVED == 'DOM.attributeRemoved'\n    assert DomEvent.CHARACTER_DATA_MODIFIED == 'DOM.characterDataModified'\n    assert DomEvent.CHILD_NODE_COUNT_UPDATED == 'DOM.childNodeCountUpdated'",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_dom_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_dom_events():\n    \"\"\"Test all DomEvent enum values.\"\"\"\n    assert DomEvent.ATTRIBUTE_MODIFIED == 'DOM.attributeModified'\n    assert DomEvent.ATTRIBUTE_REMOVED == 'DOM.attributeRemoved'\n    assert DomEvent.CHARACTER_DATA_MODIFIED == 'DOM.characterDataModified'\n    assert DomEvent.CHILD_NODE_COUNT_UPDATED == 'DOM.childNodeCountUpdated'\n    assert DomEvent.CHILD_NODE_INSERTED == 'DOM.childNodeInserted'\n    assert DomEvent.CHILD_NODE_REMOVED == 'DOM.childNodeRemoved'\n    assert DomEvent.DOCUMENT_UPDATED == 'DOM.documentUpdated'\n    assert DomEvent.SET_CHILD_NODES == 'DOM.setChildNodes'",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_fetch_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_fetch_events():\n    \"\"\"Test all FetchEvent enum values.\"\"\"\n    assert FetchEvent.AUTH_REQUIRED == 'Fetch.authRequired'\n    assert FetchEvent.REQUEST_PAUSED == 'Fetch.requestPaused'\ndef test_input_events():\n    \"\"\"Test all InputEvent enum values.\"\"\"\n    assert InputEvent.DRAG_INTERCEPTED == 'Input.dragIntercepted'\ndef test_network_events():\n    \"\"\"Test all NetworkEvent enum values.\"\"\"\n    assert NetworkEvent.DATA_RECEIVED == 'Network.dataReceived'",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_input_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_input_events():\n    \"\"\"Test all InputEvent enum values.\"\"\"\n    assert InputEvent.DRAG_INTERCEPTED == 'Input.dragIntercepted'\ndef test_network_events():\n    \"\"\"Test all NetworkEvent enum values.\"\"\"\n    assert NetworkEvent.DATA_RECEIVED == 'Network.dataReceived'\n    assert NetworkEvent.EVENT_SOURCE_MESSAGE_RECEIVED == 'Network.eventSourceMessageReceived'\n    assert NetworkEvent.LOADING_FAILED == 'Network.loadingFailed'\n    assert NetworkEvent.LOADING_FINISHED == 'Network.loadingFinished'\n    assert NetworkEvent.REQUEST_SERVED_FROM_CACHE == 'Network.requestServedFromCache'",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_network_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_network_events():\n    \"\"\"Test all NetworkEvent enum values.\"\"\"\n    assert NetworkEvent.DATA_RECEIVED == 'Network.dataReceived'\n    assert NetworkEvent.EVENT_SOURCE_MESSAGE_RECEIVED == 'Network.eventSourceMessageReceived'\n    assert NetworkEvent.LOADING_FAILED == 'Network.loadingFailed'\n    assert NetworkEvent.LOADING_FINISHED == 'Network.loadingFinished'\n    assert NetworkEvent.REQUEST_SERVED_FROM_CACHE == 'Network.requestServedFromCache'\n    assert NetworkEvent.REQUEST_WILL_BE_SENT == 'Network.requestWillBeSent'\n    assert NetworkEvent.RESPONSE_RECEIVED == 'Network.responseReceived'\n    assert NetworkEvent.WEBSOCKET_CLOSED == 'Network.webSocketClosed'",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_page_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_page_events():\n    \"\"\"Test all PageEvent enum values.\"\"\"\n    assert PageEvent.DOM_CONTENT_EVENT_FIRED == 'Page.domContentEventFired'\n    assert PageEvent.FILE_CHOOSER_OPENED == 'Page.fileChooserOpened'\n    assert PageEvent.FRAME_ATTACHED == 'Page.frameAttached'\n    assert PageEvent.FRAME_DETACHED == 'Page.frameDetached'\n    assert PageEvent.FRAME_NAVIGATED == 'Page.frameNavigated'\n    assert PageEvent.INTERSTITIAL_HIDDEN == 'Page.interstitialHidden'\n    assert PageEvent.INTERSTITIAL_SHOWN == 'Page.interstitialShown'\n    assert PageEvent.JAVASCRIPT_DIALOG_CLOSED == 'Page.javascriptDialogClosed'",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_runtime_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_runtime_events():\n    \"\"\"Test all RuntimeEvent enum values.\"\"\"\n    assert RuntimeEvent.CONSOLE_API_CALLED == 'Runtime.consoleAPICalled'\n    assert RuntimeEvent.EXCEPTION_REVOKED == 'Runtime.exceptionRevoked'\n    assert RuntimeEvent.EXCEPTION_THROWN == 'Runtime.exceptionThrown'\n    assert RuntimeEvent.EXECUTION_CONTEXT_CREATED == 'Runtime.executionContextCreated'\n    assert RuntimeEvent.EXECUTION_CONTEXT_DESTROYED == 'Runtime.executionContextDestroyed'\n    assert RuntimeEvent.EXECUTION_CONTEXTS_CLEARED == 'Runtime.executionContextsCleared'\n    assert RuntimeEvent.INSPECT_REQUESTED == 'Runtime.inspectRequested'\n    assert RuntimeEvent.BINDING_CALLED == 'Runtime.bindingCalled'",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_storage_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_storage_events():\n    \"\"\"Test all StorageEvent enum values.\"\"\"\n    assert StorageEvent.CACHE_STORAGE_CONTENT_UPDATED == 'Storage.cacheStorageContentUpdated'\n    assert StorageEvent.CACHE_STORAGE_LIST_UPDATED == 'Storage.cacheStorageListUpdated'\n    assert StorageEvent.INDEXED_DB_CONTENT_UPDATED == 'Storage.indexedDBContentUpdated'\n    assert StorageEvent.INDEXED_DB_LIST_UPDATED == 'Storage.indexedDBListUpdated'\n    assert StorageEvent.INTEREST_GROUP_ACCESSED == 'Storage.interestGroupAccessed'\n    assert StorageEvent.INTEREST_GROUP_AUCTION_EVENT_OCCURRED == 'Storage.interestGroupAuctionEventOccurred'\n    assert StorageEvent.INTEREST_GROUP_AUCTION_NETWORK_REQUEST_CREATED == 'Storage.interestGroupAuctionNetworkRequestCreated'\n    assert StorageEvent.SHARED_STORAGE_ACCESSED == 'Storage.sharedStorageAccessed'",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_target_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_target_events():\n    \"\"\"Test all TargetEvent enum values.\"\"\"\n    assert TargetEvent.RECEIVED_MESSAGE_FROM_TARGET == 'Target.receivedMessageFromTarget'\n    assert TargetEvent.TARGET_CRASHED == 'Target.targetCrashed'\n    assert TargetEvent.TARGET_CREATED == 'Target.targetCreated'\n    assert TargetEvent.TARGET_DESTROYED == 'Target.targetDestroyed'\n    assert TargetEvent.TARGET_INFO_CHANGED == 'Target.targetInfoChanged'\n    assert TargetEvent.ATTACHED_TO_TARGET == 'Target.attachedToTarget'\n    assert TargetEvent.DETACHED_FROM_TARGET == 'Target.detachedFromTarget'\ndef test_event_enums_integrity():",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_event_enums_integrity",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_event_enums_integrity():\n    \"\"\"Test that all event enums are properly structured and have no duplicates.\"\"\"\n    # Test that all enums inherit from str and Enum\n    event_classes = [\n        BrowserEvent, DomEvent, FetchEvent, InputEvent, NetworkEvent,\n        PageEvent, RuntimeEvent, StorageEvent, TargetEvent\n    ]\n    # Map class names to their correct domain prefixes\n    domain_mapping = {\n        'BrowserEvent': 'Browser',",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_no_duplicate_events",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_no_duplicate_events():\n    \"\"\"Test that there are no duplicate event values across all enums.\"\"\"\n    all_events = []\n    event_classes = [\n        BrowserEvent, DomEvent, FetchEvent, InputEvent, NetworkEvent,\n        PageEvent, RuntimeEvent, StorageEvent, TargetEvent\n    ]\n    for event_class in event_classes:\n        for event in event_class:\n            all_events.append(event.value)",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_event_enum_completeness",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_event_enum_completeness():\n    \"\"\"Test that each event enum has at least one event defined.\"\"\"\n    event_classes = [\n        BrowserEvent, DomEvent, FetchEvent, InputEvent, NetworkEvent,\n        PageEvent, RuntimeEvent, StorageEvent, TargetEvent\n    ]\n    for event_class in event_classes:\n        assert len(list(event_class)) > 0, f\"{event_class.__name__} should have at least one event\"\ndef test_event_naming_convention():\n    \"\"\"Test that all event names follow the correct naming convention.\"\"\"",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "test_event_naming_convention",
        "kind": 2,
        "importPath": "tests.test_events",
        "description": "tests.test_events",
        "peekOfCode": "def test_event_naming_convention():\n    \"\"\"Test that all event names follow the correct naming convention.\"\"\"\n    event_classes = [\n        BrowserEvent, DomEvent, FetchEvent, InputEvent, NetworkEvent,\n        PageEvent, RuntimeEvent, StorageEvent, TargetEvent\n    ]\n    for event_class in event_classes:\n        for event in event_class:\n            # Event names should be UPPER_CASE\n            assert event.name.isupper(), f\"{event_class.__name__}.{event.name} should be uppercase\"",
        "detail": "tests.test_events",
        "documentation": {}
    },
    {
        "label": "TestBaseExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestBaseExceptions:\n    \"\"\"Test base exception classes.\"\"\"\n    def test_pydoll_exception_default_message(self):\n        \"\"\"Test PydollException with default message.\"\"\"\n        with pytest.raises(PydollException) as exc_info:\n            raise PydollException()\n        assert str(exc_info.value) == 'An error occurred in Pydoll'\n    def test_pydoll_exception_custom_message(self):\n        \"\"\"Test PydollException with custom message.\"\"\"\n        custom_message = 'Custom error occurred'",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestConnectionExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestConnectionExceptions:\n    \"\"\"Test connection-related exceptions.\"\"\"\n    def test_connection_failed(self):\n        \"\"\"Test ConnectionFailed exception.\"\"\"\n        with pytest.raises(ConnectionFailed) as exc_info:\n            raise ConnectionFailed()\n        assert str(exc_info.value) == 'Failed to connect to the browser'\n    def test_reconnection_failed(self):\n        \"\"\"Test ReconnectionFailed exception.\"\"\"\n        with pytest.raises(ReconnectionFailed) as exc_info:",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestBrowserExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestBrowserExceptions:\n    \"\"\"Test browser-related exceptions.\"\"\"\n    def test_browser_not_running(self):\n        \"\"\"Test BrowserNotRunning exception.\"\"\"\n        with pytest.raises(BrowserNotRunning) as exc_info:\n            raise BrowserNotRunning()\n        assert str(exc_info.value) == 'The browser is not running'\n    def test_failed_to_start_browser(self):\n        \"\"\"Test FailedToStartBrowser exception.\"\"\"\n        with pytest.raises(FailedToStartBrowser) as exc_info:",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestProtocolExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestProtocolExceptions:\n    \"\"\"Test protocol-related exceptions.\"\"\"\n    def test_invalid_command(self):\n        \"\"\"Test InvalidCommand exception.\"\"\"\n        with pytest.raises(InvalidCommand) as exc_info:\n            raise InvalidCommand()\n        assert str(exc_info.value) == 'The command provided is invalid'\n    def test_invalid_response(self):\n        \"\"\"Test InvalidResponse exception.\"\"\"\n        with pytest.raises(InvalidResponse) as exc_info:",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestElementExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestElementExceptions:\n    \"\"\"Test element-related exceptions.\"\"\"\n    def test_element_not_found(self):\n        \"\"\"Test ElementNotFound exception.\"\"\"\n        with pytest.raises(ElementNotFound) as exc_info:\n            raise ElementNotFound()\n        assert str(exc_info.value) == 'The specified element was not found'\n    def test_element_not_found_custom(self):\n        \"\"\"Test ElementNotFound with custom message.\"\"\"\n        custom_message = 'Button with ID \"submit\" not found'",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestTimeoutExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestTimeoutExceptions:\n    \"\"\"Test timeout-related exceptions.\"\"\"\n    def test_page_load_timeout(self):\n        \"\"\"Test PageLoadTimeout exception.\"\"\"\n        with pytest.raises(PageLoadTimeout) as exc_info:\n            raise PageLoadTimeout()\n        assert str(exc_info.value) == 'Page load timed out'\n    def test_page_load_timeout_custom(self):\n        \"\"\"Test PageLoadTimeout with custom message.\"\"\"\n        custom_message = 'Page load timed out after 30 seconds'",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestConfigurationExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestConfigurationExceptions:\n    \"\"\"Test configuration-related exceptions.\"\"\"\n    def test_invalid_options_object(self):\n        \"\"\"Test InvalidOptionsObject exception.\"\"\"\n        with pytest.raises(InvalidOptionsObject) as exc_info:\n            raise InvalidOptionsObject()\n        assert str(exc_info.value) == 'The options object provided is invalid'\n    def test_invalid_options_object_custom(self):\n        \"\"\"Test InvalidOptionsObject with custom message.\"\"\"\n        custom_message = 'Options must be a dictionary'",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestDialogExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestDialogExceptions:\n    \"\"\"Test dialog-related exceptions.\"\"\"\n    def test_no_dialog_present(self):\n        \"\"\"Test NoDialogPresent exception.\"\"\"\n        with pytest.raises(NoDialogPresent) as exc_info:\n            raise NoDialogPresent()\n        assert str(exc_info.value) == 'No dialog present on the page'\n    def test_no_dialog_present_custom(self):\n        \"\"\"Test NoDialogPresent with custom message.\"\"\"\n        custom_message = 'Expected alert dialog but none found'",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestIFrameExceptions",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestIFrameExceptions:\n    \"\"\"Test iframe-related exceptions.\"\"\"\n    def test_not_an_iframe(self):\n        \"\"\"Test NotAnIFrame exception.\"\"\"\n        with pytest.raises(NotAnIFrame) as exc_info:\n            raise NotAnIFrame()\n        assert str(exc_info.value) == 'The element is not an iframe'\n    def test_not_an_iframe_custom(self):\n        \"\"\"Test NotAnIFrame with custom message.\"\"\"\n        custom_message = 'Expected iframe element, got div'",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "TestExceptionInheritance",
        "kind": 6,
        "importPath": "tests.test_exceptions",
        "description": "tests.test_exceptions",
        "peekOfCode": "class TestExceptionInheritance:\n    \"\"\"Test exception inheritance hierarchy.\"\"\"\n    def test_all_exceptions_inherit_from_pydoll_exception(self):\n        \"\"\"Test that all custom exceptions inherit from PydollException.\"\"\"\n        exceptions_to_test = [\n            ConnectionFailed, ReconnectionFailed, WebSocketConnectionClosed, NetworkError,\n            BrowserNotRunning, FailedToStartBrowser, UnsupportedOS, NoValidTabFound,\n            InvalidCommand, InvalidResponse, ResendCommandFailed, CommandExecutionTimeout,\n            InvalidCallback, EventNotSupported, ElementNotFound, ElementNotVisible,\n            ElementNotInteractable, ClickIntercepted, ElementNotAFileInput,",
        "detail": "tests.test_exceptions",
        "documentation": {}
    },
    {
        "label": "MockFindElementsMixin",
        "kind": 6,
        "importPath": "tests.test_find_elements_mixin",
        "description": "tests.test_find_elements_mixin",
        "peekOfCode": "class MockFindElementsMixin(FindElementsMixin):\n    \"\"\"Mock implementation of FindElementsMixin for testing.\"\"\"\n    def __init__(self):\n        self._connection_handler = AsyncMock()\n        # Some tests need object_id, others don't\n        self._object_id = None\nclass TestBuildXPath:\n    \"\"\"Test the _build_xpath static method comprehensively.\"\"\"\n    def test_build_xpath_single_id(self):\n        \"\"\"Test XPath building with only ID.\"\"\"",
        "detail": "tests.test_find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "TestBuildXPath",
        "kind": 6,
        "importPath": "tests.test_find_elements_mixin",
        "description": "tests.test_find_elements_mixin",
        "peekOfCode": "class TestBuildXPath:\n    \"\"\"Test the _build_xpath static method comprehensively.\"\"\"\n    def test_build_xpath_single_id(self):\n        \"\"\"Test XPath building with only ID.\"\"\"\n        xpath = FindElementsMixin._build_xpath(id='test-id')\n        assert xpath == '//*[@id=\"test-id\"]'\n    def test_build_xpath_single_class_name(self):\n        \"\"\"Test XPath building with only class name.\"\"\"\n        xpath = FindElementsMixin._build_xpath(class_name='btn-primary')\n        expected = '//*[contains(concat(\" \", normalize-space(@class), \" \"), \" btn-primary \")]'",
        "detail": "tests.test_find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "TestGetExpressionType",
        "kind": 6,
        "importPath": "tests.test_find_elements_mixin",
        "description": "tests.test_find_elements_mixin",
        "peekOfCode": "class TestGetExpressionType:\n    \"\"\"Test the _get_expression_type static method.\"\"\"\n    def test_xpath_double_slash(self):\n        \"\"\"Test XPath detection with double slash.\"\"\"\n        assert FindElementsMixin._get_expression_type('//div') == By.XPATH\n    def test_xpath_dot_double_slash(self):\n        \"\"\"Test XPath detection with dot double slash.\"\"\"\n        assert FindElementsMixin._get_expression_type('.//span') == By.XPATH\n    def test_xpath_dot_slash(self):\n        \"\"\"Test XPath detection with dot slash.\"\"\"",
        "detail": "tests.test_find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "TestEnsureRelativeXPath",
        "kind": 6,
        "importPath": "tests.test_find_elements_mixin",
        "description": "tests.test_find_elements_mixin",
        "peekOfCode": "class TestEnsureRelativeXPath:\n    \"\"\"Test the _ensure_relative_xpath static method.\"\"\"\n    def test_absolute_xpath_becomes_relative(self):\n        \"\"\"Test that absolute XPath becomes relative.\"\"\"\n        xpath = '//div[@id=\"test\"]'\n        result = FindElementsMixin._ensure_relative_xpath(xpath)\n        assert result == './/div[@id=\"test\"]'\n    def test_already_relative_xpath_unchanged(self):\n        \"\"\"Test that already relative XPath remains unchanged.\"\"\"\n        xpath = './/div[@id=\"test\"]'",
        "detail": "tests.test_find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "TestGetByAndValue",
        "kind": 6,
        "importPath": "tests.test_find_elements_mixin",
        "description": "tests.test_find_elements_mixin",
        "peekOfCode": "class TestGetByAndValue:\n    \"\"\"Test the _get_by_and_value method.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.mixin = MockFindElementsMixin()\n        self.by_map = {\n            'id': By.ID,\n            'class_name': By.CLASS_NAME,\n            'name': By.NAME,\n            'tag_name': By.TAG_NAME,",
        "detail": "tests.test_find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "TestFindElementsMixinEdgeCases",
        "kind": 6,
        "importPath": "tests.test_find_elements_mixin",
        "description": "tests.test_find_elements_mixin",
        "peekOfCode": "class TestFindElementsMixinEdgeCases:\n    \"\"\"Test edge cases and error conditions in FindElementsMixin.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.mixin = MockFindElementsMixin()\n    @pytest.mark.asyncio\n    async def test_find_no_criteria_raises_error(self):\n        \"\"\"Test that find with no criteria raises ValueError.\"\"\"\n        with pytest.raises(ValueError, match='At least one of the following arguments must be provided'):\n            await self.mixin.find()",
        "detail": "tests.test_find_elements_mixin",
        "documentation": {}
    },
    {
        "label": "TestUtils",
        "kind": 6,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "class TestUtils:\n    \"\"\"\n    Test class for utility functions in the pydoll.utils module.\n    Groups tests related to image decoding, browser communication, and path validation.\n    \"\"\"\n    def test_decode_image_to_bytes(self):\n        \"\"\"\n        Test the decode_base64_to_bytes function.\n        Verifies that the function correctly decodes a base64 string\n        to its original bytes.",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "TestDecodeBase64ToBytes",
        "kind": 6,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "class TestDecodeBase64ToBytes:\n    \"\"\"Test decode_base64_to_bytes function.\"\"\"\n    def test_decode_base64_to_bytes_valid_input(self):\n        \"\"\"Test decoding valid base64 string.\"\"\"\n        base64_string = 'SGVsbG8gV29ybGQ='  # \"Hello World\" in base64\n        result = decode_base64_to_bytes(base64_string)\n        assert result == b'Hello World'\n    def test_decode_base64_to_bytes_empty_string(self):\n        \"\"\"Test decoding empty base64 string.\"\"\"\n        result = decode_base64_to_bytes('')",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "TestValidateBrowserPaths",
        "kind": 6,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "class TestValidateBrowserPaths:\n    \"\"\"Test validate_browser_paths function.\"\"\"\n    def test_validate_browser_paths_valid_path(self, tmp_path):\n        \"\"\"Test with valid executable path.\"\"\"\n        # Create a temporary executable file\n        executable = tmp_path / \"browser\"\n        executable.write_text(\"#!/bin/bash\\necho 'browser'\")\n        executable.chmod(0o755)\n        result = validate_browser_paths([str(executable)])\n        assert result == str(executable)",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "TestScriptAnalysisFunctions",
        "kind": 6,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "class TestScriptAnalysisFunctions:\n    \"\"\"Test JavaScript script analysis functions.\"\"\"\n    def test_clean_script_for_analysis_removes_comments(self):\n        \"\"\"Test that comments are removed from script.\"\"\"\n        script = '''\n        // This is a line comment\n        var x = 5;\n        /* This is a block comment */\n        return x;\n        '''",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "TestWebElementInitialization",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementInitialization:\n    \"\"\"Test WebElement initialization and basic properties.\"\"\"\n    def test_web_element_initialization(self, web_element):\n        \"\"\"Test basic WebElement initialization.\"\"\"\n        assert web_element._object_id == 'test-object-id'\n        assert web_element._search_method == 'css'\n        assert web_element._selector == '#test'\n        assert web_element._attributes == {\n            'id': 'test-id',\n            'class_name': 'test-class',",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementProperties",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementProperties:\n    \"\"\"Test WebElement properties and getters.\"\"\"\n    def test_basic_properties(self, web_element):\n        \"\"\"Test basic property accessors.\"\"\"\n        assert web_element.value == 'test-value'\n        assert web_element.class_name == 'test-class'\n        assert web_element.id == 'test-id'\n        assert web_element.tag_name == 'div'\n    def test_is_enabled_property(self, web_element, disabled_element):\n        \"\"\"Test is_enabled property for enabled and disabled elements.\"\"\"",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementMethods",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementMethods:\n    \"\"\"Test WebElement methods and interactions.\"\"\"\n    def test_get_attribute(self, web_element):\n        \"\"\"Test get_attribute method.\"\"\"\n        assert web_element.get_attribute('id') == 'test-id'\n        assert web_element.get_attribute('class_name') == 'test-class'\n        assert web_element.get_attribute('nonexistent') is None\n    @pytest.mark.asyncio\n    async def test_get_bounds_using_js(self, web_element):\n        \"\"\"Test JavaScript-based bounds calculation.\"\"\"",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementKeyboardInteraction",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementKeyboardInteraction:\n    \"\"\"Test keyboard interaction methods.\"\"\"\n    @pytest.mark.asyncio\n    async def test_key_down(self, web_element):\n        \"\"\"Test key_down method.\"\"\"\n        key = Key.ENTER\n        modifiers = KeyModifier.CTRL\n        await web_element.key_down(key, modifiers)\n        web_element._connection_handler.execute_command.assert_called_once()\n    @pytest.mark.asyncio",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementClicking",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementClicking:\n    \"\"\"Test clicking methods and behaviors.\"\"\"\n    @pytest.mark.asyncio\n    async def test_click_using_js_success(self, web_element):\n        \"\"\"Test successful JavaScript click.\"\"\"\n        # Mock element visibility and click success\n        web_element._is_element_visible = AsyncMock(return_value=True)\n        web_element.scroll_into_view = AsyncMock()\n        web_element._execute_script = AsyncMock(\n            return_value={'result': {'result': {'value': True}}}",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementFileInput",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementFileInput:\n    \"\"\"Test file input specific functionality.\"\"\"\n    @pytest.mark.asyncio\n    async def test_set_input_files_success(self, file_input_element):\n        \"\"\"Test successful file input setting.\"\"\"\n        files = ['/path/to/file1.txt', '/path/to/file2.pdf']\n        await file_input_element.set_input_files(files)\n        file_input_element._connection_handler.execute_command.assert_called_once()\n    @pytest.mark.asyncio\n    async def test_set_input_files_not_file_input(self, web_element):",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementScreenshot",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementScreenshot:\n    \"\"\"Test screenshot functionality.\"\"\"\n    @pytest.mark.asyncio\n    async def test_take_screenshot_success(self, web_element, tmp_path):\n        \"\"\"Test successful element screenshot.\"\"\"\n        bounds = {'x': 10, 'y': 20, 'width': 100, 'height': 50}\n        screenshot_data = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/wcAAgAB/edzE+oAAAAASUVORK5CYII='\n        web_element._connection_handler.execute_command.side_effect = [\n            {'result': {'result': {'value': json.dumps(bounds)}}},  # get_bounds_using_js\n            {'result': {'data': screenshot_data}},  # capture_screenshot",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementVisibility",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementVisibility:\n    \"\"\"Test element visibility and interaction checks.\"\"\"\n    @pytest.mark.asyncio\n    async def test_is_element_visible_true(self, web_element):\n        \"\"\"Test _is_element_visible returns True.\"\"\"\n        web_element._execute_script = AsyncMock(\n            return_value={'result': {'result': {'value': True}}}\n        )\n        result = await web_element._is_element_visible()\n        assert result is True",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementUtilityMethods",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementUtilityMethods:\n    \"\"\"Test utility and helper methods.\"\"\"\n    def test_calculate_center(self):\n        \"\"\"Test _calculate_center static method.\"\"\"\n        # Rectangle: (0,0), (100,0), (100,100), (0,100)\n        bounds = [0, 0, 100, 0, 100, 100, 0, 100]\n        x_center, y_center = WebElement._calculate_center(bounds)\n        assert x_center == 50\n        assert y_center == 50\n    def test_calculate_center_irregular_shape(self):",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementFindMethods",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementFindMethods:\n    \"\"\"Test element finding methods from FindElementsMixin.\"\"\"\n    @pytest.mark.asyncio\n    async def test_find_element_success(self, web_element):\n        \"\"\"Test successful element finding.\"\"\"\n        node_response = {'result': {'result': {'objectId': 'found-element-id'}}}\n        describe_response = {\n            'result': {\n                'node': {'nodeName': 'BUTTON', 'attributes': ['class', 'btn']}\n            }",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "TestWebElementEdgeCases",
        "kind": 6,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "class TestWebElementEdgeCases:\n    \"\"\"Test edge cases and error conditions.\"\"\"\n    @pytest.mark.asyncio\n    async def test_bounds_property_with_connection_error(self, web_element):\n        \"\"\"Test bounds property when connection fails.\"\"\"\n        web_element._connection_handler.execute_command.side_effect = Exception(\"Connection failed\")\n        with pytest.raises(Exception, match=\"Connection failed\"):\n            await web_element.bounds\n    @pytest.mark.asyncio\n    async def test_text_property_with_malformed_html(self, web_element):",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "web_element",
        "kind": 2,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "def web_element(mock_connection_handler):\n    \"\"\"Basic WebElement fixture with common attributes.\"\"\"\n    attributes_list = [\n        'id', 'test-id',\n        'class', 'test-class',\n        'value', 'test-value',\n        'tag_name', 'div',\n        'type', 'text'\n    ]\n    return WebElement(",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "input_element",
        "kind": 2,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "def input_element(mock_connection_handler):\n    \"\"\"Input element fixture for form-related tests.\"\"\"\n    attributes_list = [\n        'id', 'input-id',\n        'tag_name', 'input',\n        'type', 'text',\n        'value', 'initial-value'\n    ]\n    return WebElement(\n        object_id='input-object-id',",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "file_input_element",
        "kind": 2,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "def file_input_element(mock_connection_handler):\n    \"\"\"File input element fixture for file upload tests.\"\"\"\n    attributes_list = [\n        'id', 'file-input-id',\n        'tag_name', 'input',\n        'type', 'file'\n    ]\n    return WebElement(\n        object_id='file-input-object-id',\n        connection_handler=mock_connection_handler,",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "option_element",
        "kind": 2,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "def option_element(mock_connection_handler):\n    \"\"\"Option element fixture for dropdown tests.\"\"\"\n    attributes_list = [\n        'tag_name', 'option',\n        'value', 'option-value',\n        'id', 'option-id'\n    ]\n    return WebElement(\n        object_id='option-object-id',\n        connection_handler=mock_connection_handler,",
        "detail": "tests.test_web_element",
        "documentation": {}
    },
    {
        "label": "disabled_element",
        "kind": 2,
        "importPath": "tests.test_web_element",
        "description": "tests.test_web_element",
        "peekOfCode": "def disabled_element(mock_connection_handler):\n    \"\"\"Disabled element fixture for testing enabled/disabled state.\"\"\"\n    attributes_list = [\n        'id', 'disabled-id',\n        'tag_name', 'button',\n        'disabled', 'true'\n    ]\n    return WebElement(\n        object_id='disabled-object-id',\n        connection_handler=mock_connection_handler,",
        "detail": "tests.test_web_element",
        "documentation": {}
    }
]